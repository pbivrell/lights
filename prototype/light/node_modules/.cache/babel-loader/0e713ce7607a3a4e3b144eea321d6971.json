{"ast":null,"code":"import _classCallCheck from \"/Users/pbivrell/light/light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pbivrell/light/light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/pbivrell/light/light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/pbivrell/light/light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/pbivrell/light/light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Util, Transform } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { Shape } from '../Shape.js';\nimport { Rect } from './Rect.js';\nimport { Group } from '../Group.js';\nimport { Konva } from '../Global.js';\nimport { getBooleanValidator, getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nvar EVENTS_NAME = 'tr-konva';\nvar ATTR_CHANGE_LIST = ['resizeEnabledChange', 'rotateAnchorOffsetChange', 'rotateEnabledChange', 'enabledAnchorsChange', 'anchorSizeChange', 'borderEnabledChange', 'borderStrokeChange', 'borderStrokeWidthChange', 'borderDashChange', 'anchorStrokeChange', 'anchorStrokeWidthChange', 'anchorFillChange', 'anchorCornerRadiusChange', 'ignoreStrokeChange'].map(function (e) {\n  return e + \".\".concat(EVENTS_NAME);\n}).join(' ');\nvar NODES_RECT = 'nodesRect';\nvar TRANSFORM_CHANGE_STR = ['widthChange', 'heightChange', 'scaleXChange', 'scaleYChange', 'skewXChange', 'skewYChange', 'rotationChange', 'offsetXChange', 'offsetYChange', 'transformsEnabledChange', 'strokeWidthChange'];\nvar ANGLES = {\n  'top-left': -45,\n  'top-center': 0,\n  'top-right': 45,\n  'middle-right': -90,\n  'middle-left': 90,\n  'bottom-left': -135,\n  'bottom-center': 180,\n  'bottom-right': 135\n};\nvar TOUCH_DEVICE = ('ontouchstart' in Konva._global);\n\nfunction getCursor(anchorName, rad) {\n  if (anchorName === 'rotater') {\n    return 'crosshair';\n  }\n\n  rad += Util.degToRad(ANGLES[anchorName] || 0);\n  var angle = (Util.radToDeg(rad) % 360 + 360) % 360;\n\n  if (Util._inRange(angle, 315 + 22.5, 360) || Util._inRange(angle, 0, 22.5)) {\n    return 'ns-resize';\n  } else if (Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {\n    return 'nesw-resize';\n  } else if (Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {\n    return 'ew-resize';\n  } else if (Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {\n    return 'nwse-resize';\n  } else if (Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {\n    return 'ns-resize';\n  } else if (Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {\n    return 'nesw-resize';\n  } else if (Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {\n    return 'ew-resize';\n  } else if (Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {\n    return 'nwse-resize';\n  } else {\n    Util.error('Transformer has unknown angle for cursor detection: ' + angle);\n    return 'pointer';\n  }\n}\n\nvar ANCHORS_NAMES = ['top-left', 'top-center', 'top-right', 'middle-right', 'middle-left', 'bottom-left', 'bottom-center', 'bottom-right'];\nvar MAX_SAFE_INTEGER = 100000000;\n\nfunction getCenter(shape) {\n  return {\n    x: shape.x + shape.width / 2 * Math.cos(shape.rotation) + shape.height / 2 * Math.sin(-shape.rotation),\n    y: shape.y + shape.height / 2 * Math.cos(shape.rotation) + shape.width / 2 * Math.sin(shape.rotation)\n  };\n}\n\nfunction rotateAroundPoint(shape, angleRad, point) {\n  var x = point.x + (shape.x - point.x) * Math.cos(angleRad) - (shape.y - point.y) * Math.sin(angleRad);\n  var y = point.y + (shape.x - point.x) * Math.sin(angleRad) + (shape.y - point.y) * Math.cos(angleRad);\n  return Object.assign(Object.assign({}, shape), {\n    rotation: shape.rotation + angleRad,\n    x: x,\n    y: y\n  });\n}\n\nfunction rotateAroundCenter(shape, deltaRad) {\n  var center = getCenter(shape);\n  return rotateAroundPoint(shape, deltaRad, center);\n}\n\nfunction getSnap(snaps, newRotationRad, tol) {\n  var snapped = newRotationRad;\n\n  for (var i = 0; i < snaps.length; i++) {\n    var angle = Konva.getAngle(snaps[i]);\n    var absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);\n    var dif = Math.min(absDiff, Math.PI * 2 - absDiff);\n\n    if (dif < tol) {\n      snapped = angle;\n    }\n  }\n\n  return snapped;\n}\n\nexport var Transformer = /*#__PURE__*/function (_Group) {\n  _inherits(Transformer, _Group);\n\n  var _super = _createSuper(Transformer);\n\n  function Transformer(config) {\n    var _this;\n\n    _classCallCheck(this, Transformer);\n\n    _this = _super.call(this, config);\n    _this._transforming = false;\n\n    _this._createElements();\n\n    _this._handleMouseMove = _this._handleMouseMove.bind(_assertThisInitialized(_this));\n    _this._handleMouseUp = _this._handleMouseUp.bind(_assertThisInitialized(_this));\n    _this.update = _this.update.bind(_assertThisInitialized(_this));\n\n    _this.on(ATTR_CHANGE_LIST, _this.update);\n\n    if (_this.getNode()) {\n      _this.update();\n    }\n\n    return _this;\n  }\n\n  _createClass(Transformer, [{\n    key: \"attachTo\",\n    value: function attachTo(node) {\n      this.setNode(node);\n      return this;\n    }\n  }, {\n    key: \"setNode\",\n    value: function setNode(node) {\n      Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');\n      return this.setNodes([node]);\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode() {\n      return this._nodes && this._nodes[0];\n    }\n  }, {\n    key: \"_getEventNamespace\",\n    value: function _getEventNamespace() {\n      return EVENTS_NAME + this._id;\n    }\n  }, {\n    key: \"setNodes\",\n    value: function setNodes() {\n      var _this2 = this;\n\n      var nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (this._nodes && this._nodes.length) {\n        this.detach();\n      }\n\n      this._nodes = nodes;\n\n      if (nodes.length === 1 && this.useSingleNodeRotation()) {\n        this.rotation(nodes[0].getAbsoluteRotation());\n      } else {\n        this.rotation(0);\n      }\n\n      this._nodes.forEach(function (node) {\n        var onChange = function onChange() {\n          if (_this2.nodes().length === 1 && _this2.useSingleNodeRotation()) {\n            _this2.rotation(_this2.nodes()[0].getAbsoluteRotation());\n          }\n\n          _this2._resetTransformCache();\n\n          if (!_this2._transforming && !_this2.isDragging()) {\n            _this2.update();\n          }\n        };\n\n        var additionalEvents = node._attrsAffectingSize.map(function (prop) {\n          return prop + 'Change.' + _this2._getEventNamespace();\n        }).join(' ');\n\n        node.on(additionalEvents, onChange);\n        node.on(TRANSFORM_CHANGE_STR.map(function (e) {\n          return e + \".\".concat(_this2._getEventNamespace());\n        }).join(' '), onChange);\n        node.on(\"absoluteTransformChange.\".concat(_this2._getEventNamespace()), onChange);\n\n        _this2._proxyDrag(node);\n      });\n\n      this._resetTransformCache();\n\n      var elementsCreated = !!this.findOne('.top-left');\n\n      if (elementsCreated) {\n        this.update();\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_proxyDrag\",\n    value: function _proxyDrag(node) {\n      var _this3 = this;\n\n      var lastPos;\n      node.on(\"dragstart.\".concat(this._getEventNamespace()), function (e) {\n        lastPos = node.getAbsolutePosition();\n\n        if (!_this3.isDragging() && node !== _this3.findOne('.back')) {\n          _this3.startDrag(e, false);\n        }\n      });\n      node.on(\"dragmove.\".concat(this._getEventNamespace()), function (e) {\n        if (!lastPos) {\n          return;\n        }\n\n        var abs = node.getAbsolutePosition();\n        var dx = abs.x - lastPos.x;\n        var dy = abs.y - lastPos.y;\n\n        _this3.nodes().forEach(function (otherNode) {\n          if (otherNode === node) {\n            return;\n          }\n\n          if (otherNode.isDragging()) {\n            return;\n          }\n\n          var otherAbs = otherNode.getAbsolutePosition();\n          otherNode.setAbsolutePosition({\n            x: otherAbs.x + dx,\n            y: otherAbs.y + dy\n          });\n          otherNode.startDrag(e);\n        });\n\n        lastPos = null;\n      });\n    }\n  }, {\n    key: \"getNodes\",\n    value: function getNodes() {\n      return this._nodes || [];\n    }\n  }, {\n    key: \"getActiveAnchor\",\n    value: function getActiveAnchor() {\n      return this._movingAnchorName;\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      var _this4 = this;\n\n      if (this._nodes) {\n        this._nodes.forEach(function (node) {\n          node.off('.' + _this4._getEventNamespace());\n        });\n      }\n\n      this._nodes = [];\n\n      this._resetTransformCache();\n    }\n  }, {\n    key: \"_resetTransformCache\",\n    value: function _resetTransformCache() {\n      this._clearCache(NODES_RECT);\n\n      this._clearCache('transform');\n\n      this._clearSelfAndDescendantCache('absoluteTransform');\n    }\n  }, {\n    key: \"_getNodeRect\",\n    value: function _getNodeRect() {\n      return this._getCache(NODES_RECT, this.__getNodeRect);\n    }\n  }, {\n    key: \"__getNodeShape\",\n    value: function __getNodeShape(node) {\n      var rot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.rotation();\n      var relative = arguments.length > 2 ? arguments[2] : undefined;\n      var rect = node.getClientRect({\n        skipTransform: true,\n        skipShadow: true,\n        skipStroke: this.ignoreStroke()\n      });\n      var absScale = node.getAbsoluteScale(relative);\n      var absPos = node.getAbsolutePosition(relative);\n      var dx = rect.x * absScale.x - node.offsetX() * absScale.x;\n      var dy = rect.y * absScale.y - node.offsetY() * absScale.y;\n      var rotation = (Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) % (Math.PI * 2);\n      var box = {\n        x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),\n        y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),\n        width: rect.width * absScale.x,\n        height: rect.height * absScale.y,\n        rotation: rotation\n      };\n      return rotateAroundPoint(box, -Konva.getAngle(rot), {\n        x: 0,\n        y: 0\n      });\n    }\n  }, {\n    key: \"__getNodeRect\",\n    value: function __getNodeRect() {\n      var _this5 = this;\n\n      var node = this.getNode();\n\n      if (!node) {\n        return {\n          x: -MAX_SAFE_INTEGER,\n          y: -MAX_SAFE_INTEGER,\n          width: 0,\n          height: 0,\n          rotation: 0\n        };\n      }\n\n      var totalPoints = [];\n      this.nodes().map(function (node) {\n        var box = node.getClientRect({\n          skipTransform: true,\n          skipShadow: true,\n          skipStroke: _this5.ignoreStroke()\n        });\n        var points = [{\n          x: box.x,\n          y: box.y\n        }, {\n          x: box.x + box.width,\n          y: box.y\n        }, {\n          x: box.x + box.width,\n          y: box.y + box.height\n        }, {\n          x: box.x,\n          y: box.y + box.height\n        }];\n        var trans = node.getAbsoluteTransform();\n        points.forEach(function (point) {\n          var transformed = trans.point(point);\n          totalPoints.push(transformed);\n        });\n      });\n      var tr = new Transform();\n      tr.rotate(-Konva.getAngle(this.rotation()));\n      var minX, minY, maxX, maxY;\n      totalPoints.forEach(function (point) {\n        var transformed = tr.point(point);\n\n        if (minX === undefined) {\n          minX = maxX = transformed.x;\n          minY = maxY = transformed.y;\n        }\n\n        minX = Math.min(minX, transformed.x);\n        minY = Math.min(minY, transformed.y);\n        maxX = Math.max(maxX, transformed.x);\n        maxY = Math.max(maxY, transformed.y);\n      });\n      tr.invert();\n      var p = tr.point({\n        x: minX,\n        y: minY\n      });\n      return {\n        x: p.x,\n        y: p.y,\n        width: maxX - minX,\n        height: maxY - minY,\n        rotation: Konva.getAngle(this.rotation())\n      };\n    }\n  }, {\n    key: \"getX\",\n    value: function getX() {\n      return this._getNodeRect().x;\n    }\n  }, {\n    key: \"getY\",\n    value: function getY() {\n      return this._getNodeRect().y;\n    }\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this._getNodeRect().width;\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this._getNodeRect().height;\n    }\n  }, {\n    key: \"_createElements\",\n    value: function _createElements() {\n      this._createBack();\n\n      ANCHORS_NAMES.forEach(function (name) {\n        this._createAnchor(name);\n      }.bind(this));\n\n      this._createAnchor('rotater');\n    }\n  }, {\n    key: \"_createAnchor\",\n    value: function _createAnchor(name) {\n      var _this6 = this;\n\n      var anchor = new Rect({\n        stroke: 'rgb(0, 161, 255)',\n        fill: 'white',\n        strokeWidth: 1,\n        name: name + ' _anchor',\n        dragDistance: 0,\n        draggable: true,\n        hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto'\n      });\n      var self = this;\n      anchor.on('mousedown touchstart', function (e) {\n        self._handleMouseDown(e);\n      });\n      anchor.on('dragstart', function (e) {\n        anchor.stopDrag();\n        e.cancelBubble = true;\n      });\n      anchor.on('dragend', function (e) {\n        e.cancelBubble = true;\n      });\n      anchor.on('mouseenter', function () {\n        var rad = Konva.getAngle(_this6.rotation());\n        var cursor = getCursor(name, rad);\n        anchor.getStage().content && (anchor.getStage().content.style.cursor = cursor);\n        _this6._cursorChange = true;\n      });\n      anchor.on('mouseout', function () {\n        anchor.getStage().content && (anchor.getStage().content.style.cursor = '');\n        _this6._cursorChange = false;\n      });\n      this.add(anchor);\n    }\n  }, {\n    key: \"_createBack\",\n    value: function _createBack() {\n      var _this7 = this;\n\n      var back = new Shape({\n        name: 'back',\n        width: 0,\n        height: 0,\n        draggable: true,\n        sceneFunc: function sceneFunc(ctx) {\n          var tr = this.getParent();\n          var padding = tr.padding();\n          ctx.beginPath();\n          ctx.rect(-padding, -padding, this.width() + padding * 2, this.height() + padding * 2);\n          ctx.moveTo(this.width() / 2, -padding);\n\n          if (tr.rotateEnabled()) {\n            ctx.lineTo(this.width() / 2, -tr.rotateAnchorOffset() * Util._sign(this.height()) - padding);\n          }\n\n          ctx.fillStrokeShape(this);\n        },\n        hitFunc: function hitFunc(ctx, shape) {\n          if (!_this7.shouldOverdrawWholeArea()) {\n            return;\n          }\n\n          var padding = _this7.padding();\n\n          ctx.beginPath();\n          ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);\n          ctx.fillStrokeShape(shape);\n        }\n      });\n      this.add(back);\n\n      this._proxyDrag(back);\n\n      back.on('dragstart', function (e) {\n        e.cancelBubble = true;\n      });\n      back.on('dragmove', function (e) {\n        e.cancelBubble = true;\n      });\n      back.on('dragend', function (e) {\n        e.cancelBubble = true;\n      });\n      this.on('dragmove', function (e) {\n        _this7.update();\n      });\n    }\n  }, {\n    key: \"_handleMouseDown\",\n    value: function _handleMouseDown(e) {\n      this._movingAnchorName = e.target.name().split(' ')[0];\n\n      var attrs = this._getNodeRect();\n\n      var width = attrs.width;\n      var height = attrs.height;\n      var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n      this.sin = Math.abs(height / hypotenuse);\n      this.cos = Math.abs(width / hypotenuse);\n\n      if (typeof window !== 'undefined') {\n        window.addEventListener('mousemove', this._handleMouseMove);\n        window.addEventListener('touchmove', this._handleMouseMove);\n        window.addEventListener('mouseup', this._handleMouseUp, true);\n        window.addEventListener('touchend', this._handleMouseUp, true);\n      }\n\n      this._transforming = true;\n      var ap = e.target.getAbsolutePosition();\n      var pos = e.target.getStage().getPointerPosition();\n      this._anchorDragOffset = {\n        x: pos.x - ap.x,\n        y: pos.y - ap.y\n      };\n\n      this._fire('transformstart', {\n        evt: e,\n        target: this.getNode()\n      });\n\n      this._nodes.forEach(function (target) {\n        target._fire('transformstart', {\n          evt: e,\n          target: target\n        });\n      });\n    }\n  }, {\n    key: \"_handleMouseMove\",\n    value: function _handleMouseMove(e) {\n      var x, y, newHypotenuse;\n      var anchorNode = this.findOne('.' + this._movingAnchorName);\n      var stage = anchorNode.getStage();\n      stage.setPointersPositions(e);\n      var pp = stage.getPointerPosition();\n      var newNodePos = {\n        x: pp.x - this._anchorDragOffset.x,\n        y: pp.y - this._anchorDragOffset.y\n      };\n      var oldAbs = anchorNode.getAbsolutePosition();\n\n      if (this.anchorDragBoundFunc()) {\n        newNodePos = this.anchorDragBoundFunc()(oldAbs, newNodePos, e);\n      }\n\n      anchorNode.setAbsolutePosition(newNodePos);\n      var newAbs = anchorNode.getAbsolutePosition();\n\n      if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {\n        return;\n      }\n\n      if (this._movingAnchorName === 'rotater') {\n        var attrs = this._getNodeRect();\n\n        x = anchorNode.x() - attrs.width / 2;\n        y = -anchorNode.y() + attrs.height / 2;\n        var delta = Math.atan2(-y, x) + Math.PI / 2;\n\n        if (attrs.height < 0) {\n          delta -= Math.PI;\n        }\n\n        var oldRotation = Konva.getAngle(this.rotation());\n        var newRotation = oldRotation + delta;\n        var tol = Konva.getAngle(this.rotationSnapTolerance());\n        var snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);\n        var diff = snappedRot - attrs.rotation;\n        var shape = rotateAroundCenter(attrs, diff);\n\n        this._fitNodesInto(shape, e);\n\n        return;\n      }\n\n      var keepProportion = this.keepRatio() || e.shiftKey;\n      var centeredScaling = this.centeredScaling() || e.altKey;\n\n      if (this._movingAnchorName === 'top-left') {\n        if (keepProportion) {\n          var comparePoint = centeredScaling ? {\n            x: this.width() / 2,\n            y: this.height() / 2\n          } : {\n            x: this.findOne('.bottom-right').x(),\n            y: this.findOne('.bottom-right').y()\n          };\n          newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) + Math.pow(comparePoint.y - anchorNode.y(), 2));\n          var reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;\n          var reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;\n          x = newHypotenuse * this.cos * reverseX;\n          y = newHypotenuse * this.sin * reverseY;\n          this.findOne('.top-left').x(comparePoint.x - x);\n          this.findOne('.top-left').y(comparePoint.y - y);\n        }\n      } else if (this._movingAnchorName === 'top-center') {\n        this.findOne('.top-left').y(anchorNode.y());\n      } else if (this._movingAnchorName === 'top-right') {\n        if (keepProportion) {\n          var comparePoint = centeredScaling ? {\n            x: this.width() / 2,\n            y: this.height() / 2\n          } : {\n            x: this.findOne('.bottom-left').x(),\n            y: this.findOne('.bottom-left').y()\n          };\n          newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) + Math.pow(comparePoint.y - anchorNode.y(), 2));\n          var reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;\n          var reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;\n          x = newHypotenuse * this.cos * reverseX;\n          y = newHypotenuse * this.sin * reverseY;\n          this.findOne('.top-right').x(comparePoint.x + x);\n          this.findOne('.top-right').y(comparePoint.y - y);\n        }\n\n        var pos = anchorNode.position();\n        this.findOne('.top-left').y(pos.y);\n        this.findOne('.bottom-right').x(pos.x);\n      } else if (this._movingAnchorName === 'middle-left') {\n        this.findOne('.top-left').x(anchorNode.x());\n      } else if (this._movingAnchorName === 'middle-right') {\n        this.findOne('.bottom-right').x(anchorNode.x());\n      } else if (this._movingAnchorName === 'bottom-left') {\n        if (keepProportion) {\n          var comparePoint = centeredScaling ? {\n            x: this.width() / 2,\n            y: this.height() / 2\n          } : {\n            x: this.findOne('.top-right').x(),\n            y: this.findOne('.top-right').y()\n          };\n          newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) + Math.pow(anchorNode.y() - comparePoint.y, 2));\n          var reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;\n          var reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;\n          x = newHypotenuse * this.cos * reverseX;\n          y = newHypotenuse * this.sin * reverseY;\n          anchorNode.x(comparePoint.x - x);\n          anchorNode.y(comparePoint.y + y);\n        }\n\n        pos = anchorNode.position();\n        this.findOne('.top-left').x(pos.x);\n        this.findOne('.bottom-right').y(pos.y);\n      } else if (this._movingAnchorName === 'bottom-center') {\n        this.findOne('.bottom-right').y(anchorNode.y());\n      } else if (this._movingAnchorName === 'bottom-right') {\n        if (keepProportion) {\n          var comparePoint = centeredScaling ? {\n            x: this.width() / 2,\n            y: this.height() / 2\n          } : {\n            x: this.findOne('.top-left').x(),\n            y: this.findOne('.top-left').y()\n          };\n          newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) + Math.pow(anchorNode.y() - comparePoint.y, 2));\n          var reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;\n          var reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;\n          x = newHypotenuse * this.cos * reverseX;\n          y = newHypotenuse * this.sin * reverseY;\n          this.findOne('.bottom-right').x(comparePoint.x + x);\n          this.findOne('.bottom-right').y(comparePoint.y + y);\n        }\n      } else {\n        console.error(new Error('Wrong position argument of selection resizer: ' + this._movingAnchorName));\n      }\n\n      var centeredScaling = this.centeredScaling() || e.altKey;\n\n      if (centeredScaling) {\n        var topLeft = this.findOne('.top-left');\n        var bottomRight = this.findOne('.bottom-right');\n        var topOffsetX = topLeft.x();\n        var topOffsetY = topLeft.y();\n        var bottomOffsetX = this.getWidth() - bottomRight.x();\n        var bottomOffsetY = this.getHeight() - bottomRight.y();\n        bottomRight.move({\n          x: -topOffsetX,\n          y: -topOffsetY\n        });\n        topLeft.move({\n          x: bottomOffsetX,\n          y: bottomOffsetY\n        });\n      }\n\n      var absPos = this.findOne('.top-left').getAbsolutePosition();\n      x = absPos.x;\n      y = absPos.y;\n      var width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();\n      var height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();\n\n      this._fitNodesInto({\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        rotation: Konva.getAngle(this.rotation())\n      }, e);\n    }\n  }, {\n    key: \"_handleMouseUp\",\n    value: function _handleMouseUp(e) {\n      this._removeEvents(e);\n    }\n  }, {\n    key: \"getAbsoluteTransform\",\n    value: function getAbsoluteTransform() {\n      return this.getTransform();\n    }\n  }, {\n    key: \"_removeEvents\",\n    value: function _removeEvents(e) {\n      if (this._transforming) {\n        this._transforming = false;\n\n        if (typeof window !== 'undefined') {\n          window.removeEventListener('mousemove', this._handleMouseMove);\n          window.removeEventListener('touchmove', this._handleMouseMove);\n          window.removeEventListener('mouseup', this._handleMouseUp, true);\n          window.removeEventListener('touchend', this._handleMouseUp, true);\n        }\n\n        var node = this.getNode();\n\n        this._fire('transformend', {\n          evt: e,\n          target: node\n        });\n\n        if (node) {\n          this._nodes.forEach(function (target) {\n            target._fire('transformend', {\n              evt: e,\n              target: target\n            });\n          });\n        }\n\n        this._movingAnchorName = null;\n      }\n    }\n  }, {\n    key: \"_fitNodesInto\",\n    value: function _fitNodesInto(newAttrs, evt) {\n      var _this8 = this;\n\n      var oldAttrs = this._getNodeRect();\n\n      var minSize = 1;\n\n      if (Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {\n        this.update();\n        return;\n      }\n\n      if (Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {\n        this.update();\n        return;\n      }\n\n      var allowNegativeScale = this.flipEnabled();\n      var t = new Transform();\n      t.rotate(Konva.getAngle(this.rotation()));\n\n      if (this._movingAnchorName && newAttrs.width < 0 && this._movingAnchorName.indexOf('left') >= 0) {\n        var offset = t.point({\n          x: -this.padding() * 2,\n          y: 0\n        });\n        newAttrs.x += offset.x;\n        newAttrs.y += offset.y;\n        newAttrs.width += this.padding() * 2;\n        this._movingAnchorName = this._movingAnchorName.replace('left', 'right');\n        this._anchorDragOffset.x -= offset.x;\n        this._anchorDragOffset.y -= offset.y;\n\n        if (!allowNegativeScale) {\n          this.update();\n          return;\n        }\n      } else if (this._movingAnchorName && newAttrs.width < 0 && this._movingAnchorName.indexOf('right') >= 0) {\n        var _offset = t.point({\n          x: this.padding() * 2,\n          y: 0\n        });\n\n        this._movingAnchorName = this._movingAnchorName.replace('right', 'left');\n        this._anchorDragOffset.x -= _offset.x;\n        this._anchorDragOffset.y -= _offset.y;\n        newAttrs.width += this.padding() * 2;\n\n        if (!allowNegativeScale) {\n          this.update();\n          return;\n        }\n      }\n\n      if (this._movingAnchorName && newAttrs.height < 0 && this._movingAnchorName.indexOf('top') >= 0) {\n        var _offset2 = t.point({\n          x: 0,\n          y: -this.padding() * 2\n        });\n\n        newAttrs.x += _offset2.x;\n        newAttrs.y += _offset2.y;\n        this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');\n        this._anchorDragOffset.x -= _offset2.x;\n        this._anchorDragOffset.y -= _offset2.y;\n        newAttrs.height += this.padding() * 2;\n\n        if (!allowNegativeScale) {\n          this.update();\n          return;\n        }\n      } else if (this._movingAnchorName && newAttrs.height < 0 && this._movingAnchorName.indexOf('bottom') >= 0) {\n        var _offset3 = t.point({\n          x: 0,\n          y: this.padding() * 2\n        });\n\n        this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');\n        this._anchorDragOffset.x -= _offset3.x;\n        this._anchorDragOffset.y -= _offset3.y;\n        newAttrs.height += this.padding() * 2;\n\n        if (!allowNegativeScale) {\n          this.update();\n          return;\n        }\n      }\n\n      if (this.boundBoxFunc()) {\n        var bounded = this.boundBoxFunc()(oldAttrs, newAttrs);\n\n        if (bounded) {\n          newAttrs = bounded;\n        } else {\n          Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');\n        }\n      }\n\n      var baseSize = 10000000;\n      var oldTr = new Transform();\n      oldTr.translate(oldAttrs.x, oldAttrs.y);\n      oldTr.rotate(oldAttrs.rotation);\n      oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);\n      var newTr = new Transform();\n      newTr.translate(newAttrs.x, newAttrs.y);\n      newTr.rotate(newAttrs.rotation);\n      newTr.scale(newAttrs.width / baseSize, newAttrs.height / baseSize);\n      var delta = newTr.multiply(oldTr.invert());\n\n      this._nodes.forEach(function (node) {\n        var _a;\n\n        var parentTransform = node.getParent().getAbsoluteTransform();\n        var localTransform = node.getTransform().copy();\n        localTransform.translate(node.offsetX(), node.offsetY());\n        var newLocalTransform = new Transform();\n        newLocalTransform.multiply(parentTransform.copy().invert()).multiply(delta).multiply(parentTransform).multiply(localTransform);\n        var attrs = newLocalTransform.decompose();\n        node.setAttrs(attrs);\n\n        _this8._fire('transform', {\n          evt: evt,\n          target: node\n        });\n\n        node._fire('transform', {\n          evt: evt,\n          target: node\n        });\n\n        (_a = node.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n      });\n\n      this.rotation(Util._getRotation(newAttrs.rotation));\n\n      this._resetTransformCache();\n\n      this.update();\n      this.getLayer().batchDraw();\n    }\n  }, {\n    key: \"forceUpdate\",\n    value: function forceUpdate() {\n      this._resetTransformCache();\n\n      this.update();\n    }\n  }, {\n    key: \"_batchChangeChild\",\n    value: function _batchChangeChild(selector, attrs) {\n      var anchor = this.findOne(selector);\n      anchor.setAttrs(attrs);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var _this9 = this;\n\n      var _a;\n\n      var attrs = this._getNodeRect();\n\n      this.rotation(Util._getRotation(attrs.rotation));\n      var width = attrs.width;\n      var height = attrs.height;\n      var enabledAnchors = this.enabledAnchors();\n      var resizeEnabled = this.resizeEnabled();\n      var padding = this.padding();\n      var anchorSize = this.anchorSize();\n      this.find('._anchor').forEach(function (node) {\n        node.setAttrs({\n          width: anchorSize,\n          height: anchorSize,\n          offsetX: anchorSize / 2,\n          offsetY: anchorSize / 2,\n          stroke: _this9.anchorStroke(),\n          strokeWidth: _this9.anchorStrokeWidth(),\n          fill: _this9.anchorFill(),\n          cornerRadius: _this9.anchorCornerRadius()\n        });\n      });\n\n      this._batchChangeChild('.top-left', {\n        x: 0,\n        y: 0,\n        offsetX: anchorSize / 2 + padding,\n        offsetY: anchorSize / 2 + padding,\n        visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0\n      });\n\n      this._batchChangeChild('.top-center', {\n        x: width / 2,\n        y: 0,\n        offsetY: anchorSize / 2 + padding,\n        visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0\n      });\n\n      this._batchChangeChild('.top-right', {\n        x: width,\n        y: 0,\n        offsetX: anchorSize / 2 - padding,\n        offsetY: anchorSize / 2 + padding,\n        visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0\n      });\n\n      this._batchChangeChild('.middle-left', {\n        x: 0,\n        y: height / 2,\n        offsetX: anchorSize / 2 + padding,\n        visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0\n      });\n\n      this._batchChangeChild('.middle-right', {\n        x: width,\n        y: height / 2,\n        offsetX: anchorSize / 2 - padding,\n        visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0\n      });\n\n      this._batchChangeChild('.bottom-left', {\n        x: 0,\n        y: height,\n        offsetX: anchorSize / 2 + padding,\n        offsetY: anchorSize / 2 - padding,\n        visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0\n      });\n\n      this._batchChangeChild('.bottom-center', {\n        x: width / 2,\n        y: height,\n        offsetY: anchorSize / 2 - padding,\n        visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0\n      });\n\n      this._batchChangeChild('.bottom-right', {\n        x: width,\n        y: height,\n        offsetX: anchorSize / 2 - padding,\n        offsetY: anchorSize / 2 - padding,\n        visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0\n      });\n\n      this._batchChangeChild('.rotater', {\n        x: width / 2,\n        y: -this.rotateAnchorOffset() * Util._sign(height) - padding,\n        visible: this.rotateEnabled()\n      });\n\n      this._batchChangeChild('.back', {\n        width: width,\n        height: height,\n        visible: this.borderEnabled(),\n        stroke: this.borderStroke(),\n        strokeWidth: this.borderStrokeWidth(),\n        dash: this.borderDash(),\n        x: 0,\n        y: 0\n      });\n\n      (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n    }\n  }, {\n    key: \"isTransforming\",\n    value: function isTransforming() {\n      return this._transforming;\n    }\n  }, {\n    key: \"stopTransform\",\n    value: function stopTransform() {\n      if (this._transforming) {\n        this._removeEvents();\n\n        var anchorNode = this.findOne('.' + this._movingAnchorName);\n\n        if (anchorNode) {\n          anchorNode.stopDrag();\n        }\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.getStage() && this._cursorChange) {\n        this.getStage().content && (this.getStage().content.style.cursor = '');\n      }\n\n      Group.prototype.destroy.call(this);\n      this.detach();\n\n      this._removeEvents();\n\n      return this;\n    }\n  }, {\n    key: \"toObject\",\n    value: function toObject() {\n      return Node.prototype.toObject.call(this);\n    }\n  }]);\n\n  return Transformer;\n}(Group);\n\nfunction validateAnchors(val) {\n  if (!(val instanceof Array)) {\n    Util.warn('enabledAnchors value should be an array');\n  }\n\n  if (val instanceof Array) {\n    val.forEach(function (name) {\n      if (ANCHORS_NAMES.indexOf(name) === -1) {\n        Util.warn('Unknown anchor name: ' + name + '. Available names are: ' + ANCHORS_NAMES.join(', '));\n      }\n    });\n  }\n\n  return val || [];\n}\n\nTransformer.prototype.className = 'Transformer';\n\n_registerNode(Transformer);\n\nFactory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);\nFactory.addGetterSetter(Transformer, 'flipEnabled', true, getBooleanValidator());\nFactory.addGetterSetter(Transformer, 'resizeEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorSize', 10, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotateEnabled', true);\nFactory.addGetterSetter(Transformer, 'rotationSnaps', []);\nFactory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'anchorFill', 'white');\nFactory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderDash');\nFactory.addGetterSetter(Transformer, 'keepRatio', true);\nFactory.addGetterSetter(Transformer, 'centeredScaling', false);\nFactory.addGetterSetter(Transformer, 'ignoreStroke', false);\nFactory.addGetterSetter(Transformer, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'node');\nFactory.addGetterSetter(Transformer, 'nodes');\nFactory.addGetterSetter(Transformer, 'boundBoxFunc');\nFactory.addGetterSetter(Transformer, 'anchorDragBoundFunc');\nFactory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);\nFactory.addGetterSetter(Transformer, 'useSingleNodeRotation', true);\nFactory.backCompat(Transformer, {\n  lineEnabled: 'borderEnabled',\n  rotateHandlerOffset: 'rotateAnchorOffset',\n  enabledHandlers: 'enabledAnchors'\n});","map":{"version":3,"sources":["/Users/pbivrell/light/light/node_modules/konva/lib/shapes/Transformer.js"],"names":["Util","Transform","Factory","Node","Shape","Rect","Group","Konva","getBooleanValidator","getNumberValidator","_registerNode","EVENTS_NAME","ATTR_CHANGE_LIST","map","e","join","NODES_RECT","TRANSFORM_CHANGE_STR","ANGLES","TOUCH_DEVICE","_global","getCursor","anchorName","rad","degToRad","angle","radToDeg","_inRange","error","ANCHORS_NAMES","MAX_SAFE_INTEGER","getCenter","shape","x","width","Math","cos","rotation","height","sin","y","rotateAroundPoint","angleRad","point","Object","assign","rotateAroundCenter","deltaRad","center","getSnap","snaps","newRotationRad","tol","snapped","i","length","getAngle","absDiff","abs","PI","dif","min","Transformer","config","_transforming","_createElements","_handleMouseMove","bind","_handleMouseUp","update","on","getNode","node","setNode","warn","setNodes","_nodes","_id","nodes","detach","useSingleNodeRotation","getAbsoluteRotation","forEach","onChange","_resetTransformCache","isDragging","additionalEvents","_attrsAffectingSize","prop","_getEventNamespace","_proxyDrag","elementsCreated","findOne","lastPos","getAbsolutePosition","startDrag","dx","dy","otherNode","otherAbs","setAbsolutePosition","_movingAnchorName","off","_clearCache","_clearSelfAndDescendantCache","_getCache","__getNodeRect","rot","relative","rect","getClientRect","skipTransform","skipShadow","skipStroke","ignoreStroke","absScale","getAbsoluteScale","absPos","offsetX","offsetY","box","totalPoints","points","trans","getAbsoluteTransform","transformed","push","tr","rotate","minX","minY","maxX","maxY","undefined","max","invert","p","_getNodeRect","_createBack","name","_createAnchor","anchor","stroke","fill","strokeWidth","dragDistance","draggable","hitStrokeWidth","self","_handleMouseDown","stopDrag","cancelBubble","cursor","getStage","content","style","_cursorChange","add","back","sceneFunc","ctx","getParent","padding","beginPath","moveTo","rotateEnabled","lineTo","rotateAnchorOffset","_sign","fillStrokeShape","hitFunc","shouldOverdrawWholeArea","target","split","attrs","hypotenuse","sqrt","pow","window","addEventListener","ap","pos","getPointerPosition","_anchorDragOffset","_fire","evt","newHypotenuse","anchorNode","stage","setPointersPositions","pp","newNodePos","oldAbs","anchorDragBoundFunc","newAbs","delta","atan2","oldRotation","newRotation","rotationSnapTolerance","snappedRot","rotationSnaps","diff","_fitNodesInto","keepProportion","keepRatio","shiftKey","centeredScaling","altKey","comparePoint","reverseX","reverseY","position","console","Error","topLeft","bottomRight","topOffsetX","topOffsetY","bottomOffsetX","getWidth","bottomOffsetY","getHeight","move","_removeEvents","getTransform","removeEventListener","newAttrs","oldAttrs","minSize","allowNegativeScale","flipEnabled","t","indexOf","offset","replace","boundBoxFunc","bounded","baseSize","oldTr","translate","scale","newTr","multiply","_a","parentTransform","localTransform","copy","newLocalTransform","decompose","setAttrs","getLayer","batchDraw","_getRotation","selector","enabledAnchors","resizeEnabled","anchorSize","find","anchorStroke","anchorStrokeWidth","anchorFill","cornerRadius","anchorCornerRadius","_batchChangeChild","visible","borderEnabled","borderStroke","borderStrokeWidth","dash","borderDash","prototype","destroy","call","toObject","validateAnchors","val","Array","className","addGetterSetter","backCompat","lineEnabled","rotateHandlerOffset","enabledHandlers"],"mappings":";;;;;AAAA,SAASA,IAAT,EAAeC,SAAf,QAAgC,YAAhC;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,mBAAT,EAA8BC,kBAA9B,QAAwD,kBAAxD;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,IAAIC,WAAW,GAAG,UAAlB;AACA,IAAIC,gBAAgB,GAAG,CACnB,qBADmB,EAEnB,0BAFmB,EAGnB,qBAHmB,EAInB,sBAJmB,EAKnB,kBALmB,EAMnB,qBANmB,EAOnB,oBAPmB,EAQnB,yBARmB,EASnB,kBATmB,EAUnB,oBAVmB,EAWnB,yBAXmB,EAYnB,kBAZmB,EAanB,0BAbmB,EAcnB,oBAdmB,EAgBlBC,GAhBkB,CAgBd,UAACC,CAAD;AAAA,SAAOA,CAAC,cAAOH,WAAP,CAAR;AAAA,CAhBc,EAiBlBI,IAjBkB,CAiBb,GAjBa,CAAvB;AAkBA,IAAIC,UAAU,GAAG,WAAjB;AACA,IAAIC,oBAAoB,GAAG,CACvB,aADuB,EAEvB,cAFuB,EAGvB,cAHuB,EAIvB,cAJuB,EAKvB,aALuB,EAMvB,aANuB,EAOvB,gBAPuB,EAQvB,eARuB,EASvB,eATuB,EAUvB,yBAVuB,EAWvB,mBAXuB,CAA3B;AAaA,IAAIC,MAAM,GAAG;AACT,cAAY,CAAC,EADJ;AAET,gBAAc,CAFL;AAGT,eAAa,EAHJ;AAIT,kBAAgB,CAAC,EAJR;AAKT,iBAAe,EALN;AAMT,iBAAe,CAAC,GANP;AAOT,mBAAiB,GAPR;AAQT,kBAAgB;AARP,CAAb;AAUA,IAAMC,YAAY,IAAG,kBAAkBZ,KAAK,CAACa,OAA3B,CAAlB;;AACA,SAASC,SAAT,CAAmBC,UAAnB,EAA+BC,GAA/B,EAAoC;AAChC,MAAID,UAAU,KAAK,SAAnB,EAA8B;AAC1B,WAAO,WAAP;AACH;;AACDC,EAAAA,GAAG,IAAIvB,IAAI,CAACwB,QAAL,CAAcN,MAAM,CAACI,UAAD,CAAN,IAAsB,CAApC,CAAP;AACA,MAAIG,KAAK,GAAG,CAAEzB,IAAI,CAAC0B,QAAL,CAAcH,GAAd,IAAqB,GAAtB,GAA6B,GAA9B,IAAqC,GAAjD;;AACA,MAAIvB,IAAI,CAAC2B,QAAL,CAAcF,KAAd,EAAqB,MAAM,IAA3B,EAAiC,GAAjC,KAAyCzB,IAAI,CAAC2B,QAAL,CAAcF,KAAd,EAAqB,CAArB,EAAwB,IAAxB,CAA7C,EAA4E;AACxE,WAAO,WAAP;AACH,GAFD,MAGK,IAAIzB,IAAI,CAAC2B,QAAL,CAAcF,KAAd,EAAqB,KAAK,IAA1B,EAAgC,KAAK,IAArC,CAAJ,EAAgD;AACjD,WAAO,aAAP;AACH,GAFI,MAGA,IAAIzB,IAAI,CAAC2B,QAAL,CAAcF,KAAd,EAAqB,KAAK,IAA1B,EAAgC,KAAK,IAArC,CAAJ,EAAgD;AACjD,WAAO,WAAP;AACH,GAFI,MAGA,IAAIzB,IAAI,CAAC2B,QAAL,CAAcF,KAAd,EAAqB,MAAM,IAA3B,EAAiC,MAAM,IAAvC,CAAJ,EAAkD;AACnD,WAAO,aAAP;AACH,GAFI,MAGA,IAAIzB,IAAI,CAAC2B,QAAL,CAAcF,KAAd,EAAqB,MAAM,IAA3B,EAAiC,MAAM,IAAvC,CAAJ,EAAkD;AACnD,WAAO,WAAP;AACH,GAFI,MAGA,IAAIzB,IAAI,CAAC2B,QAAL,CAAcF,KAAd,EAAqB,MAAM,IAA3B,EAAiC,MAAM,IAAvC,CAAJ,EAAkD;AACnD,WAAO,aAAP;AACH,GAFI,MAGA,IAAIzB,IAAI,CAAC2B,QAAL,CAAcF,KAAd,EAAqB,MAAM,IAA3B,EAAiC,MAAM,IAAvC,CAAJ,EAAkD;AACnD,WAAO,WAAP;AACH,GAFI,MAGA,IAAIzB,IAAI,CAAC2B,QAAL,CAAcF,KAAd,EAAqB,MAAM,IAA3B,EAAiC,MAAM,IAAvC,CAAJ,EAAkD;AACnD,WAAO,aAAP;AACH,GAFI,MAGA;AACDzB,IAAAA,IAAI,CAAC4B,KAAL,CAAW,yDAAyDH,KAApE;AACA,WAAO,SAAP;AACH;AACJ;;AACD,IAAII,aAAa,GAAG,CAChB,UADgB,EAEhB,YAFgB,EAGhB,WAHgB,EAIhB,cAJgB,EAKhB,aALgB,EAMhB,aANgB,EAOhB,eAPgB,EAQhB,cARgB,CAApB;AAUA,IAAIC,gBAAgB,GAAG,SAAvB;;AACA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACtB,SAAO;AACHC,IAAAA,CAAC,EAAED,KAAK,CAACC,CAAN,GACED,KAAK,CAACE,KAAN,GAAc,CAAf,GAAoBC,IAAI,CAACC,GAAL,CAASJ,KAAK,CAACK,QAAf,CADrB,GAEEL,KAAK,CAACM,MAAN,GAAe,CAAhB,GAAqBH,IAAI,CAACI,GAAL,CAAS,CAACP,KAAK,CAACK,QAAhB,CAHtB;AAIHG,IAAAA,CAAC,EAAER,KAAK,CAACQ,CAAN,GACER,KAAK,CAACM,MAAN,GAAe,CAAhB,GAAqBH,IAAI,CAACC,GAAL,CAASJ,KAAK,CAACK,QAAf,CADtB,GAEEL,KAAK,CAACE,KAAN,GAAc,CAAf,GAAoBC,IAAI,CAACI,GAAL,CAASP,KAAK,CAACK,QAAf;AANrB,GAAP;AAQH;;AACD,SAASI,iBAAT,CAA2BT,KAA3B,EAAkCU,QAAlC,EAA4CC,KAA5C,EAAmD;AAC/C,MAAMV,CAAC,GAAGU,KAAK,CAACV,CAAN,GACN,CAACD,KAAK,CAACC,CAAN,GAAUU,KAAK,CAACV,CAAjB,IAAsBE,IAAI,CAACC,GAAL,CAASM,QAAT,CADhB,GAEN,CAACV,KAAK,CAACQ,CAAN,GAAUG,KAAK,CAACH,CAAjB,IAAsBL,IAAI,CAACI,GAAL,CAASG,QAAT,CAF1B;AAGA,MAAMF,CAAC,GAAGG,KAAK,CAACH,CAAN,GACN,CAACR,KAAK,CAACC,CAAN,GAAUU,KAAK,CAACV,CAAjB,IAAsBE,IAAI,CAACI,GAAL,CAASG,QAAT,CADhB,GAEN,CAACV,KAAK,CAACQ,CAAN,GAAUG,KAAK,CAACH,CAAjB,IAAsBL,IAAI,CAACC,GAAL,CAASM,QAAT,CAF1B;AAGA,SAAOE,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,KAAlB,CAAd,EAAwC;AAAEK,IAAAA,QAAQ,EAAEL,KAAK,CAACK,QAAN,GAAiBK,QAA7B;AAAuCT,IAAAA,CAAC,EAADA,CAAvC;AAC3CO,IAAAA,CAAC,EAADA;AAD2C,GAAxC,CAAP;AAEH;;AACD,SAASM,kBAAT,CAA4Bd,KAA5B,EAAmCe,QAAnC,EAA6C;AACzC,MAAMC,MAAM,GAAGjB,SAAS,CAACC,KAAD,CAAxB;AACA,SAAOS,iBAAiB,CAACT,KAAD,EAAQe,QAAR,EAAkBC,MAAlB,CAAxB;AACH;;AACD,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,cAAxB,EAAwCC,GAAxC,EAA6C;AACzC,MAAIC,OAAO,GAAGF,cAAd;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,QAAM7B,KAAK,GAAGlB,KAAK,CAACiD,QAAN,CAAeN,KAAK,CAACI,CAAD,CAApB,CAAd;AACA,QAAMG,OAAO,GAAGtB,IAAI,CAACuB,GAAL,CAASjC,KAAK,GAAG0B,cAAjB,KAAoChB,IAAI,CAACwB,EAAL,GAAU,CAA9C,CAAhB;AACA,QAAMC,GAAG,GAAGzB,IAAI,CAAC0B,GAAL,CAASJ,OAAT,EAAkBtB,IAAI,CAACwB,EAAL,GAAU,CAAV,GAAcF,OAAhC,CAAZ;;AACA,QAAIG,GAAG,GAAGR,GAAV,EAAe;AACXC,MAAAA,OAAO,GAAG5B,KAAV;AACH;AACJ;;AACD,SAAO4B,OAAP;AACH;;AACD,WAAaS,WAAb;AAAA;;AAAA;;AACI,uBAAYC,MAAZ,EAAoB;AAAA;;AAAA;;AAChB,8BAAMA,MAAN;AACA,UAAKC,aAAL,GAAqB,KAArB;;AACA,UAAKC,eAAL;;AACA,UAAKC,gBAAL,GAAwB,MAAKA,gBAAL,CAAsBC,IAAtB,+BAAxB;AACA,UAAKC,cAAL,GAAsB,MAAKA,cAAL,CAAoBD,IAApB,+BAAtB;AACA,UAAKE,MAAL,GAAc,MAAKA,MAAL,CAAYF,IAAZ,+BAAd;;AACA,UAAKG,EAAL,CAAQ1D,gBAAR,EAA0B,MAAKyD,MAA/B;;AACA,QAAI,MAAKE,OAAL,EAAJ,EAAoB;AAChB,YAAKF,MAAL;AACH;;AAVe;AAWnB;;AAZL;AAAA;AAAA,WAaI,kBAASG,IAAT,EAAe;AACX,WAAKC,OAAL,CAAaD,IAAb;AACA,aAAO,IAAP;AACH;AAhBL;AAAA;AAAA,WAiBI,iBAAQA,IAAR,EAAc;AACVxE,MAAAA,IAAI,CAAC0E,IAAL,CAAU,2HAAV;AACA,aAAO,KAAKC,QAAL,CAAc,CAACH,IAAD,CAAd,CAAP;AACH;AApBL;AAAA;AAAA,WAqBI,mBAAU;AACN,aAAO,KAAKI,MAAL,IAAe,KAAKA,MAAL,CAAY,CAAZ,CAAtB;AACH;AAvBL;AAAA;AAAA,WAwBI,8BAAqB;AACjB,aAAOjE,WAAW,GAAG,KAAKkE,GAA1B;AACH;AA1BL;AAAA;AAAA,WA2BI,oBAAqB;AAAA;;AAAA,UAAZC,KAAY,uEAAJ,EAAI;;AACjB,UAAI,KAAKF,MAAL,IAAe,KAAKA,MAAL,CAAYrB,MAA/B,EAAuC;AACnC,aAAKwB,MAAL;AACH;;AACD,WAAKH,MAAL,GAAcE,KAAd;;AACA,UAAIA,KAAK,CAACvB,MAAN,KAAiB,CAAjB,IAAsB,KAAKyB,qBAAL,EAA1B,EAAwD;AACpD,aAAK3C,QAAL,CAAcyC,KAAK,CAAC,CAAD,CAAL,CAASG,mBAAT,EAAd;AACH,OAFD,MAGK;AACD,aAAK5C,QAAL,CAAc,CAAd;AACH;;AACD,WAAKuC,MAAL,CAAYM,OAAZ,CAAoB,UAACV,IAAD,EAAU;AAC1B,YAAMW,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,cAAI,MAAI,CAACL,KAAL,GAAavB,MAAb,KAAwB,CAAxB,IAA6B,MAAI,CAACyB,qBAAL,EAAjC,EAA+D;AAC3D,YAAA,MAAI,CAAC3C,QAAL,CAAc,MAAI,CAACyC,KAAL,GAAa,CAAb,EAAgBG,mBAAhB,EAAd;AACH;;AACD,UAAA,MAAI,CAACG,oBAAL;;AACA,cAAI,CAAC,MAAI,CAACpB,aAAN,IAAuB,CAAC,MAAI,CAACqB,UAAL,EAA5B,EAA+C;AAC3C,YAAA,MAAI,CAAChB,MAAL;AACH;AACJ,SARD;;AASA,YAAMiB,gBAAgB,GAAGd,IAAI,CAACe,mBAAL,CACpB1E,GADoB,CAChB,UAAC2E,IAAD;AAAA,iBAAUA,IAAI,GAAG,SAAP,GAAmB,MAAI,CAACC,kBAAL,EAA7B;AAAA,SADgB,EAEpB1E,IAFoB,CAEf,GAFe,CAAzB;;AAGAyD,QAAAA,IAAI,CAACF,EAAL,CAAQgB,gBAAR,EAA0BH,QAA1B;AACAX,QAAAA,IAAI,CAACF,EAAL,CAAQrD,oBAAoB,CAACJ,GAArB,CAAyB,UAACC,CAAD;AAAA,iBAAOA,CAAC,cAAO,MAAI,CAAC2E,kBAAL,EAAP,CAAR;AAAA,SAAzB,EAAqE1E,IAArE,CAA0E,GAA1E,CAAR,EAAwFoE,QAAxF;AACAX,QAAAA,IAAI,CAACF,EAAL,mCAAmC,MAAI,CAACmB,kBAAL,EAAnC,GAAgEN,QAAhE;;AACA,QAAA,MAAI,CAACO,UAAL,CAAgBlB,IAAhB;AACH,OAjBD;;AAkBA,WAAKY,oBAAL;;AACA,UAAIO,eAAe,GAAG,CAAC,CAAC,KAAKC,OAAL,CAAa,WAAb,CAAxB;;AACA,UAAID,eAAJ,EAAqB;AACjB,aAAKtB,MAAL;AACH;;AACD,aAAO,IAAP;AACH;AA9DL;AAAA;AAAA,WA+DI,oBAAWG,IAAX,EAAiB;AAAA;;AACb,UAAIqB,OAAJ;AACArB,MAAAA,IAAI,CAACF,EAAL,qBAAqB,KAAKmB,kBAAL,EAArB,GAAkD,UAAC3E,CAAD,EAAO;AACrD+E,QAAAA,OAAO,GAAGrB,IAAI,CAACsB,mBAAL,EAAV;;AACA,YAAI,CAAC,MAAI,CAACT,UAAL,EAAD,IAAsBb,IAAI,KAAK,MAAI,CAACoB,OAAL,CAAa,OAAb,CAAnC,EAA0D;AACtD,UAAA,MAAI,CAACG,SAAL,CAAejF,CAAf,EAAkB,KAAlB;AACH;AACJ,OALD;AAMA0D,MAAAA,IAAI,CAACF,EAAL,oBAAoB,KAAKmB,kBAAL,EAApB,GAAiD,UAAC3E,CAAD,EAAO;AACpD,YAAI,CAAC+E,OAAL,EAAc;AACV;AACH;;AACD,YAAMnC,GAAG,GAAGc,IAAI,CAACsB,mBAAL,EAAZ;AACA,YAAME,EAAE,GAAGtC,GAAG,CAACzB,CAAJ,GAAQ4D,OAAO,CAAC5D,CAA3B;AACA,YAAMgE,EAAE,GAAGvC,GAAG,CAAClB,CAAJ,GAAQqD,OAAO,CAACrD,CAA3B;;AACA,QAAA,MAAI,CAACsC,KAAL,GAAaI,OAAb,CAAqB,UAACgB,SAAD,EAAe;AAChC,cAAIA,SAAS,KAAK1B,IAAlB,EAAwB;AACpB;AACH;;AACD,cAAI0B,SAAS,CAACb,UAAV,EAAJ,EAA4B;AACxB;AACH;;AACD,cAAMc,QAAQ,GAAGD,SAAS,CAACJ,mBAAV,EAAjB;AACAI,UAAAA,SAAS,CAACE,mBAAV,CAA8B;AAC1BnE,YAAAA,CAAC,EAAEkE,QAAQ,CAAClE,CAAT,GAAa+D,EADU;AAE1BxD,YAAAA,CAAC,EAAE2D,QAAQ,CAAC3D,CAAT,GAAayD;AAFU,WAA9B;AAIAC,UAAAA,SAAS,CAACH,SAAV,CAAoBjF,CAApB;AACH,SAbD;;AAcA+E,QAAAA,OAAO,GAAG,IAAV;AACH,OAtBD;AAuBH;AA9FL;AAAA;AAAA,WA+FI,oBAAW;AACP,aAAO,KAAKjB,MAAL,IAAe,EAAtB;AACH;AAjGL;AAAA;AAAA,WAkGI,2BAAkB;AACd,aAAO,KAAKyB,iBAAZ;AACH;AApGL;AAAA;AAAA,WAqGI,kBAAS;AAAA;;AACL,UAAI,KAAKzB,MAAT,EAAiB;AACb,aAAKA,MAAL,CAAYM,OAAZ,CAAoB,UAACV,IAAD,EAAU;AAC1BA,UAAAA,IAAI,CAAC8B,GAAL,CAAS,MAAM,MAAI,CAACb,kBAAL,EAAf;AACH,SAFD;AAGH;;AACD,WAAKb,MAAL,GAAc,EAAd;;AACA,WAAKQ,oBAAL;AACH;AA7GL;AAAA;AAAA,WA8GI,gCAAuB;AACnB,WAAKmB,WAAL,CAAiBvF,UAAjB;;AACA,WAAKuF,WAAL,CAAiB,WAAjB;;AACA,WAAKC,4BAAL,CAAkC,mBAAlC;AACH;AAlHL;AAAA;AAAA,WAmHI,wBAAe;AACX,aAAO,KAAKC,SAAL,CAAezF,UAAf,EAA2B,KAAK0F,aAAhC,CAAP;AACH;AArHL;AAAA;AAAA,WAsHI,wBAAelC,IAAf,EAAsD;AAAA,UAAjCmC,GAAiC,uEAA3B,KAAKtE,QAAL,EAA2B;AAAA,UAAVuE,QAAU;AAClD,UAAIC,IAAI,GAAGrC,IAAI,CAACsC,aAAL,CAAmB;AAC1BC,QAAAA,aAAa,EAAE,IADW;AAE1BC,QAAAA,UAAU,EAAE,IAFc;AAG1BC,QAAAA,UAAU,EAAE,KAAKC,YAAL;AAHc,OAAnB,CAAX;AAKA,UAAIC,QAAQ,GAAG3C,IAAI,CAAC4C,gBAAL,CAAsBR,QAAtB,CAAf;AACA,UAAIS,MAAM,GAAG7C,IAAI,CAACsB,mBAAL,CAAyBc,QAAzB,CAAb;AACA,UAAIZ,EAAE,GAAGa,IAAI,CAAC5E,CAAL,GAASkF,QAAQ,CAAClF,CAAlB,GAAsBuC,IAAI,CAAC8C,OAAL,KAAiBH,QAAQ,CAAClF,CAAzD;AACA,UAAIgE,EAAE,GAAGY,IAAI,CAACrE,CAAL,GAAS2E,QAAQ,CAAC3E,CAAlB,GAAsBgC,IAAI,CAAC+C,OAAL,KAAiBJ,QAAQ,CAAC3E,CAAzD;AACA,UAAMH,QAAQ,GAAG,CAAC9B,KAAK,CAACiD,QAAN,CAAegB,IAAI,CAACS,mBAAL,EAAf,IAA6C9C,IAAI,CAACwB,EAAL,GAAU,CAAxD,KACZxB,IAAI,CAACwB,EAAL,GAAU,CADE,CAAjB;AAEA,UAAM6D,GAAG,GAAG;AACRvF,QAAAA,CAAC,EAAEoF,MAAM,CAACpF,CAAP,GAAW+D,EAAE,GAAG7D,IAAI,CAACC,GAAL,CAASC,QAAT,CAAhB,GAAqC4D,EAAE,GAAG9D,IAAI,CAACI,GAAL,CAAS,CAACF,QAAV,CADrC;AAERG,QAAAA,CAAC,EAAE6E,MAAM,CAAC7E,CAAP,GAAWyD,EAAE,GAAG9D,IAAI,CAACC,GAAL,CAASC,QAAT,CAAhB,GAAqC2D,EAAE,GAAG7D,IAAI,CAACI,GAAL,CAASF,QAAT,CAFrC;AAGRH,QAAAA,KAAK,EAAE2E,IAAI,CAAC3E,KAAL,GAAaiF,QAAQ,CAAClF,CAHrB;AAIRK,QAAAA,MAAM,EAAEuE,IAAI,CAACvE,MAAL,GAAc6E,QAAQ,CAAC3E,CAJvB;AAKRH,QAAAA,QAAQ,EAAEA;AALF,OAAZ;AAOA,aAAOI,iBAAiB,CAAC+E,GAAD,EAAM,CAACjH,KAAK,CAACiD,QAAN,CAAemD,GAAf,CAAP,EAA4B;AAChD1E,QAAAA,CAAC,EAAE,CAD6C;AAEhDO,QAAAA,CAAC,EAAE;AAF6C,OAA5B,CAAxB;AAIH;AA7IL;AAAA;AAAA,WA8II,yBAAgB;AAAA;;AACZ,UAAIgC,IAAI,GAAG,KAAKD,OAAL,EAAX;;AACA,UAAI,CAACC,IAAL,EAAW;AACP,eAAO;AACHvC,UAAAA,CAAC,EAAE,CAACH,gBADD;AAEHU,UAAAA,CAAC,EAAE,CAACV,gBAFD;AAGHI,UAAAA,KAAK,EAAE,CAHJ;AAIHI,UAAAA,MAAM,EAAE,CAJL;AAKHD,UAAAA,QAAQ,EAAE;AALP,SAAP;AAOH;;AACD,UAAMoF,WAAW,GAAG,EAApB;AACA,WAAK3C,KAAL,GAAajE,GAAb,CAAiB,UAAC2D,IAAD,EAAU;AACvB,YAAMgD,GAAG,GAAGhD,IAAI,CAACsC,aAAL,CAAmB;AAC3BC,UAAAA,aAAa,EAAE,IADY;AAE3BC,UAAAA,UAAU,EAAE,IAFe;AAG3BC,UAAAA,UAAU,EAAE,MAAI,CAACC,YAAL;AAHe,SAAnB,CAAZ;AAKA,YAAIQ,MAAM,GAAG,CACT;AAAEzF,UAAAA,CAAC,EAAEuF,GAAG,CAACvF,CAAT;AAAYO,UAAAA,CAAC,EAAEgF,GAAG,CAAChF;AAAnB,SADS,EAET;AAAEP,UAAAA,CAAC,EAAEuF,GAAG,CAACvF,CAAJ,GAAQuF,GAAG,CAACtF,KAAjB;AAAwBM,UAAAA,CAAC,EAAEgF,GAAG,CAAChF;AAA/B,SAFS,EAGT;AAAEP,UAAAA,CAAC,EAAEuF,GAAG,CAACvF,CAAJ,GAAQuF,GAAG,CAACtF,KAAjB;AAAwBM,UAAAA,CAAC,EAAEgF,GAAG,CAAChF,CAAJ,GAAQgF,GAAG,CAAClF;AAAvC,SAHS,EAIT;AAAEL,UAAAA,CAAC,EAAEuF,GAAG,CAACvF,CAAT;AAAYO,UAAAA,CAAC,EAAEgF,GAAG,CAAChF,CAAJ,GAAQgF,GAAG,CAAClF;AAA3B,SAJS,CAAb;AAMA,YAAIqF,KAAK,GAAGnD,IAAI,CAACoD,oBAAL,EAAZ;AACAF,QAAAA,MAAM,CAACxC,OAAP,CAAe,UAAUvC,KAAV,EAAiB;AAC5B,cAAIkF,WAAW,GAAGF,KAAK,CAAChF,KAAN,CAAYA,KAAZ,CAAlB;AACA8E,UAAAA,WAAW,CAACK,IAAZ,CAAiBD,WAAjB;AACH,SAHD;AAIH,OAjBD;AAkBA,UAAME,EAAE,GAAG,IAAI9H,SAAJ,EAAX;AACA8H,MAAAA,EAAE,CAACC,MAAH,CAAU,CAACzH,KAAK,CAACiD,QAAN,CAAe,KAAKnB,QAAL,EAAf,CAAX;AACA,UAAI4F,IAAJ,EAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,IAAtB;AACAX,MAAAA,WAAW,CAACvC,OAAZ,CAAoB,UAAUvC,KAAV,EAAiB;AACjC,YAAIkF,WAAW,GAAGE,EAAE,CAACpF,KAAH,CAASA,KAAT,CAAlB;;AACA,YAAIsF,IAAI,KAAKI,SAAb,EAAwB;AACpBJ,UAAAA,IAAI,GAAGE,IAAI,GAAGN,WAAW,CAAC5F,CAA1B;AACAiG,UAAAA,IAAI,GAAGE,IAAI,GAAGP,WAAW,CAACrF,CAA1B;AACH;;AACDyF,QAAAA,IAAI,GAAG9F,IAAI,CAAC0B,GAAL,CAASoE,IAAT,EAAeJ,WAAW,CAAC5F,CAA3B,CAAP;AACAiG,QAAAA,IAAI,GAAG/F,IAAI,CAAC0B,GAAL,CAASqE,IAAT,EAAeL,WAAW,CAACrF,CAA3B,CAAP;AACA2F,QAAAA,IAAI,GAAGhG,IAAI,CAACmG,GAAL,CAASH,IAAT,EAAeN,WAAW,CAAC5F,CAA3B,CAAP;AACAmG,QAAAA,IAAI,GAAGjG,IAAI,CAACmG,GAAL,CAASF,IAAT,EAAeP,WAAW,CAACrF,CAA3B,CAAP;AACH,OAVD;AAWAuF,MAAAA,EAAE,CAACQ,MAAH;AACA,UAAMC,CAAC,GAAGT,EAAE,CAACpF,KAAH,CAAS;AAAEV,QAAAA,CAAC,EAAEgG,IAAL;AAAWzF,QAAAA,CAAC,EAAE0F;AAAd,OAAT,CAAV;AACA,aAAO;AACHjG,QAAAA,CAAC,EAAEuG,CAAC,CAACvG,CADF;AAEHO,QAAAA,CAAC,EAAEgG,CAAC,CAAChG,CAFF;AAGHN,QAAAA,KAAK,EAAEiG,IAAI,GAAGF,IAHX;AAIH3F,QAAAA,MAAM,EAAE8F,IAAI,GAAGF,IAJZ;AAKH7F,QAAAA,QAAQ,EAAE9B,KAAK,CAACiD,QAAN,CAAe,KAAKnB,QAAL,EAAf;AALP,OAAP;AAOH;AAnML;AAAA;AAAA,WAoMI,gBAAO;AACH,aAAO,KAAKoG,YAAL,GAAoBxG,CAA3B;AACH;AAtML;AAAA;AAAA,WAuMI,gBAAO;AACH,aAAO,KAAKwG,YAAL,GAAoBjG,CAA3B;AACH;AAzML;AAAA;AAAA,WA0MI,oBAAW;AACP,aAAO,KAAKiG,YAAL,GAAoBvG,KAA3B;AACH;AA5ML;AAAA;AAAA,WA6MI,qBAAY;AACR,aAAO,KAAKuG,YAAL,GAAoBnG,MAA3B;AACH;AA/ML;AAAA;AAAA,WAgNI,2BAAkB;AACd,WAAKoG,WAAL;;AACA7G,MAAAA,aAAa,CAACqD,OAAd,CAAsB,UAAUyD,IAAV,EAAgB;AAClC,aAAKC,aAAL,CAAmBD,IAAnB;AACH,OAFqB,CAEpBxE,IAFoB,CAEf,IAFe,CAAtB;;AAGA,WAAKyE,aAAL,CAAmB,SAAnB;AACH;AAtNL;AAAA;AAAA,WAuNI,uBAAcD,IAAd,EAAoB;AAAA;;AAChB,UAAIE,MAAM,GAAG,IAAIxI,IAAJ,CAAS;AAClByI,QAAAA,MAAM,EAAE,kBADU;AAElBC,QAAAA,IAAI,EAAE,OAFY;AAGlBC,QAAAA,WAAW,EAAE,CAHK;AAIlBL,QAAAA,IAAI,EAAEA,IAAI,GAAG,UAJK;AAKlBM,QAAAA,YAAY,EAAE,CALI;AAMlBC,QAAAA,SAAS,EAAE,IANO;AAOlBC,QAAAA,cAAc,EAAEhI,YAAY,GAAG,EAAH,GAAQ;AAPlB,OAAT,CAAb;AASA,UAAIiI,IAAI,GAAG,IAAX;AACAP,MAAAA,MAAM,CAACvE,EAAP,CAAU,sBAAV,EAAkC,UAAUxD,CAAV,EAAa;AAC3CsI,QAAAA,IAAI,CAACC,gBAAL,CAAsBvI,CAAtB;AACH,OAFD;AAGA+H,MAAAA,MAAM,CAACvE,EAAP,CAAU,WAAV,EAAuB,UAACxD,CAAD,EAAO;AAC1B+H,QAAAA,MAAM,CAACS,QAAP;AACAxI,QAAAA,CAAC,CAACyI,YAAF,GAAiB,IAAjB;AACH,OAHD;AAIAV,MAAAA,MAAM,CAACvE,EAAP,CAAU,SAAV,EAAqB,UAACxD,CAAD,EAAO;AACxBA,QAAAA,CAAC,CAACyI,YAAF,GAAiB,IAAjB;AACH,OAFD;AAGAV,MAAAA,MAAM,CAACvE,EAAP,CAAU,YAAV,EAAwB,YAAM;AAC1B,YAAI/C,GAAG,GAAGhB,KAAK,CAACiD,QAAN,CAAe,MAAI,CAACnB,QAAL,EAAf,CAAV;AACA,YAAImH,MAAM,GAAGnI,SAAS,CAACsH,IAAD,EAAOpH,GAAP,CAAtB;AACAsH,QAAAA,MAAM,CAACY,QAAP,GAAkBC,OAAlB,KACKb,MAAM,CAACY,QAAP,GAAkBC,OAAlB,CAA0BC,KAA1B,CAAgCH,MAAhC,GAAyCA,MAD9C;AAEA,QAAA,MAAI,CAACI,aAAL,GAAqB,IAArB;AACH,OAND;AAOAf,MAAAA,MAAM,CAACvE,EAAP,CAAU,UAAV,EAAsB,YAAM;AACxBuE,QAAAA,MAAM,CAACY,QAAP,GAAkBC,OAAlB,KACKb,MAAM,CAACY,QAAP,GAAkBC,OAAlB,CAA0BC,KAA1B,CAAgCH,MAAhC,GAAyC,EAD9C;AAEA,QAAA,MAAI,CAACI,aAAL,GAAqB,KAArB;AACH,OAJD;AAKA,WAAKC,GAAL,CAAShB,MAAT;AACH;AAzPL;AAAA;AAAA,WA0PI,uBAAc;AAAA;;AACV,UAAIiB,IAAI,GAAG,IAAI1J,KAAJ,CAAU;AACjBuI,QAAAA,IAAI,EAAE,MADW;AAEjBzG,QAAAA,KAAK,EAAE,CAFU;AAGjBI,QAAAA,MAAM,EAAE,CAHS;AAIjB4G,QAAAA,SAAS,EAAE,IAJM;AAKjBa,QAAAA,SALiB,qBAKPC,GALO,EAKF;AACX,cAAIjC,EAAE,GAAG,KAAKkC,SAAL,EAAT;AACA,cAAIC,OAAO,GAAGnC,EAAE,CAACmC,OAAH,EAAd;AACAF,UAAAA,GAAG,CAACG,SAAJ;AACAH,UAAAA,GAAG,CAACnD,IAAJ,CAAS,CAACqD,OAAV,EAAmB,CAACA,OAApB,EAA6B,KAAKhI,KAAL,KAAegI,OAAO,GAAG,CAAtD,EAAyD,KAAK5H,MAAL,KAAgB4H,OAAO,GAAG,CAAnF;AACAF,UAAAA,GAAG,CAACI,MAAJ,CAAW,KAAKlI,KAAL,KAAe,CAA1B,EAA6B,CAACgI,OAA9B;;AACA,cAAInC,EAAE,CAACsC,aAAH,EAAJ,EAAwB;AACpBL,YAAAA,GAAG,CAACM,MAAJ,CAAW,KAAKpI,KAAL,KAAe,CAA1B,EAA6B,CAAC6F,EAAE,CAACwC,kBAAH,EAAD,GAA2BvK,IAAI,CAACwK,KAAL,CAAW,KAAKlI,MAAL,EAAX,CAA3B,GAAuD4H,OAApF;AACH;;AACDF,UAAAA,GAAG,CAACS,eAAJ,CAAoB,IAApB;AACH,SAfgB;AAgBjBC,QAAAA,OAAO,EAAE,iBAACV,GAAD,EAAMhI,KAAN,EAAgB;AACrB,cAAI,CAAC,MAAI,CAAC2I,uBAAL,EAAL,EAAqC;AACjC;AACH;;AACD,cAAIT,OAAO,GAAG,MAAI,CAACA,OAAL,EAAd;;AACAF,UAAAA,GAAG,CAACG,SAAJ;AACAH,UAAAA,GAAG,CAACnD,IAAJ,CAAS,CAACqD,OAAV,EAAmB,CAACA,OAApB,EAA6BlI,KAAK,CAACE,KAAN,KAAgBgI,OAAO,GAAG,CAAvD,EAA0DlI,KAAK,CAACM,MAAN,KAAiB4H,OAAO,GAAG,CAArF;AACAF,UAAAA,GAAG,CAACS,eAAJ,CAAoBzI,KAApB;AACH;AAxBgB,OAAV,CAAX;AA0BA,WAAK6H,GAAL,CAASC,IAAT;;AACA,WAAKpE,UAAL,CAAgBoE,IAAhB;;AACAA,MAAAA,IAAI,CAACxF,EAAL,CAAQ,WAAR,EAAqB,UAACxD,CAAD,EAAO;AACxBA,QAAAA,CAAC,CAACyI,YAAF,GAAiB,IAAjB;AACH,OAFD;AAGAO,MAAAA,IAAI,CAACxF,EAAL,CAAQ,UAAR,EAAoB,UAACxD,CAAD,EAAO;AACvBA,QAAAA,CAAC,CAACyI,YAAF,GAAiB,IAAjB;AACH,OAFD;AAGAO,MAAAA,IAAI,CAACxF,EAAL,CAAQ,SAAR,EAAmB,UAACxD,CAAD,EAAO;AACtBA,QAAAA,CAAC,CAACyI,YAAF,GAAiB,IAAjB;AACH,OAFD;AAGA,WAAKjF,EAAL,CAAQ,UAAR,EAAoB,UAACxD,CAAD,EAAO;AACvB,QAAA,MAAI,CAACuD,MAAL;AACH,OAFD;AAGH;AAnSL;AAAA;AAAA,WAoSI,0BAAiBvD,CAAjB,EAAoB;AAChB,WAAKuF,iBAAL,GAAyBvF,CAAC,CAAC8J,MAAF,CAASjC,IAAT,GAAgBkC,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAzB;;AACA,UAAIC,KAAK,GAAG,KAAKrC,YAAL,EAAZ;;AACA,UAAIvG,KAAK,GAAG4I,KAAK,CAAC5I,KAAlB;AACA,UAAII,MAAM,GAAGwI,KAAK,CAACxI,MAAnB;AACA,UAAIyI,UAAU,GAAG5I,IAAI,CAAC6I,IAAL,CAAU7I,IAAI,CAAC8I,GAAL,CAAS/I,KAAT,EAAgB,CAAhB,IAAqBC,IAAI,CAAC8I,GAAL,CAAS3I,MAAT,EAAiB,CAAjB,CAA/B,CAAjB;AACA,WAAKC,GAAL,GAAWJ,IAAI,CAACuB,GAAL,CAASpB,MAAM,GAAGyI,UAAlB,CAAX;AACA,WAAK3I,GAAL,GAAWD,IAAI,CAACuB,GAAL,CAASxB,KAAK,GAAG6I,UAAjB,CAAX;;AACA,UAAI,OAAOG,MAAP,KAAkB,WAAtB,EAAmC;AAC/BA,QAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqC,KAAKjH,gBAA1C;AACAgH,QAAAA,MAAM,CAACC,gBAAP,CAAwB,WAAxB,EAAqC,KAAKjH,gBAA1C;AACAgH,QAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,KAAK/G,cAAxC,EAAwD,IAAxD;AACA8G,QAAAA,MAAM,CAACC,gBAAP,CAAwB,UAAxB,EAAoC,KAAK/G,cAAzC,EAAyD,IAAzD;AACH;;AACD,WAAKJ,aAAL,GAAqB,IAArB;AACA,UAAIoH,EAAE,GAAGtK,CAAC,CAAC8J,MAAF,CAAS9E,mBAAT,EAAT;AACA,UAAIuF,GAAG,GAAGvK,CAAC,CAAC8J,MAAF,CAASnB,QAAT,GAAoB6B,kBAApB,EAAV;AACA,WAAKC,iBAAL,GAAyB;AACrBtJ,QAAAA,CAAC,EAAEoJ,GAAG,CAACpJ,CAAJ,GAAQmJ,EAAE,CAACnJ,CADO;AAErBO,QAAAA,CAAC,EAAE6I,GAAG,CAAC7I,CAAJ,GAAQ4I,EAAE,CAAC5I;AAFO,OAAzB;;AAIA,WAAKgJ,KAAL,CAAW,gBAAX,EAA6B;AAAEC,QAAAA,GAAG,EAAE3K,CAAP;AAAU8J,QAAAA,MAAM,EAAE,KAAKrG,OAAL;AAAlB,OAA7B;;AACA,WAAKK,MAAL,CAAYM,OAAZ,CAAoB,UAAC0F,MAAD,EAAY;AAC5BA,QAAAA,MAAM,CAACY,KAAP,CAAa,gBAAb,EAA+B;AAAEC,UAAAA,GAAG,EAAE3K,CAAP;AAAU8J,UAAAA,MAAM,EAANA;AAAV,SAA/B;AACH,OAFD;AAGH;AA7TL;AAAA;AAAA,WA8TI,0BAAiB9J,CAAjB,EAAoB;AAChB,UAAImB,CAAJ,EAAOO,CAAP,EAAUkJ,aAAV;AACA,UAAIC,UAAU,GAAG,KAAK/F,OAAL,CAAa,MAAM,KAAKS,iBAAxB,CAAjB;AACA,UAAIuF,KAAK,GAAGD,UAAU,CAAClC,QAAX,EAAZ;AACAmC,MAAAA,KAAK,CAACC,oBAAN,CAA2B/K,CAA3B;AACA,UAAMgL,EAAE,GAAGF,KAAK,CAACN,kBAAN,EAAX;AACA,UAAIS,UAAU,GAAG;AACb9J,QAAAA,CAAC,EAAE6J,EAAE,CAAC7J,CAAH,GAAO,KAAKsJ,iBAAL,CAAuBtJ,CADpB;AAEbO,QAAAA,CAAC,EAAEsJ,EAAE,CAACtJ,CAAH,GAAO,KAAK+I,iBAAL,CAAuB/I;AAFpB,OAAjB;AAIA,UAAMwJ,MAAM,GAAGL,UAAU,CAAC7F,mBAAX,EAAf;;AACA,UAAI,KAAKmG,mBAAL,EAAJ,EAAgC;AAC5BF,QAAAA,UAAU,GAAG,KAAKE,mBAAL,GAA2BD,MAA3B,EAAmCD,UAAnC,EAA+CjL,CAA/C,CAAb;AACH;;AACD6K,MAAAA,UAAU,CAACvF,mBAAX,CAA+B2F,UAA/B;AACA,UAAMG,MAAM,GAAGP,UAAU,CAAC7F,mBAAX,EAAf;;AACA,UAAIkG,MAAM,CAAC/J,CAAP,KAAaiK,MAAM,CAACjK,CAApB,IAAyB+J,MAAM,CAACxJ,CAAP,KAAa0J,MAAM,CAAC1J,CAAjD,EAAoD;AAChD;AACH;;AACD,UAAI,KAAK6D,iBAAL,KAA2B,SAA/B,EAA0C;AACtC,YAAIyE,KAAK,GAAG,KAAKrC,YAAL,EAAZ;;AACAxG,QAAAA,CAAC,GAAG0J,UAAU,CAAC1J,CAAX,KAAiB6I,KAAK,CAAC5I,KAAN,GAAc,CAAnC;AACAM,QAAAA,CAAC,GAAG,CAACmJ,UAAU,CAACnJ,CAAX,EAAD,GAAkBsI,KAAK,CAACxI,MAAN,GAAe,CAArC;AACA,YAAI6J,KAAK,GAAGhK,IAAI,CAACiK,KAAL,CAAW,CAAC5J,CAAZ,EAAeP,CAAf,IAAoBE,IAAI,CAACwB,EAAL,GAAU,CAA1C;;AACA,YAAImH,KAAK,CAACxI,MAAN,GAAe,CAAnB,EAAsB;AAClB6J,UAAAA,KAAK,IAAIhK,IAAI,CAACwB,EAAd;AACH;;AACD,YAAI0I,WAAW,GAAG9L,KAAK,CAACiD,QAAN,CAAe,KAAKnB,QAAL,EAAf,CAAlB;AACA,YAAMiK,WAAW,GAAGD,WAAW,GAAGF,KAAlC;AACA,YAAM/I,GAAG,GAAG7C,KAAK,CAACiD,QAAN,CAAe,KAAK+I,qBAAL,EAAf,CAAZ;AACA,YAAMC,UAAU,GAAGvJ,OAAO,CAAC,KAAKwJ,aAAL,EAAD,EAAuBH,WAAvB,EAAoClJ,GAApC,CAA1B;AACA,YAAMsJ,IAAI,GAAGF,UAAU,GAAG1B,KAAK,CAACzI,QAAhC;AACA,YAAML,KAAK,GAAGc,kBAAkB,CAACgI,KAAD,EAAQ4B,IAAR,CAAhC;;AACA,aAAKC,aAAL,CAAmB3K,KAAnB,EAA0BlB,CAA1B;;AACA;AACH;;AACD,UAAI8L,cAAc,GAAG,KAAKC,SAAL,MAAoB/L,CAAC,CAACgM,QAA3C;AACA,UAAIC,eAAe,GAAG,KAAKA,eAAL,MAA0BjM,CAAC,CAACkM,MAAlD;;AACA,UAAI,KAAK3G,iBAAL,KAA2B,UAA/B,EAA2C;AACvC,YAAIuG,cAAJ,EAAoB;AAChB,cAAIK,YAAY,GAAGF,eAAe,GAC5B;AACE9K,YAAAA,CAAC,EAAE,KAAKC,KAAL,KAAe,CADpB;AAEEM,YAAAA,CAAC,EAAE,KAAKF,MAAL,KAAgB;AAFrB,WAD4B,GAK5B;AACEL,YAAAA,CAAC,EAAE,KAAK2D,OAAL,CAAa,eAAb,EAA8B3D,CAA9B,EADL;AAEEO,YAAAA,CAAC,EAAE,KAAKoD,OAAL,CAAa,eAAb,EAA8BpD,CAA9B;AAFL,WALN;AASAkJ,UAAAA,aAAa,GAAGvJ,IAAI,CAAC6I,IAAL,CAAU7I,IAAI,CAAC8I,GAAL,CAASgC,YAAY,CAAChL,CAAb,GAAiB0J,UAAU,CAAC1J,CAAX,EAA1B,EAA0C,CAA1C,IACtBE,IAAI,CAAC8I,GAAL,CAASgC,YAAY,CAACzK,CAAb,GAAiBmJ,UAAU,CAACnJ,CAAX,EAA1B,EAA0C,CAA1C,CADY,CAAhB;AAEA,cAAI0K,QAAQ,GAAG,KAAKtH,OAAL,CAAa,WAAb,EAA0B3D,CAA1B,KAAgCgL,YAAY,CAAChL,CAA7C,GAAiD,CAAC,CAAlD,GAAsD,CAArE;AACA,cAAIkL,QAAQ,GAAG,KAAKvH,OAAL,CAAa,WAAb,EAA0BpD,CAA1B,KAAgCyK,YAAY,CAACzK,CAA7C,GAAiD,CAAC,CAAlD,GAAsD,CAArE;AACAP,UAAAA,CAAC,GAAGyJ,aAAa,GAAG,KAAKtJ,GAArB,GAA2B8K,QAA/B;AACA1K,UAAAA,CAAC,GAAGkJ,aAAa,GAAG,KAAKnJ,GAArB,GAA2B4K,QAA/B;AACA,eAAKvH,OAAL,CAAa,WAAb,EAA0B3D,CAA1B,CAA4BgL,YAAY,CAAChL,CAAb,GAAiBA,CAA7C;AACA,eAAK2D,OAAL,CAAa,WAAb,EAA0BpD,CAA1B,CAA4ByK,YAAY,CAACzK,CAAb,GAAiBA,CAA7C;AACH;AACJ,OApBD,MAqBK,IAAI,KAAK6D,iBAAL,KAA2B,YAA/B,EAA6C;AAC9C,aAAKT,OAAL,CAAa,WAAb,EAA0BpD,CAA1B,CAA4BmJ,UAAU,CAACnJ,CAAX,EAA5B;AACH,OAFI,MAGA,IAAI,KAAK6D,iBAAL,KAA2B,WAA/B,EAA4C;AAC7C,YAAIuG,cAAJ,EAAoB;AAChB,cAAIK,YAAY,GAAGF,eAAe,GAC5B;AACE9K,YAAAA,CAAC,EAAE,KAAKC,KAAL,KAAe,CADpB;AAEEM,YAAAA,CAAC,EAAE,KAAKF,MAAL,KAAgB;AAFrB,WAD4B,GAK5B;AACEL,YAAAA,CAAC,EAAE,KAAK2D,OAAL,CAAa,cAAb,EAA6B3D,CAA7B,EADL;AAEEO,YAAAA,CAAC,EAAE,KAAKoD,OAAL,CAAa,cAAb,EAA6BpD,CAA7B;AAFL,WALN;AASAkJ,UAAAA,aAAa,GAAGvJ,IAAI,CAAC6I,IAAL,CAAU7I,IAAI,CAAC8I,GAAL,CAASU,UAAU,CAAC1J,CAAX,KAAiBgL,YAAY,CAAChL,CAAvC,EAA0C,CAA1C,IACtBE,IAAI,CAAC8I,GAAL,CAASgC,YAAY,CAACzK,CAAb,GAAiBmJ,UAAU,CAACnJ,CAAX,EAA1B,EAA0C,CAA1C,CADY,CAAhB;AAEA,cAAI0K,QAAQ,GAAG,KAAKtH,OAAL,CAAa,YAAb,EAA2B3D,CAA3B,KAAiCgL,YAAY,CAAChL,CAA9C,GAAkD,CAAC,CAAnD,GAAuD,CAAtE;AACA,cAAIkL,QAAQ,GAAG,KAAKvH,OAAL,CAAa,YAAb,EAA2BpD,CAA3B,KAAiCyK,YAAY,CAACzK,CAA9C,GAAkD,CAAC,CAAnD,GAAuD,CAAtE;AACAP,UAAAA,CAAC,GAAGyJ,aAAa,GAAG,KAAKtJ,GAArB,GAA2B8K,QAA/B;AACA1K,UAAAA,CAAC,GAAGkJ,aAAa,GAAG,KAAKnJ,GAArB,GAA2B4K,QAA/B;AACA,eAAKvH,OAAL,CAAa,YAAb,EAA2B3D,CAA3B,CAA6BgL,YAAY,CAAChL,CAAb,GAAiBA,CAA9C;AACA,eAAK2D,OAAL,CAAa,YAAb,EAA2BpD,CAA3B,CAA6ByK,YAAY,CAACzK,CAAb,GAAiBA,CAA9C;AACH;;AACD,YAAI6I,GAAG,GAAGM,UAAU,CAACyB,QAAX,EAAV;AACA,aAAKxH,OAAL,CAAa,WAAb,EAA0BpD,CAA1B,CAA4B6I,GAAG,CAAC7I,CAAhC;AACA,aAAKoD,OAAL,CAAa,eAAb,EAA8B3D,CAA9B,CAAgCoJ,GAAG,CAACpJ,CAApC;AACH,OAvBI,MAwBA,IAAI,KAAKoE,iBAAL,KAA2B,aAA/B,EAA8C;AAC/C,aAAKT,OAAL,CAAa,WAAb,EAA0B3D,CAA1B,CAA4B0J,UAAU,CAAC1J,CAAX,EAA5B;AACH,OAFI,MAGA,IAAI,KAAKoE,iBAAL,KAA2B,cAA/B,EAA+C;AAChD,aAAKT,OAAL,CAAa,eAAb,EAA8B3D,CAA9B,CAAgC0J,UAAU,CAAC1J,CAAX,EAAhC;AACH,OAFI,MAGA,IAAI,KAAKoE,iBAAL,KAA2B,aAA/B,EAA8C;AAC/C,YAAIuG,cAAJ,EAAoB;AAChB,cAAIK,YAAY,GAAGF,eAAe,GAC5B;AACE9K,YAAAA,CAAC,EAAE,KAAKC,KAAL,KAAe,CADpB;AAEEM,YAAAA,CAAC,EAAE,KAAKF,MAAL,KAAgB;AAFrB,WAD4B,GAK5B;AACEL,YAAAA,CAAC,EAAE,KAAK2D,OAAL,CAAa,YAAb,EAA2B3D,CAA3B,EADL;AAEEO,YAAAA,CAAC,EAAE,KAAKoD,OAAL,CAAa,YAAb,EAA2BpD,CAA3B;AAFL,WALN;AASAkJ,UAAAA,aAAa,GAAGvJ,IAAI,CAAC6I,IAAL,CAAU7I,IAAI,CAAC8I,GAAL,CAASgC,YAAY,CAAChL,CAAb,GAAiB0J,UAAU,CAAC1J,CAAX,EAA1B,EAA0C,CAA1C,IACtBE,IAAI,CAAC8I,GAAL,CAASU,UAAU,CAACnJ,CAAX,KAAiByK,YAAY,CAACzK,CAAvC,EAA0C,CAA1C,CADY,CAAhB;AAEA,cAAI0K,QAAQ,GAAGD,YAAY,CAAChL,CAAb,GAAiB0J,UAAU,CAAC1J,CAAX,EAAjB,GAAkC,CAAC,CAAnC,GAAuC,CAAtD;AACA,cAAIkL,QAAQ,GAAGxB,UAAU,CAACnJ,CAAX,KAAiByK,YAAY,CAACzK,CAA9B,GAAkC,CAAC,CAAnC,GAAuC,CAAtD;AACAP,UAAAA,CAAC,GAAGyJ,aAAa,GAAG,KAAKtJ,GAArB,GAA2B8K,QAA/B;AACA1K,UAAAA,CAAC,GAAGkJ,aAAa,GAAG,KAAKnJ,GAArB,GAA2B4K,QAA/B;AACAxB,UAAAA,UAAU,CAAC1J,CAAX,CAAagL,YAAY,CAAChL,CAAb,GAAiBA,CAA9B;AACA0J,UAAAA,UAAU,CAACnJ,CAAX,CAAayK,YAAY,CAACzK,CAAb,GAAiBA,CAA9B;AACH;;AACD6I,QAAAA,GAAG,GAAGM,UAAU,CAACyB,QAAX,EAAN;AACA,aAAKxH,OAAL,CAAa,WAAb,EAA0B3D,CAA1B,CAA4BoJ,GAAG,CAACpJ,CAAhC;AACA,aAAK2D,OAAL,CAAa,eAAb,EAA8BpD,CAA9B,CAAgC6I,GAAG,CAAC7I,CAApC;AACH,OAvBI,MAwBA,IAAI,KAAK6D,iBAAL,KAA2B,eAA/B,EAAgD;AACjD,aAAKT,OAAL,CAAa,eAAb,EAA8BpD,CAA9B,CAAgCmJ,UAAU,CAACnJ,CAAX,EAAhC;AACH,OAFI,MAGA,IAAI,KAAK6D,iBAAL,KAA2B,cAA/B,EAA+C;AAChD,YAAIuG,cAAJ,EAAoB;AAChB,cAAIK,YAAY,GAAGF,eAAe,GAC5B;AACE9K,YAAAA,CAAC,EAAE,KAAKC,KAAL,KAAe,CADpB;AAEEM,YAAAA,CAAC,EAAE,KAAKF,MAAL,KAAgB;AAFrB,WAD4B,GAK5B;AACEL,YAAAA,CAAC,EAAE,KAAK2D,OAAL,CAAa,WAAb,EAA0B3D,CAA1B,EADL;AAEEO,YAAAA,CAAC,EAAE,KAAKoD,OAAL,CAAa,WAAb,EAA0BpD,CAA1B;AAFL,WALN;AASAkJ,UAAAA,aAAa,GAAGvJ,IAAI,CAAC6I,IAAL,CAAU7I,IAAI,CAAC8I,GAAL,CAASU,UAAU,CAAC1J,CAAX,KAAiBgL,YAAY,CAAChL,CAAvC,EAA0C,CAA1C,IACtBE,IAAI,CAAC8I,GAAL,CAASU,UAAU,CAACnJ,CAAX,KAAiByK,YAAY,CAACzK,CAAvC,EAA0C,CAA1C,CADY,CAAhB;AAEA,cAAI0K,QAAQ,GAAG,KAAKtH,OAAL,CAAa,eAAb,EAA8B3D,CAA9B,KAAoCgL,YAAY,CAAChL,CAAjD,GAAqD,CAAC,CAAtD,GAA0D,CAAzE;AACA,cAAIkL,QAAQ,GAAG,KAAKvH,OAAL,CAAa,eAAb,EAA8BpD,CAA9B,KAAoCyK,YAAY,CAACzK,CAAjD,GAAqD,CAAC,CAAtD,GAA0D,CAAzE;AACAP,UAAAA,CAAC,GAAGyJ,aAAa,GAAG,KAAKtJ,GAArB,GAA2B8K,QAA/B;AACA1K,UAAAA,CAAC,GAAGkJ,aAAa,GAAG,KAAKnJ,GAArB,GAA2B4K,QAA/B;AACA,eAAKvH,OAAL,CAAa,eAAb,EAA8B3D,CAA9B,CAAgCgL,YAAY,CAAChL,CAAb,GAAiBA,CAAjD;AACA,eAAK2D,OAAL,CAAa,eAAb,EAA8BpD,CAA9B,CAAgCyK,YAAY,CAACzK,CAAb,GAAiBA,CAAjD;AACH;AACJ,OApBI,MAqBA;AACD6K,QAAAA,OAAO,CAACzL,KAAR,CAAc,IAAI0L,KAAJ,CAAU,mDACpB,KAAKjH,iBADK,CAAd;AAEH;;AACD,UAAI0G,eAAe,GAAG,KAAKA,eAAL,MAA0BjM,CAAC,CAACkM,MAAlD;;AACA,UAAID,eAAJ,EAAqB;AACjB,YAAIQ,OAAO,GAAG,KAAK3H,OAAL,CAAa,WAAb,CAAd;AACA,YAAI4H,WAAW,GAAG,KAAK5H,OAAL,CAAa,eAAb,CAAlB;AACA,YAAI6H,UAAU,GAAGF,OAAO,CAACtL,CAAR,EAAjB;AACA,YAAIyL,UAAU,GAAGH,OAAO,CAAC/K,CAAR,EAAjB;AACA,YAAImL,aAAa,GAAG,KAAKC,QAAL,KAAkBJ,WAAW,CAACvL,CAAZ,EAAtC;AACA,YAAI4L,aAAa,GAAG,KAAKC,SAAL,KAAmBN,WAAW,CAAChL,CAAZ,EAAvC;AACAgL,QAAAA,WAAW,CAACO,IAAZ,CAAiB;AACb9L,UAAAA,CAAC,EAAE,CAACwL,UADS;AAEbjL,UAAAA,CAAC,EAAE,CAACkL;AAFS,SAAjB;AAIAH,QAAAA,OAAO,CAACQ,IAAR,CAAa;AACT9L,UAAAA,CAAC,EAAE0L,aADM;AAETnL,UAAAA,CAAC,EAAEqL;AAFM,SAAb;AAIH;;AACD,UAAIxG,MAAM,GAAG,KAAKzB,OAAL,CAAa,WAAb,EAA0BE,mBAA1B,EAAb;AACA7D,MAAAA,CAAC,GAAGoF,MAAM,CAACpF,CAAX;AACAO,MAAAA,CAAC,GAAG6E,MAAM,CAAC7E,CAAX;AACA,UAAIN,KAAK,GAAG,KAAK0D,OAAL,CAAa,eAAb,EAA8B3D,CAA9B,KAAoC,KAAK2D,OAAL,CAAa,WAAb,EAA0B3D,CAA1B,EAAhD;AACA,UAAIK,MAAM,GAAG,KAAKsD,OAAL,CAAa,eAAb,EAA8BpD,CAA9B,KAAoC,KAAKoD,OAAL,CAAa,WAAb,EAA0BpD,CAA1B,EAAjD;;AACA,WAAKmK,aAAL,CAAmB;AACf1K,QAAAA,CAAC,EAAEA,CADY;AAEfO,QAAAA,CAAC,EAAEA,CAFY;AAGfN,QAAAA,KAAK,EAAEA,KAHQ;AAIfI,QAAAA,MAAM,EAAEA,MAJO;AAKfD,QAAAA,QAAQ,EAAE9B,KAAK,CAACiD,QAAN,CAAe,KAAKnB,QAAL,EAAf;AALK,OAAnB,EAMGvB,CANH;AAOH;AA3eL;AAAA;AAAA,WA4eI,wBAAeA,CAAf,EAAkB;AACd,WAAKkN,aAAL,CAAmBlN,CAAnB;AACH;AA9eL;AAAA;AAAA,WA+eI,gCAAuB;AACnB,aAAO,KAAKmN,YAAL,EAAP;AACH;AAjfL;AAAA;AAAA,WAkfI,uBAAcnN,CAAd,EAAiB;AACb,UAAI,KAAKkD,aAAT,EAAwB;AACpB,aAAKA,aAAL,GAAqB,KAArB;;AACA,YAAI,OAAOkH,MAAP,KAAkB,WAAtB,EAAmC;AAC/BA,UAAAA,MAAM,CAACgD,mBAAP,CAA2B,WAA3B,EAAwC,KAAKhK,gBAA7C;AACAgH,UAAAA,MAAM,CAACgD,mBAAP,CAA2B,WAA3B,EAAwC,KAAKhK,gBAA7C;AACAgH,UAAAA,MAAM,CAACgD,mBAAP,CAA2B,SAA3B,EAAsC,KAAK9J,cAA3C,EAA2D,IAA3D;AACA8G,UAAAA,MAAM,CAACgD,mBAAP,CAA2B,UAA3B,EAAuC,KAAK9J,cAA5C,EAA4D,IAA5D;AACH;;AACD,YAAII,IAAI,GAAG,KAAKD,OAAL,EAAX;;AACA,aAAKiH,KAAL,CAAW,cAAX,EAA2B;AAAEC,UAAAA,GAAG,EAAE3K,CAAP;AAAU8J,UAAAA,MAAM,EAAEpG;AAAlB,SAA3B;;AACA,YAAIA,IAAJ,EAAU;AACN,eAAKI,MAAL,CAAYM,OAAZ,CAAoB,UAAC0F,MAAD,EAAY;AAC5BA,YAAAA,MAAM,CAACY,KAAP,CAAa,cAAb,EAA6B;AAAEC,cAAAA,GAAG,EAAE3K,CAAP;AAAU8J,cAAAA,MAAM,EAANA;AAAV,aAA7B;AACH,WAFD;AAGH;;AACD,aAAKvE,iBAAL,GAAyB,IAAzB;AACH;AACJ;AApgBL;AAAA;AAAA,WAqgBI,uBAAc8H,QAAd,EAAwB1C,GAAxB,EAA6B;AAAA;;AACzB,UAAI2C,QAAQ,GAAG,KAAK3F,YAAL,EAAf;;AACA,UAAM4F,OAAO,GAAG,CAAhB;;AACA,UAAIrO,IAAI,CAAC2B,QAAL,CAAcwM,QAAQ,CAACjM,KAAvB,EAA8B,CAAC,KAAKgI,OAAL,EAAD,GAAkB,CAAlB,GAAsBmE,OAApD,EAA6DA,OAA7D,CAAJ,EAA2E;AACvE,aAAKhK,MAAL;AACA;AACH;;AACD,UAAIrE,IAAI,CAAC2B,QAAL,CAAcwM,QAAQ,CAAC7L,MAAvB,EAA+B,CAAC,KAAK4H,OAAL,EAAD,GAAkB,CAAlB,GAAsBmE,OAArD,EAA8DA,OAA9D,CAAJ,EAA4E;AACxE,aAAKhK,MAAL;AACA;AACH;;AACD,UAAMiK,kBAAkB,GAAG,KAAKC,WAAL,EAA3B;AACA,UAAIC,CAAC,GAAG,IAAIvO,SAAJ,EAAR;AACAuO,MAAAA,CAAC,CAACxG,MAAF,CAASzH,KAAK,CAACiD,QAAN,CAAe,KAAKnB,QAAL,EAAf,CAAT;;AACA,UAAI,KAAKgE,iBAAL,IACA8H,QAAQ,CAACjM,KAAT,GAAiB,CADjB,IAEA,KAAKmE,iBAAL,CAAuBoI,OAAvB,CAA+B,MAA/B,KAA0C,CAF9C,EAEiD;AAC7C,YAAMC,MAAM,GAAGF,CAAC,CAAC7L,KAAF,CAAQ;AACnBV,UAAAA,CAAC,EAAE,CAAC,KAAKiI,OAAL,EAAD,GAAkB,CADF;AAEnB1H,UAAAA,CAAC,EAAE;AAFgB,SAAR,CAAf;AAIA2L,QAAAA,QAAQ,CAAClM,CAAT,IAAcyM,MAAM,CAACzM,CAArB;AACAkM,QAAAA,QAAQ,CAAC3L,CAAT,IAAckM,MAAM,CAAClM,CAArB;AACA2L,QAAAA,QAAQ,CAACjM,KAAT,IAAkB,KAAKgI,OAAL,KAAiB,CAAnC;AACA,aAAK7D,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBsI,OAAvB,CAA+B,MAA/B,EAAuC,OAAvC,CAAzB;AACA,aAAKpD,iBAAL,CAAuBtJ,CAAvB,IAA4ByM,MAAM,CAACzM,CAAnC;AACA,aAAKsJ,iBAAL,CAAuB/I,CAAvB,IAA4BkM,MAAM,CAAClM,CAAnC;;AACA,YAAI,CAAC8L,kBAAL,EAAyB;AACrB,eAAKjK,MAAL;AACA;AACH;AACJ,OAjBD,MAkBK,IAAI,KAAKgC,iBAAL,IACL8H,QAAQ,CAACjM,KAAT,GAAiB,CADZ,IAEL,KAAKmE,iBAAL,CAAuBoI,OAAvB,CAA+B,OAA/B,KAA2C,CAF1C,EAE6C;AAC9C,YAAMC,OAAM,GAAGF,CAAC,CAAC7L,KAAF,CAAQ;AACnBV,UAAAA,CAAC,EAAE,KAAKiI,OAAL,KAAiB,CADD;AAEnB1H,UAAAA,CAAC,EAAE;AAFgB,SAAR,CAAf;;AAIA,aAAK6D,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBsI,OAAvB,CAA+B,OAA/B,EAAwC,MAAxC,CAAzB;AACA,aAAKpD,iBAAL,CAAuBtJ,CAAvB,IAA4ByM,OAAM,CAACzM,CAAnC;AACA,aAAKsJ,iBAAL,CAAuB/I,CAAvB,IAA4BkM,OAAM,CAAClM,CAAnC;AACA2L,QAAAA,QAAQ,CAACjM,KAAT,IAAkB,KAAKgI,OAAL,KAAiB,CAAnC;;AACA,YAAI,CAACoE,kBAAL,EAAyB;AACrB,eAAKjK,MAAL;AACA;AACH;AACJ;;AACD,UAAI,KAAKgC,iBAAL,IACA8H,QAAQ,CAAC7L,MAAT,GAAkB,CADlB,IAEA,KAAK+D,iBAAL,CAAuBoI,OAAvB,CAA+B,KAA/B,KAAyC,CAF7C,EAEgD;AAC5C,YAAMC,QAAM,GAAGF,CAAC,CAAC7L,KAAF,CAAQ;AACnBV,UAAAA,CAAC,EAAE,CADgB;AAEnBO,UAAAA,CAAC,EAAE,CAAC,KAAK0H,OAAL,EAAD,GAAkB;AAFF,SAAR,CAAf;;AAIAiE,QAAAA,QAAQ,CAAClM,CAAT,IAAcyM,QAAM,CAACzM,CAArB;AACAkM,QAAAA,QAAQ,CAAC3L,CAAT,IAAckM,QAAM,CAAClM,CAArB;AACA,aAAK6D,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBsI,OAAvB,CAA+B,KAA/B,EAAsC,QAAtC,CAAzB;AACA,aAAKpD,iBAAL,CAAuBtJ,CAAvB,IAA4ByM,QAAM,CAACzM,CAAnC;AACA,aAAKsJ,iBAAL,CAAuB/I,CAAvB,IAA4BkM,QAAM,CAAClM,CAAnC;AACA2L,QAAAA,QAAQ,CAAC7L,MAAT,IAAmB,KAAK4H,OAAL,KAAiB,CAApC;;AACA,YAAI,CAACoE,kBAAL,EAAyB;AACrB,eAAKjK,MAAL;AACA;AACH;AACJ,OAjBD,MAkBK,IAAI,KAAKgC,iBAAL,IACL8H,QAAQ,CAAC7L,MAAT,GAAkB,CADb,IAEL,KAAK+D,iBAAL,CAAuBoI,OAAvB,CAA+B,QAA/B,KAA4C,CAF3C,EAE8C;AAC/C,YAAMC,QAAM,GAAGF,CAAC,CAAC7L,KAAF,CAAQ;AACnBV,UAAAA,CAAC,EAAE,CADgB;AAEnBO,UAAAA,CAAC,EAAE,KAAK0H,OAAL,KAAiB;AAFD,SAAR,CAAf;;AAIA,aAAK7D,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBsI,OAAvB,CAA+B,QAA/B,EAAyC,KAAzC,CAAzB;AACA,aAAKpD,iBAAL,CAAuBtJ,CAAvB,IAA4ByM,QAAM,CAACzM,CAAnC;AACA,aAAKsJ,iBAAL,CAAuB/I,CAAvB,IAA4BkM,QAAM,CAAClM,CAAnC;AACA2L,QAAAA,QAAQ,CAAC7L,MAAT,IAAmB,KAAK4H,OAAL,KAAiB,CAApC;;AACA,YAAI,CAACoE,kBAAL,EAAyB;AACrB,eAAKjK,MAAL;AACA;AACH;AACJ;;AACD,UAAI,KAAKuK,YAAL,EAAJ,EAAyB;AACrB,YAAMC,OAAO,GAAG,KAAKD,YAAL,GAAoBR,QAApB,EAA8BD,QAA9B,CAAhB;;AACA,YAAIU,OAAJ,EAAa;AACTV,UAAAA,QAAQ,GAAGU,OAAX;AACH,SAFD,MAGK;AACD7O,UAAAA,IAAI,CAAC0E,IAAL,CAAU,wEAAV;AACH;AACJ;;AACD,UAAMoK,QAAQ,GAAG,QAAjB;AACA,UAAMC,KAAK,GAAG,IAAI9O,SAAJ,EAAd;AACA8O,MAAAA,KAAK,CAACC,SAAN,CAAgBZ,QAAQ,CAACnM,CAAzB,EAA4BmM,QAAQ,CAAC5L,CAArC;AACAuM,MAAAA,KAAK,CAAC/G,MAAN,CAAaoG,QAAQ,CAAC/L,QAAtB;AACA0M,MAAAA,KAAK,CAACE,KAAN,CAAYb,QAAQ,CAAClM,KAAT,GAAiB4M,QAA7B,EAAuCV,QAAQ,CAAC9L,MAAT,GAAkBwM,QAAzD;AACA,UAAMI,KAAK,GAAG,IAAIjP,SAAJ,EAAd;AACAiP,MAAAA,KAAK,CAACF,SAAN,CAAgBb,QAAQ,CAAClM,CAAzB,EAA4BkM,QAAQ,CAAC3L,CAArC;AACA0M,MAAAA,KAAK,CAAClH,MAAN,CAAamG,QAAQ,CAAC9L,QAAtB;AACA6M,MAAAA,KAAK,CAACD,KAAN,CAAYd,QAAQ,CAACjM,KAAT,GAAiB4M,QAA7B,EAAuCX,QAAQ,CAAC7L,MAAT,GAAkBwM,QAAzD;AACA,UAAM3C,KAAK,GAAG+C,KAAK,CAACC,QAAN,CAAeJ,KAAK,CAACxG,MAAN,EAAf,CAAd;;AACA,WAAK3D,MAAL,CAAYM,OAAZ,CAAoB,UAACV,IAAD,EAAU;AAC1B,YAAI4K,EAAJ;;AACA,YAAMC,eAAe,GAAG7K,IAAI,CAACyF,SAAL,GAAiBrC,oBAAjB,EAAxB;AACA,YAAM0H,cAAc,GAAG9K,IAAI,CAACyJ,YAAL,GAAoBsB,IAApB,EAAvB;AACAD,QAAAA,cAAc,CAACN,SAAf,CAAyBxK,IAAI,CAAC8C,OAAL,EAAzB,EAAyC9C,IAAI,CAAC+C,OAAL,EAAzC;AACA,YAAMiI,iBAAiB,GAAG,IAAIvP,SAAJ,EAA1B;AACAuP,QAAAA,iBAAiB,CACZL,QADL,CACcE,eAAe,CAACE,IAAhB,GAAuBhH,MAAvB,EADd,EAEK4G,QAFL,CAEchD,KAFd,EAGKgD,QAHL,CAGcE,eAHd,EAIKF,QAJL,CAIcG,cAJd;AAKA,YAAMxE,KAAK,GAAG0E,iBAAiB,CAACC,SAAlB,EAAd;AACAjL,QAAAA,IAAI,CAACkL,QAAL,CAAc5E,KAAd;;AACA,QAAA,MAAI,CAACU,KAAL,CAAW,WAAX,EAAwB;AAAEC,UAAAA,GAAG,EAAEA,GAAP;AAAYb,UAAAA,MAAM,EAAEpG;AAApB,SAAxB;;AACAA,QAAAA,IAAI,CAACgH,KAAL,CAAW,WAAX,EAAwB;AAAEC,UAAAA,GAAG,EAAEA,GAAP;AAAYb,UAAAA,MAAM,EAAEpG;AAApB,SAAxB;;AACA,SAAC4K,EAAE,GAAG5K,IAAI,CAACmL,QAAL,EAAN,MAA2B,IAA3B,IAAmCP,EAAE,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,EAAE,CAACQ,SAAH,EAA5D;AACH,OAhBD;;AAiBA,WAAKvN,QAAL,CAAcrC,IAAI,CAAC6P,YAAL,CAAkB1B,QAAQ,CAAC9L,QAA3B,CAAd;;AACA,WAAK+C,oBAAL;;AACA,WAAKf,MAAL;AACA,WAAKsL,QAAL,GAAgBC,SAAhB;AACH;AA/nBL;AAAA;AAAA,WAgoBI,uBAAc;AACV,WAAKxK,oBAAL;;AACA,WAAKf,MAAL;AACH;AAnoBL;AAAA;AAAA,WAooBI,2BAAkByL,QAAlB,EAA4BhF,KAA5B,EAAmC;AAC/B,UAAMjC,MAAM,GAAG,KAAKjD,OAAL,CAAakK,QAAb,CAAf;AACAjH,MAAAA,MAAM,CAAC6G,QAAP,CAAgB5E,KAAhB;AACH;AAvoBL;AAAA;AAAA,WAwoBI,kBAAS;AAAA;;AACL,UAAIsE,EAAJ;;AACA,UAAItE,KAAK,GAAG,KAAKrC,YAAL,EAAZ;;AACA,WAAKpG,QAAL,CAAcrC,IAAI,CAAC6P,YAAL,CAAkB/E,KAAK,CAACzI,QAAxB,CAAd;AACA,UAAIH,KAAK,GAAG4I,KAAK,CAAC5I,KAAlB;AACA,UAAII,MAAM,GAAGwI,KAAK,CAACxI,MAAnB;AACA,UAAIyN,cAAc,GAAG,KAAKA,cAAL,EAArB;AACA,UAAIC,aAAa,GAAG,KAAKA,aAAL,EAApB;AACA,UAAI9F,OAAO,GAAG,KAAKA,OAAL,EAAd;AACA,UAAI+F,UAAU,GAAG,KAAKA,UAAL,EAAjB;AACA,WAAKC,IAAL,CAAU,UAAV,EAAsBhL,OAAtB,CAA8B,UAACV,IAAD,EAAU;AACpCA,QAAAA,IAAI,CAACkL,QAAL,CAAc;AACVxN,UAAAA,KAAK,EAAE+N,UADG;AAEV3N,UAAAA,MAAM,EAAE2N,UAFE;AAGV3I,UAAAA,OAAO,EAAE2I,UAAU,GAAG,CAHZ;AAIV1I,UAAAA,OAAO,EAAE0I,UAAU,GAAG,CAJZ;AAKVnH,UAAAA,MAAM,EAAE,MAAI,CAACqH,YAAL,EALE;AAMVnH,UAAAA,WAAW,EAAE,MAAI,CAACoH,iBAAL,EANH;AAOVrH,UAAAA,IAAI,EAAE,MAAI,CAACsH,UAAL,EAPI;AAQVC,UAAAA,YAAY,EAAE,MAAI,CAACC,kBAAL;AARJ,SAAd;AAUH,OAXD;;AAYA,WAAKC,iBAAL,CAAuB,WAAvB,EAAoC;AAChCvO,QAAAA,CAAC,EAAE,CAD6B;AAEhCO,QAAAA,CAAC,EAAE,CAF6B;AAGhC8E,QAAAA,OAAO,EAAE2I,UAAU,GAAG,CAAb,GAAiB/F,OAHM;AAIhC3C,QAAAA,OAAO,EAAE0I,UAAU,GAAG,CAAb,GAAiB/F,OAJM;AAKhCuG,QAAAA,OAAO,EAAET,aAAa,IAAID,cAAc,CAACtB,OAAf,CAAuB,UAAvB,KAAsC;AALhC,OAApC;;AAOA,WAAK+B,iBAAL,CAAuB,aAAvB,EAAsC;AAClCvO,QAAAA,CAAC,EAAEC,KAAK,GAAG,CADuB;AAElCM,QAAAA,CAAC,EAAE,CAF+B;AAGlC+E,QAAAA,OAAO,EAAE0I,UAAU,GAAG,CAAb,GAAiB/F,OAHQ;AAIlCuG,QAAAA,OAAO,EAAET,aAAa,IAAID,cAAc,CAACtB,OAAf,CAAuB,YAAvB,KAAwC;AAJhC,OAAtC;;AAMA,WAAK+B,iBAAL,CAAuB,YAAvB,EAAqC;AACjCvO,QAAAA,CAAC,EAAEC,KAD8B;AAEjCM,QAAAA,CAAC,EAAE,CAF8B;AAGjC8E,QAAAA,OAAO,EAAE2I,UAAU,GAAG,CAAb,GAAiB/F,OAHO;AAIjC3C,QAAAA,OAAO,EAAE0I,UAAU,GAAG,CAAb,GAAiB/F,OAJO;AAKjCuG,QAAAA,OAAO,EAAET,aAAa,IAAID,cAAc,CAACtB,OAAf,CAAuB,WAAvB,KAAuC;AALhC,OAArC;;AAOA,WAAK+B,iBAAL,CAAuB,cAAvB,EAAuC;AACnCvO,QAAAA,CAAC,EAAE,CADgC;AAEnCO,QAAAA,CAAC,EAAEF,MAAM,GAAG,CAFuB;AAGnCgF,QAAAA,OAAO,EAAE2I,UAAU,GAAG,CAAb,GAAiB/F,OAHS;AAInCuG,QAAAA,OAAO,EAAET,aAAa,IAAID,cAAc,CAACtB,OAAf,CAAuB,aAAvB,KAAyC;AAJhC,OAAvC;;AAMA,WAAK+B,iBAAL,CAAuB,eAAvB,EAAwC;AACpCvO,QAAAA,CAAC,EAAEC,KADiC;AAEpCM,QAAAA,CAAC,EAAEF,MAAM,GAAG,CAFwB;AAGpCgF,QAAAA,OAAO,EAAE2I,UAAU,GAAG,CAAb,GAAiB/F,OAHU;AAIpCuG,QAAAA,OAAO,EAAET,aAAa,IAAID,cAAc,CAACtB,OAAf,CAAuB,cAAvB,KAA0C;AAJhC,OAAxC;;AAMA,WAAK+B,iBAAL,CAAuB,cAAvB,EAAuC;AACnCvO,QAAAA,CAAC,EAAE,CADgC;AAEnCO,QAAAA,CAAC,EAAEF,MAFgC;AAGnCgF,QAAAA,OAAO,EAAE2I,UAAU,GAAG,CAAb,GAAiB/F,OAHS;AAInC3C,QAAAA,OAAO,EAAE0I,UAAU,GAAG,CAAb,GAAiB/F,OAJS;AAKnCuG,QAAAA,OAAO,EAAET,aAAa,IAAID,cAAc,CAACtB,OAAf,CAAuB,aAAvB,KAAyC;AALhC,OAAvC;;AAOA,WAAK+B,iBAAL,CAAuB,gBAAvB,EAAyC;AACrCvO,QAAAA,CAAC,EAAEC,KAAK,GAAG,CAD0B;AAErCM,QAAAA,CAAC,EAAEF,MAFkC;AAGrCiF,QAAAA,OAAO,EAAE0I,UAAU,GAAG,CAAb,GAAiB/F,OAHW;AAIrCuG,QAAAA,OAAO,EAAET,aAAa,IAAID,cAAc,CAACtB,OAAf,CAAuB,eAAvB,KAA2C;AAJhC,OAAzC;;AAMA,WAAK+B,iBAAL,CAAuB,eAAvB,EAAwC;AACpCvO,QAAAA,CAAC,EAAEC,KADiC;AAEpCM,QAAAA,CAAC,EAAEF,MAFiC;AAGpCgF,QAAAA,OAAO,EAAE2I,UAAU,GAAG,CAAb,GAAiB/F,OAHU;AAIpC3C,QAAAA,OAAO,EAAE0I,UAAU,GAAG,CAAb,GAAiB/F,OAJU;AAKpCuG,QAAAA,OAAO,EAAET,aAAa,IAAID,cAAc,CAACtB,OAAf,CAAuB,cAAvB,KAA0C;AALhC,OAAxC;;AAOA,WAAK+B,iBAAL,CAAuB,UAAvB,EAAmC;AAC/BvO,QAAAA,CAAC,EAAEC,KAAK,GAAG,CADoB;AAE/BM,QAAAA,CAAC,EAAE,CAAC,KAAK+H,kBAAL,EAAD,GAA6BvK,IAAI,CAACwK,KAAL,CAAWlI,MAAX,CAA7B,GAAkD4H,OAFtB;AAG/BuG,QAAAA,OAAO,EAAE,KAAKpG,aAAL;AAHsB,OAAnC;;AAKA,WAAKmG,iBAAL,CAAuB,OAAvB,EAAgC;AAC5BtO,QAAAA,KAAK,EAAEA,KADqB;AAE5BI,QAAAA,MAAM,EAAEA,MAFoB;AAG5BmO,QAAAA,OAAO,EAAE,KAAKC,aAAL,EAHmB;AAI5B5H,QAAAA,MAAM,EAAE,KAAK6H,YAAL,EAJoB;AAK5B3H,QAAAA,WAAW,EAAE,KAAK4H,iBAAL,EALe;AAM5BC,QAAAA,IAAI,EAAE,KAAKC,UAAL,EANsB;AAO5B7O,QAAAA,CAAC,EAAE,CAPyB;AAQ5BO,QAAAA,CAAC,EAAE;AARyB,OAAhC;;AAUA,OAAC4M,EAAE,GAAG,KAAKO,QAAL,EAAN,MAA2B,IAA3B,IAAmCP,EAAE,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,EAAE,CAACQ,SAAH,EAA5D;AACH;AAluBL;AAAA;AAAA,WAmuBI,0BAAiB;AACb,aAAO,KAAK5L,aAAZ;AACH;AAruBL;AAAA;AAAA,WAsuBI,yBAAgB;AACZ,UAAI,KAAKA,aAAT,EAAwB;AACpB,aAAKgK,aAAL;;AACA,YAAIrC,UAAU,GAAG,KAAK/F,OAAL,CAAa,MAAM,KAAKS,iBAAxB,CAAjB;;AACA,YAAIsF,UAAJ,EAAgB;AACZA,UAAAA,UAAU,CAACrC,QAAX;AACH;AACJ;AACJ;AA9uBL;AAAA;AAAA,WA+uBI,mBAAU;AACN,UAAI,KAAKG,QAAL,MAAmB,KAAKG,aAA5B,EAA2C;AACvC,aAAKH,QAAL,GAAgBC,OAAhB,KAA4B,KAAKD,QAAL,GAAgBC,OAAhB,CAAwBC,KAAxB,CAA8BH,MAA9B,GAAuC,EAAnE;AACH;;AACDlJ,MAAAA,KAAK,CAACyQ,SAAN,CAAgBC,OAAhB,CAAwBC,IAAxB,CAA6B,IAA7B;AACA,WAAKlM,MAAL;;AACA,WAAKiJ,aAAL;;AACA,aAAO,IAAP;AACH;AAvvBL;AAAA;AAAA,WAwvBI,oBAAW;AACP,aAAO7N,IAAI,CAAC4Q,SAAL,CAAeG,QAAf,CAAwBD,IAAxB,CAA6B,IAA7B,CAAP;AACH;AA1vBL;;AAAA;AAAA,EAAiC3Q,KAAjC;;AA4vBA,SAAS6Q,eAAT,CAAyBC,GAAzB,EAA8B;AAC1B,MAAI,EAAEA,GAAG,YAAYC,KAAjB,CAAJ,EAA6B;AACzBrR,IAAAA,IAAI,CAAC0E,IAAL,CAAU,yCAAV;AACH;;AACD,MAAI0M,GAAG,YAAYC,KAAnB,EAA0B;AACtBD,IAAAA,GAAG,CAAClM,OAAJ,CAAY,UAAUyD,IAAV,EAAgB;AACxB,UAAI9G,aAAa,CAAC4M,OAAd,CAAsB9F,IAAtB,MAAgC,CAAC,CAArC,EAAwC;AACpC3I,QAAAA,IAAI,CAAC0E,IAAL,CAAU,0BACNiE,IADM,GAEN,yBAFM,GAGN9G,aAAa,CAACd,IAAd,CAAmB,IAAnB,CAHJ;AAIH;AACJ,KAPD;AAQH;;AACD,SAAOqQ,GAAG,IAAI,EAAd;AACH;;AACDtN,WAAW,CAACiN,SAAZ,CAAsBO,SAAtB,GAAkC,aAAlC;;AACA5Q,aAAa,CAACoD,WAAD,CAAb;;AACA5D,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,gBAArC,EAAuDjC,aAAvD,EAAsEsP,eAAtE;AACAjR,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,aAArC,EAAoD,IAApD,EAA0DtD,mBAAmB,EAA7E;AACAN,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,eAArC,EAAsD,IAAtD;AACA5D,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,YAArC,EAAmD,EAAnD,EAAuDrD,kBAAkB,EAAzE;AACAP,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,eAArC,EAAsD,IAAtD;AACA5D,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,eAArC,EAAsD,EAAtD;AACA5D,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,oBAArC,EAA2D,EAA3D,EAA+DrD,kBAAkB,EAAjF;AACAP,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,uBAArC,EAA8D,CAA9D,EAAiErD,kBAAkB,EAAnF;AACAP,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,eAArC,EAAsD,IAAtD;AACA5D,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,cAArC,EAAqD,kBAArD;AACA5D,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,mBAArC,EAA0D,CAA1D,EAA6DrD,kBAAkB,EAA/E;AACAP,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,YAArC,EAAmD,OAAnD;AACA5D,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,oBAArC,EAA2D,CAA3D,EAA8DrD,kBAAkB,EAAhF;AACAP,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,cAArC,EAAqD,kBAArD;AACA5D,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,mBAArC,EAA0D,CAA1D,EAA6DrD,kBAAkB,EAA/E;AACAP,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,YAArC;AACA5D,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,WAArC,EAAkD,IAAlD;AACA5D,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,iBAArC,EAAwD,KAAxD;AACA5D,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,cAArC,EAAqD,KAArD;AACA5D,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,SAArC,EAAgD,CAAhD,EAAmDrD,kBAAkB,EAArE;AACAP,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,MAArC;AACA5D,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,OAArC;AACA5D,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,cAArC;AACA5D,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,qBAArC;AACA5D,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,yBAArC,EAAgE,KAAhE;AACA5D,OAAO,CAACqR,eAAR,CAAwBzN,WAAxB,EAAqC,uBAArC,EAA8D,IAA9D;AACA5D,OAAO,CAACsR,UAAR,CAAmB1N,WAAnB,EAAgC;AAC5B2N,EAAAA,WAAW,EAAE,eADe;AAE5BC,EAAAA,mBAAmB,EAAE,oBAFO;AAG5BC,EAAAA,eAAe,EAAE;AAHW,CAAhC","sourcesContent":["import { Util, Transform } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Node } from '../Node.js';\nimport { Shape } from '../Shape.js';\nimport { Rect } from './Rect.js';\nimport { Group } from '../Group.js';\nimport { Konva } from '../Global.js';\nimport { getBooleanValidator, getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nvar EVENTS_NAME = 'tr-konva';\nvar ATTR_CHANGE_LIST = [\n    'resizeEnabledChange',\n    'rotateAnchorOffsetChange',\n    'rotateEnabledChange',\n    'enabledAnchorsChange',\n    'anchorSizeChange',\n    'borderEnabledChange',\n    'borderStrokeChange',\n    'borderStrokeWidthChange',\n    'borderDashChange',\n    'anchorStrokeChange',\n    'anchorStrokeWidthChange',\n    'anchorFillChange',\n    'anchorCornerRadiusChange',\n    'ignoreStrokeChange',\n]\n    .map((e) => e + `.${EVENTS_NAME}`)\n    .join(' ');\nvar NODES_RECT = 'nodesRect';\nvar TRANSFORM_CHANGE_STR = [\n    'widthChange',\n    'heightChange',\n    'scaleXChange',\n    'scaleYChange',\n    'skewXChange',\n    'skewYChange',\n    'rotationChange',\n    'offsetXChange',\n    'offsetYChange',\n    'transformsEnabledChange',\n    'strokeWidthChange',\n];\nvar ANGLES = {\n    'top-left': -45,\n    'top-center': 0,\n    'top-right': 45,\n    'middle-right': -90,\n    'middle-left': 90,\n    'bottom-left': -135,\n    'bottom-center': 180,\n    'bottom-right': 135,\n};\nconst TOUCH_DEVICE = 'ontouchstart' in Konva._global;\nfunction getCursor(anchorName, rad) {\n    if (anchorName === 'rotater') {\n        return 'crosshair';\n    }\n    rad += Util.degToRad(ANGLES[anchorName] || 0);\n    var angle = ((Util.radToDeg(rad) % 360) + 360) % 360;\n    if (Util._inRange(angle, 315 + 22.5, 360) || Util._inRange(angle, 0, 22.5)) {\n        return 'ns-resize';\n    }\n    else if (Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {\n        return 'nesw-resize';\n    }\n    else if (Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {\n        return 'ew-resize';\n    }\n    else if (Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {\n        return 'nwse-resize';\n    }\n    else if (Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {\n        return 'ns-resize';\n    }\n    else if (Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {\n        return 'nesw-resize';\n    }\n    else if (Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {\n        return 'ew-resize';\n    }\n    else if (Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {\n        return 'nwse-resize';\n    }\n    else {\n        Util.error('Transformer has unknown angle for cursor detection: ' + angle);\n        return 'pointer';\n    }\n}\nvar ANCHORS_NAMES = [\n    'top-left',\n    'top-center',\n    'top-right',\n    'middle-right',\n    'middle-left',\n    'bottom-left',\n    'bottom-center',\n    'bottom-right',\n];\nvar MAX_SAFE_INTEGER = 100000000;\nfunction getCenter(shape) {\n    return {\n        x: shape.x +\n            (shape.width / 2) * Math.cos(shape.rotation) +\n            (shape.height / 2) * Math.sin(-shape.rotation),\n        y: shape.y +\n            (shape.height / 2) * Math.cos(shape.rotation) +\n            (shape.width / 2) * Math.sin(shape.rotation),\n    };\n}\nfunction rotateAroundPoint(shape, angleRad, point) {\n    const x = point.x +\n        (shape.x - point.x) * Math.cos(angleRad) -\n        (shape.y - point.y) * Math.sin(angleRad);\n    const y = point.y +\n        (shape.x - point.x) * Math.sin(angleRad) +\n        (shape.y - point.y) * Math.cos(angleRad);\n    return Object.assign(Object.assign({}, shape), { rotation: shape.rotation + angleRad, x,\n        y });\n}\nfunction rotateAroundCenter(shape, deltaRad) {\n    const center = getCenter(shape);\n    return rotateAroundPoint(shape, deltaRad, center);\n}\nfunction getSnap(snaps, newRotationRad, tol) {\n    let snapped = newRotationRad;\n    for (let i = 0; i < snaps.length; i++) {\n        const angle = Konva.getAngle(snaps[i]);\n        const absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);\n        const dif = Math.min(absDiff, Math.PI * 2 - absDiff);\n        if (dif < tol) {\n            snapped = angle;\n        }\n    }\n    return snapped;\n}\nexport class Transformer extends Group {\n    constructor(config) {\n        super(config);\n        this._transforming = false;\n        this._createElements();\n        this._handleMouseMove = this._handleMouseMove.bind(this);\n        this._handleMouseUp = this._handleMouseUp.bind(this);\n        this.update = this.update.bind(this);\n        this.on(ATTR_CHANGE_LIST, this.update);\n        if (this.getNode()) {\n            this.update();\n        }\n    }\n    attachTo(node) {\n        this.setNode(node);\n        return this;\n    }\n    setNode(node) {\n        Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');\n        return this.setNodes([node]);\n    }\n    getNode() {\n        return this._nodes && this._nodes[0];\n    }\n    _getEventNamespace() {\n        return EVENTS_NAME + this._id;\n    }\n    setNodes(nodes = []) {\n        if (this._nodes && this._nodes.length) {\n            this.detach();\n        }\n        this._nodes = nodes;\n        if (nodes.length === 1 && this.useSingleNodeRotation()) {\n            this.rotation(nodes[0].getAbsoluteRotation());\n        }\n        else {\n            this.rotation(0);\n        }\n        this._nodes.forEach((node) => {\n            const onChange = () => {\n                if (this.nodes().length === 1 && this.useSingleNodeRotation()) {\n                    this.rotation(this.nodes()[0].getAbsoluteRotation());\n                }\n                this._resetTransformCache();\n                if (!this._transforming && !this.isDragging()) {\n                    this.update();\n                }\n            };\n            const additionalEvents = node._attrsAffectingSize\n                .map((prop) => prop + 'Change.' + this._getEventNamespace())\n                .join(' ');\n            node.on(additionalEvents, onChange);\n            node.on(TRANSFORM_CHANGE_STR.map((e) => e + `.${this._getEventNamespace()}`).join(' '), onChange);\n            node.on(`absoluteTransformChange.${this._getEventNamespace()}`, onChange);\n            this._proxyDrag(node);\n        });\n        this._resetTransformCache();\n        var elementsCreated = !!this.findOne('.top-left');\n        if (elementsCreated) {\n            this.update();\n        }\n        return this;\n    }\n    _proxyDrag(node) {\n        let lastPos;\n        node.on(`dragstart.${this._getEventNamespace()}`, (e) => {\n            lastPos = node.getAbsolutePosition();\n            if (!this.isDragging() && node !== this.findOne('.back')) {\n                this.startDrag(e, false);\n            }\n        });\n        node.on(`dragmove.${this._getEventNamespace()}`, (e) => {\n            if (!lastPos) {\n                return;\n            }\n            const abs = node.getAbsolutePosition();\n            const dx = abs.x - lastPos.x;\n            const dy = abs.y - lastPos.y;\n            this.nodes().forEach((otherNode) => {\n                if (otherNode === node) {\n                    return;\n                }\n                if (otherNode.isDragging()) {\n                    return;\n                }\n                const otherAbs = otherNode.getAbsolutePosition();\n                otherNode.setAbsolutePosition({\n                    x: otherAbs.x + dx,\n                    y: otherAbs.y + dy,\n                });\n                otherNode.startDrag(e);\n            });\n            lastPos = null;\n        });\n    }\n    getNodes() {\n        return this._nodes || [];\n    }\n    getActiveAnchor() {\n        return this._movingAnchorName;\n    }\n    detach() {\n        if (this._nodes) {\n            this._nodes.forEach((node) => {\n                node.off('.' + this._getEventNamespace());\n            });\n        }\n        this._nodes = [];\n        this._resetTransformCache();\n    }\n    _resetTransformCache() {\n        this._clearCache(NODES_RECT);\n        this._clearCache('transform');\n        this._clearSelfAndDescendantCache('absoluteTransform');\n    }\n    _getNodeRect() {\n        return this._getCache(NODES_RECT, this.__getNodeRect);\n    }\n    __getNodeShape(node, rot = this.rotation(), relative) {\n        var rect = node.getClientRect({\n            skipTransform: true,\n            skipShadow: true,\n            skipStroke: this.ignoreStroke(),\n        });\n        var absScale = node.getAbsoluteScale(relative);\n        var absPos = node.getAbsolutePosition(relative);\n        var dx = rect.x * absScale.x - node.offsetX() * absScale.x;\n        var dy = rect.y * absScale.y - node.offsetY() * absScale.y;\n        const rotation = (Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) %\n            (Math.PI * 2);\n        const box = {\n            x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),\n            y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),\n            width: rect.width * absScale.x,\n            height: rect.height * absScale.y,\n            rotation: rotation,\n        };\n        return rotateAroundPoint(box, -Konva.getAngle(rot), {\n            x: 0,\n            y: 0,\n        });\n    }\n    __getNodeRect() {\n        var node = this.getNode();\n        if (!node) {\n            return {\n                x: -MAX_SAFE_INTEGER,\n                y: -MAX_SAFE_INTEGER,\n                width: 0,\n                height: 0,\n                rotation: 0,\n            };\n        }\n        const totalPoints = [];\n        this.nodes().map((node) => {\n            const box = node.getClientRect({\n                skipTransform: true,\n                skipShadow: true,\n                skipStroke: this.ignoreStroke(),\n            });\n            var points = [\n                { x: box.x, y: box.y },\n                { x: box.x + box.width, y: box.y },\n                { x: box.x + box.width, y: box.y + box.height },\n                { x: box.x, y: box.y + box.height },\n            ];\n            var trans = node.getAbsoluteTransform();\n            points.forEach(function (point) {\n                var transformed = trans.point(point);\n                totalPoints.push(transformed);\n            });\n        });\n        const tr = new Transform();\n        tr.rotate(-Konva.getAngle(this.rotation()));\n        var minX, minY, maxX, maxY;\n        totalPoints.forEach(function (point) {\n            var transformed = tr.point(point);\n            if (minX === undefined) {\n                minX = maxX = transformed.x;\n                minY = maxY = transformed.y;\n            }\n            minX = Math.min(minX, transformed.x);\n            minY = Math.min(minY, transformed.y);\n            maxX = Math.max(maxX, transformed.x);\n            maxY = Math.max(maxY, transformed.y);\n        });\n        tr.invert();\n        const p = tr.point({ x: minX, y: minY });\n        return {\n            x: p.x,\n            y: p.y,\n            width: maxX - minX,\n            height: maxY - minY,\n            rotation: Konva.getAngle(this.rotation()),\n        };\n    }\n    getX() {\n        return this._getNodeRect().x;\n    }\n    getY() {\n        return this._getNodeRect().y;\n    }\n    getWidth() {\n        return this._getNodeRect().width;\n    }\n    getHeight() {\n        return this._getNodeRect().height;\n    }\n    _createElements() {\n        this._createBack();\n        ANCHORS_NAMES.forEach(function (name) {\n            this._createAnchor(name);\n        }.bind(this));\n        this._createAnchor('rotater');\n    }\n    _createAnchor(name) {\n        var anchor = new Rect({\n            stroke: 'rgb(0, 161, 255)',\n            fill: 'white',\n            strokeWidth: 1,\n            name: name + ' _anchor',\n            dragDistance: 0,\n            draggable: true,\n            hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto',\n        });\n        var self = this;\n        anchor.on('mousedown touchstart', function (e) {\n            self._handleMouseDown(e);\n        });\n        anchor.on('dragstart', (e) => {\n            anchor.stopDrag();\n            e.cancelBubble = true;\n        });\n        anchor.on('dragend', (e) => {\n            e.cancelBubble = true;\n        });\n        anchor.on('mouseenter', () => {\n            var rad = Konva.getAngle(this.rotation());\n            var cursor = getCursor(name, rad);\n            anchor.getStage().content &&\n                (anchor.getStage().content.style.cursor = cursor);\n            this._cursorChange = true;\n        });\n        anchor.on('mouseout', () => {\n            anchor.getStage().content &&\n                (anchor.getStage().content.style.cursor = '');\n            this._cursorChange = false;\n        });\n        this.add(anchor);\n    }\n    _createBack() {\n        var back = new Shape({\n            name: 'back',\n            width: 0,\n            height: 0,\n            draggable: true,\n            sceneFunc(ctx) {\n                var tr = this.getParent();\n                var padding = tr.padding();\n                ctx.beginPath();\n                ctx.rect(-padding, -padding, this.width() + padding * 2, this.height() + padding * 2);\n                ctx.moveTo(this.width() / 2, -padding);\n                if (tr.rotateEnabled()) {\n                    ctx.lineTo(this.width() / 2, -tr.rotateAnchorOffset() * Util._sign(this.height()) - padding);\n                }\n                ctx.fillStrokeShape(this);\n            },\n            hitFunc: (ctx, shape) => {\n                if (!this.shouldOverdrawWholeArea()) {\n                    return;\n                }\n                var padding = this.padding();\n                ctx.beginPath();\n                ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);\n                ctx.fillStrokeShape(shape);\n            },\n        });\n        this.add(back);\n        this._proxyDrag(back);\n        back.on('dragstart', (e) => {\n            e.cancelBubble = true;\n        });\n        back.on('dragmove', (e) => {\n            e.cancelBubble = true;\n        });\n        back.on('dragend', (e) => {\n            e.cancelBubble = true;\n        });\n        this.on('dragmove', (e) => {\n            this.update();\n        });\n    }\n    _handleMouseDown(e) {\n        this._movingAnchorName = e.target.name().split(' ')[0];\n        var attrs = this._getNodeRect();\n        var width = attrs.width;\n        var height = attrs.height;\n        var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));\n        this.sin = Math.abs(height / hypotenuse);\n        this.cos = Math.abs(width / hypotenuse);\n        if (typeof window !== 'undefined') {\n            window.addEventListener('mousemove', this._handleMouseMove);\n            window.addEventListener('touchmove', this._handleMouseMove);\n            window.addEventListener('mouseup', this._handleMouseUp, true);\n            window.addEventListener('touchend', this._handleMouseUp, true);\n        }\n        this._transforming = true;\n        var ap = e.target.getAbsolutePosition();\n        var pos = e.target.getStage().getPointerPosition();\n        this._anchorDragOffset = {\n            x: pos.x - ap.x,\n            y: pos.y - ap.y,\n        };\n        this._fire('transformstart', { evt: e, target: this.getNode() });\n        this._nodes.forEach((target) => {\n            target._fire('transformstart', { evt: e, target });\n        });\n    }\n    _handleMouseMove(e) {\n        var x, y, newHypotenuse;\n        var anchorNode = this.findOne('.' + this._movingAnchorName);\n        var stage = anchorNode.getStage();\n        stage.setPointersPositions(e);\n        const pp = stage.getPointerPosition();\n        let newNodePos = {\n            x: pp.x - this._anchorDragOffset.x,\n            y: pp.y - this._anchorDragOffset.y,\n        };\n        const oldAbs = anchorNode.getAbsolutePosition();\n        if (this.anchorDragBoundFunc()) {\n            newNodePos = this.anchorDragBoundFunc()(oldAbs, newNodePos, e);\n        }\n        anchorNode.setAbsolutePosition(newNodePos);\n        const newAbs = anchorNode.getAbsolutePosition();\n        if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {\n            return;\n        }\n        if (this._movingAnchorName === 'rotater') {\n            var attrs = this._getNodeRect();\n            x = anchorNode.x() - attrs.width / 2;\n            y = -anchorNode.y() + attrs.height / 2;\n            let delta = Math.atan2(-y, x) + Math.PI / 2;\n            if (attrs.height < 0) {\n                delta -= Math.PI;\n            }\n            var oldRotation = Konva.getAngle(this.rotation());\n            const newRotation = oldRotation + delta;\n            const tol = Konva.getAngle(this.rotationSnapTolerance());\n            const snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);\n            const diff = snappedRot - attrs.rotation;\n            const shape = rotateAroundCenter(attrs, diff);\n            this._fitNodesInto(shape, e);\n            return;\n        }\n        var keepProportion = this.keepRatio() || e.shiftKey;\n        var centeredScaling = this.centeredScaling() || e.altKey;\n        if (this._movingAnchorName === 'top-left') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.bottom-right').x(),\n                        y: this.findOne('.bottom-right').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +\n                    Math.pow(comparePoint.y - anchorNode.y(), 2));\n                var reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.top-left').x(comparePoint.x - x);\n                this.findOne('.top-left').y(comparePoint.y - y);\n            }\n        }\n        else if (this._movingAnchorName === 'top-center') {\n            this.findOne('.top-left').y(anchorNode.y());\n        }\n        else if (this._movingAnchorName === 'top-right') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.bottom-left').x(),\n                        y: this.findOne('.bottom-left').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +\n                    Math.pow(comparePoint.y - anchorNode.y(), 2));\n                var reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.top-right').x(comparePoint.x + x);\n                this.findOne('.top-right').y(comparePoint.y - y);\n            }\n            var pos = anchorNode.position();\n            this.findOne('.top-left').y(pos.y);\n            this.findOne('.bottom-right').x(pos.x);\n        }\n        else if (this._movingAnchorName === 'middle-left') {\n            this.findOne('.top-left').x(anchorNode.x());\n        }\n        else if (this._movingAnchorName === 'middle-right') {\n            this.findOne('.bottom-right').x(anchorNode.x());\n        }\n        else if (this._movingAnchorName === 'bottom-left') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.top-right').x(),\n                        y: this.findOne('.top-right').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +\n                    Math.pow(anchorNode.y() - comparePoint.y, 2));\n                var reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;\n                var reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                anchorNode.x(comparePoint.x - x);\n                anchorNode.y(comparePoint.y + y);\n            }\n            pos = anchorNode.position();\n            this.findOne('.top-left').x(pos.x);\n            this.findOne('.bottom-right').y(pos.y);\n        }\n        else if (this._movingAnchorName === 'bottom-center') {\n            this.findOne('.bottom-right').y(anchorNode.y());\n        }\n        else if (this._movingAnchorName === 'bottom-right') {\n            if (keepProportion) {\n                var comparePoint = centeredScaling\n                    ? {\n                        x: this.width() / 2,\n                        y: this.height() / 2,\n                    }\n                    : {\n                        x: this.findOne('.top-left').x(),\n                        y: this.findOne('.top-left').y(),\n                    };\n                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +\n                    Math.pow(anchorNode.y() - comparePoint.y, 2));\n                var reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;\n                var reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;\n                x = newHypotenuse * this.cos * reverseX;\n                y = newHypotenuse * this.sin * reverseY;\n                this.findOne('.bottom-right').x(comparePoint.x + x);\n                this.findOne('.bottom-right').y(comparePoint.y + y);\n            }\n        }\n        else {\n            console.error(new Error('Wrong position argument of selection resizer: ' +\n                this._movingAnchorName));\n        }\n        var centeredScaling = this.centeredScaling() || e.altKey;\n        if (centeredScaling) {\n            var topLeft = this.findOne('.top-left');\n            var bottomRight = this.findOne('.bottom-right');\n            var topOffsetX = topLeft.x();\n            var topOffsetY = topLeft.y();\n            var bottomOffsetX = this.getWidth() - bottomRight.x();\n            var bottomOffsetY = this.getHeight() - bottomRight.y();\n            bottomRight.move({\n                x: -topOffsetX,\n                y: -topOffsetY,\n            });\n            topLeft.move({\n                x: bottomOffsetX,\n                y: bottomOffsetY,\n            });\n        }\n        var absPos = this.findOne('.top-left').getAbsolutePosition();\n        x = absPos.x;\n        y = absPos.y;\n        var width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();\n        var height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();\n        this._fitNodesInto({\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            rotation: Konva.getAngle(this.rotation()),\n        }, e);\n    }\n    _handleMouseUp(e) {\n        this._removeEvents(e);\n    }\n    getAbsoluteTransform() {\n        return this.getTransform();\n    }\n    _removeEvents(e) {\n        if (this._transforming) {\n            this._transforming = false;\n            if (typeof window !== 'undefined') {\n                window.removeEventListener('mousemove', this._handleMouseMove);\n                window.removeEventListener('touchmove', this._handleMouseMove);\n                window.removeEventListener('mouseup', this._handleMouseUp, true);\n                window.removeEventListener('touchend', this._handleMouseUp, true);\n            }\n            var node = this.getNode();\n            this._fire('transformend', { evt: e, target: node });\n            if (node) {\n                this._nodes.forEach((target) => {\n                    target._fire('transformend', { evt: e, target });\n                });\n            }\n            this._movingAnchorName = null;\n        }\n    }\n    _fitNodesInto(newAttrs, evt) {\n        var oldAttrs = this._getNodeRect();\n        const minSize = 1;\n        if (Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {\n            this.update();\n            return;\n        }\n        if (Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {\n            this.update();\n            return;\n        }\n        const allowNegativeScale = this.flipEnabled();\n        var t = new Transform();\n        t.rotate(Konva.getAngle(this.rotation()));\n        if (this._movingAnchorName &&\n            newAttrs.width < 0 &&\n            this._movingAnchorName.indexOf('left') >= 0) {\n            const offset = t.point({\n                x: -this.padding() * 2,\n                y: 0,\n            });\n            newAttrs.x += offset.x;\n            newAttrs.y += offset.y;\n            newAttrs.width += this.padding() * 2;\n            this._movingAnchorName = this._movingAnchorName.replace('left', 'right');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        else if (this._movingAnchorName &&\n            newAttrs.width < 0 &&\n            this._movingAnchorName.indexOf('right') >= 0) {\n            const offset = t.point({\n                x: this.padding() * 2,\n                y: 0,\n            });\n            this._movingAnchorName = this._movingAnchorName.replace('right', 'left');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.width += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        if (this._movingAnchorName &&\n            newAttrs.height < 0 &&\n            this._movingAnchorName.indexOf('top') >= 0) {\n            const offset = t.point({\n                x: 0,\n                y: -this.padding() * 2,\n            });\n            newAttrs.x += offset.x;\n            newAttrs.y += offset.y;\n            this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.height += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        else if (this._movingAnchorName &&\n            newAttrs.height < 0 &&\n            this._movingAnchorName.indexOf('bottom') >= 0) {\n            const offset = t.point({\n                x: 0,\n                y: this.padding() * 2,\n            });\n            this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');\n            this._anchorDragOffset.x -= offset.x;\n            this._anchorDragOffset.y -= offset.y;\n            newAttrs.height += this.padding() * 2;\n            if (!allowNegativeScale) {\n                this.update();\n                return;\n            }\n        }\n        if (this.boundBoxFunc()) {\n            const bounded = this.boundBoxFunc()(oldAttrs, newAttrs);\n            if (bounded) {\n                newAttrs = bounded;\n            }\n            else {\n                Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');\n            }\n        }\n        const baseSize = 10000000;\n        const oldTr = new Transform();\n        oldTr.translate(oldAttrs.x, oldAttrs.y);\n        oldTr.rotate(oldAttrs.rotation);\n        oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);\n        const newTr = new Transform();\n        newTr.translate(newAttrs.x, newAttrs.y);\n        newTr.rotate(newAttrs.rotation);\n        newTr.scale(newAttrs.width / baseSize, newAttrs.height / baseSize);\n        const delta = newTr.multiply(oldTr.invert());\n        this._nodes.forEach((node) => {\n            var _a;\n            const parentTransform = node.getParent().getAbsoluteTransform();\n            const localTransform = node.getTransform().copy();\n            localTransform.translate(node.offsetX(), node.offsetY());\n            const newLocalTransform = new Transform();\n            newLocalTransform\n                .multiply(parentTransform.copy().invert())\n                .multiply(delta)\n                .multiply(parentTransform)\n                .multiply(localTransform);\n            const attrs = newLocalTransform.decompose();\n            node.setAttrs(attrs);\n            this._fire('transform', { evt: evt, target: node });\n            node._fire('transform', { evt: evt, target: node });\n            (_a = node.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n        });\n        this.rotation(Util._getRotation(newAttrs.rotation));\n        this._resetTransformCache();\n        this.update();\n        this.getLayer().batchDraw();\n    }\n    forceUpdate() {\n        this._resetTransformCache();\n        this.update();\n    }\n    _batchChangeChild(selector, attrs) {\n        const anchor = this.findOne(selector);\n        anchor.setAttrs(attrs);\n    }\n    update() {\n        var _a;\n        var attrs = this._getNodeRect();\n        this.rotation(Util._getRotation(attrs.rotation));\n        var width = attrs.width;\n        var height = attrs.height;\n        var enabledAnchors = this.enabledAnchors();\n        var resizeEnabled = this.resizeEnabled();\n        var padding = this.padding();\n        var anchorSize = this.anchorSize();\n        this.find('._anchor').forEach((node) => {\n            node.setAttrs({\n                width: anchorSize,\n                height: anchorSize,\n                offsetX: anchorSize / 2,\n                offsetY: anchorSize / 2,\n                stroke: this.anchorStroke(),\n                strokeWidth: this.anchorStrokeWidth(),\n                fill: this.anchorFill(),\n                cornerRadius: this.anchorCornerRadius(),\n            });\n        });\n        this._batchChangeChild('.top-left', {\n            x: 0,\n            y: 0,\n            offsetX: anchorSize / 2 + padding,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0,\n        });\n        this._batchChangeChild('.top-center', {\n            x: width / 2,\n            y: 0,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0,\n        });\n        this._batchChangeChild('.top-right', {\n            x: width,\n            y: 0,\n            offsetX: anchorSize / 2 - padding,\n            offsetY: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0,\n        });\n        this._batchChangeChild('.middle-left', {\n            x: 0,\n            y: height / 2,\n            offsetX: anchorSize / 2 + padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0,\n        });\n        this._batchChangeChild('.middle-right', {\n            x: width,\n            y: height / 2,\n            offsetX: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0,\n        });\n        this._batchChangeChild('.bottom-left', {\n            x: 0,\n            y: height,\n            offsetX: anchorSize / 2 + padding,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0,\n        });\n        this._batchChangeChild('.bottom-center', {\n            x: width / 2,\n            y: height,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0,\n        });\n        this._batchChangeChild('.bottom-right', {\n            x: width,\n            y: height,\n            offsetX: anchorSize / 2 - padding,\n            offsetY: anchorSize / 2 - padding,\n            visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0,\n        });\n        this._batchChangeChild('.rotater', {\n            x: width / 2,\n            y: -this.rotateAnchorOffset() * Util._sign(height) - padding,\n            visible: this.rotateEnabled(),\n        });\n        this._batchChangeChild('.back', {\n            width: width,\n            height: height,\n            visible: this.borderEnabled(),\n            stroke: this.borderStroke(),\n            strokeWidth: this.borderStrokeWidth(),\n            dash: this.borderDash(),\n            x: 0,\n            y: 0,\n        });\n        (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();\n    }\n    isTransforming() {\n        return this._transforming;\n    }\n    stopTransform() {\n        if (this._transforming) {\n            this._removeEvents();\n            var anchorNode = this.findOne('.' + this._movingAnchorName);\n            if (anchorNode) {\n                anchorNode.stopDrag();\n            }\n        }\n    }\n    destroy() {\n        if (this.getStage() && this._cursorChange) {\n            this.getStage().content && (this.getStage().content.style.cursor = '');\n        }\n        Group.prototype.destroy.call(this);\n        this.detach();\n        this._removeEvents();\n        return this;\n    }\n    toObject() {\n        return Node.prototype.toObject.call(this);\n    }\n}\nfunction validateAnchors(val) {\n    if (!(val instanceof Array)) {\n        Util.warn('enabledAnchors value should be an array');\n    }\n    if (val instanceof Array) {\n        val.forEach(function (name) {\n            if (ANCHORS_NAMES.indexOf(name) === -1) {\n                Util.warn('Unknown anchor name: ' +\n                    name +\n                    '. Available names are: ' +\n                    ANCHORS_NAMES.join(', '));\n            }\n        });\n    }\n    return val || [];\n}\nTransformer.prototype.className = 'Transformer';\n_registerNode(Transformer);\nFactory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);\nFactory.addGetterSetter(Transformer, 'flipEnabled', true, getBooleanValidator());\nFactory.addGetterSetter(Transformer, 'resizeEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorSize', 10, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotateEnabled', true);\nFactory.addGetterSetter(Transformer, 'rotationSnaps', []);\nFactory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderEnabled', true);\nFactory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'anchorFill', 'white');\nFactory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');\nFactory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'borderDash');\nFactory.addGetterSetter(Transformer, 'keepRatio', true);\nFactory.addGetterSetter(Transformer, 'centeredScaling', false);\nFactory.addGetterSetter(Transformer, 'ignoreStroke', false);\nFactory.addGetterSetter(Transformer, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Transformer, 'node');\nFactory.addGetterSetter(Transformer, 'nodes');\nFactory.addGetterSetter(Transformer, 'boundBoxFunc');\nFactory.addGetterSetter(Transformer, 'anchorDragBoundFunc');\nFactory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);\nFactory.addGetterSetter(Transformer, 'useSingleNodeRotation', true);\nFactory.backCompat(Transformer, {\n    lineEnabled: 'borderEnabled',\n    rotateHandlerOffset: 'rotateAnchorOffset',\n    enabledHandlers: 'enabledAnchors',\n});\n"]},"metadata":{},"sourceType":"module"}