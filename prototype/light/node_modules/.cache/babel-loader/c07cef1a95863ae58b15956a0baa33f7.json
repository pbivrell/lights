{"ast":null,"code":"var _jsxFileName = \"/Users/pbivrell/light/light/src/components/LightDetect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\"; //import \"./Login.css\";\n\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst baseURL = \"http://192.168.1.115\";\nconst timeout = 3 * 1000;\nexport default function LightDetect() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [failed, setFailed] = useState(false);\n  useEffect(() => {\n    onLoad();\n  }, []);\n\n  async function onLoad() {\n    setLoading(true);\n    axios.get(baseURL, {\n      timeout: timeout\n    }).then(response => {\n      setLoading(false);\n      console.log(response.data);\n    }).catch(resp => {\n      setLoading(false);\n      console.log(resp);\n      setFailed(true);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Searching for lights \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 6\n  }, this);\n}\n\n_s(LightDetect, \"cqtnifLW4qSd5d65U0rbFILZqiA=\");\n\n_c = LightDetect;\n\nvar _c;\n\n$RefreshReg$(_c, \"LightDetect\");","map":{"version":3,"sources":["/Users/pbivrell/light/light/src/components/LightDetect.js"],"names":["React","useState","useEffect","Form","Button","Spinner","axios","baseURL","timeout","LightDetect","loading","setLoading","failed","setFailed","onLoad","get","then","response","console","log","data","catch","resp"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,OAAP,MAAoB,yBAApB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AACA,MAAMC,OAAO,GAAG,sBAAhB;AACA,MAAMC,OAAO,GAAG,IAAI,IAApB;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACrC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,KAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACbY,IAAAA,MAAM;AACR,GAFQ,EAEN,EAFM,CAAT;;AAIA,iBAAeA,MAAf,GAAwB;AACvBH,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAL,IAAAA,KAAK,CAACS,GAAN,CAAUR,OAAV,EAAmB;AAAEC,MAAAA,OAAO,EAAEA;AAAX,KAAnB,EAAwCQ,IAAxC,CAA8CC,QAAD,IAAc;AAC1DN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACIO,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACD,KAHJ,EAGMC,KAHN,CAGaC,IAAD,IAAU;AACrBX,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ;AACAT,MAAAA,SAAS,CAAC,IAAD,CAAT;AACA,KAPD;AAQA;;AAED,sBACI;AAAA,cACAH,OAAO,gBACR;AAAA,8BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEC,QAAC,OAAD;AAAS,QAAA,SAAS,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA,oBADQ,gBAKJ;AANH;AAAA;AAAA;AAAA;AAAA,UADJ;AAUA;;GA9BuBD,W;;KAAAA,W","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\n//import \"./Login.css\";\nimport axios from \"axios\";\nconst baseURL = \"http://192.168.1.115\";\nconst timeout = 3 * 1000;\n\nexport default function LightDetect() {\n\tconst [loading, setLoading] = useState(false);\n\tconst [failed, setFailed] = useState(false);\n\n\tuseEffect(() => {\n  \t\tonLoad();\n\t}, []);\n\n\tasync function onLoad() {\n\t\tsetLoading(true);\n\t\taxios.get(baseURL, { timeout: timeout}).then((response) => {\n\t\t\tsetLoading(false);\n     \t\tconsole.log(response.data);\n    \t}).catch((resp) => {\n\t\t\tsetLoading(false);\n\t\t\tconsole.log(resp);\n\t\t\tsetFailed(true);\n\t\t});\n\t}\n\n\treturn (\n    \t<div>\n\t\t\t{ loading ? (\n\t\t\t\t<>\n\t\t\t\t\t<p> Searching for lights </p>\n\t\t\t\t\t<Spinner animation=\"border\" />\n\t\t\t\t</>\n\t\t\t) : (<></>) }\n    \t</div>\n  \t);\n}\n"]},"metadata":{},"sourceType":"module"}