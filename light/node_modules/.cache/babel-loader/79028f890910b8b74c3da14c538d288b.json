{"ast":null,"code":"import _classCallCheck from \"/Users/pbivrell/light/light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pbivrell/light/light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/pbivrell/light/light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/pbivrell/light/light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport var RegularPolygon = /*#__PURE__*/function (_Shape) {\n  _inherits(RegularPolygon, _Shape);\n\n  var _super = _createSuper(RegularPolygon);\n\n  function RegularPolygon() {\n    _classCallCheck(this, RegularPolygon);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RegularPolygon, [{\n    key: \"_sceneFunc\",\n    value: function _sceneFunc(context) {\n      var points = this._getPoints();\n\n      context.beginPath();\n      context.moveTo(points[0].x, points[0].y);\n\n      for (var n = 1; n < points.length; n++) {\n        context.lineTo(points[n].x, points[n].y);\n      }\n\n      context.closePath();\n      context.fillStrokeShape(this);\n    }\n  }, {\n    key: \"_getPoints\",\n    value: function _getPoints() {\n      var sides = this.attrs.sides;\n      var radius = this.attrs.radius || 0;\n      var points = [];\n\n      for (var n = 0; n < sides; n++) {\n        points.push({\n          x: radius * Math.sin(n * 2 * Math.PI / sides),\n          y: -1 * radius * Math.cos(n * 2 * Math.PI / sides)\n        });\n      }\n\n      return points;\n    }\n  }, {\n    key: \"getSelfRect\",\n    value: function getSelfRect() {\n      var points = this._getPoints();\n\n      var minX = points[0].x;\n      var maxX = points[0].y;\n      var minY = points[0].x;\n      var maxY = points[0].y;\n      points.forEach(function (point) {\n        minX = Math.min(minX, point.x);\n        maxX = Math.max(maxX, point.x);\n        minY = Math.min(minY, point.y);\n        maxY = Math.max(maxY, point.y);\n      });\n      return {\n        x: minX,\n        y: minY,\n        width: maxX - minX,\n        height: maxY - minY\n      };\n    }\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this.radius() * 2;\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this.radius() * 2;\n    }\n  }, {\n    key: \"setWidth\",\n    value: function setWidth(width) {\n      this.radius(width / 2);\n    }\n  }, {\n    key: \"setHeight\",\n    value: function setHeight(height) {\n      this.radius(height / 2);\n    }\n  }]);\n\n  return RegularPolygon;\n}(Shape);\nRegularPolygon.prototype.className = 'RegularPolygon';\nRegularPolygon.prototype._centroid = true;\nRegularPolygon.prototype._attrsAffectingSize = ['radius'];\n\n_registerNode(RegularPolygon);\n\nFactory.addGetterSetter(RegularPolygon, 'radius', 0, getNumberValidator());\nFactory.addGetterSetter(RegularPolygon, 'sides', 0, getNumberValidator());","map":{"version":3,"sources":["/Users/pbivrell/light/light/node_modules/konva/lib/shapes/RegularPolygon.js"],"names":["Factory","Shape","getNumberValidator","_registerNode","RegularPolygon","context","points","_getPoints","beginPath","moveTo","x","y","n","length","lineTo","closePath","fillStrokeShape","sides","attrs","radius","push","Math","sin","PI","cos","minX","maxX","minY","maxY","forEach","point","min","max","width","height","prototype","className","_centroid","_attrsAffectingSize","addGetterSetter"],"mappings":"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","sourcesContent":["import { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport class RegularPolygon extends Shape {\n    _sceneFunc(context) {\n        const points = this._getPoints();\n        context.beginPath();\n        context.moveTo(points[0].x, points[0].y);\n        for (var n = 1; n < points.length; n++) {\n            context.lineTo(points[n].x, points[n].y);\n        }\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    _getPoints() {\n        const sides = this.attrs.sides;\n        const radius = this.attrs.radius || 0;\n        const points = [];\n        for (var n = 0; n < sides; n++) {\n            points.push({\n                x: radius * Math.sin((n * 2 * Math.PI) / sides),\n                y: -1 * radius * Math.cos((n * 2 * Math.PI) / sides),\n            });\n        }\n        return points;\n    }\n    getSelfRect() {\n        const points = this._getPoints();\n        var minX = points[0].x;\n        var maxX = points[0].y;\n        var minY = points[0].x;\n        var maxY = points[0].y;\n        points.forEach((point) => {\n            minX = Math.min(minX, point.x);\n            maxX = Math.max(maxX, point.x);\n            minY = Math.min(minY, point.y);\n            maxY = Math.max(maxY, point.y);\n        });\n        return {\n            x: minX,\n            y: minY,\n            width: maxX - minX,\n            height: maxY - minY,\n        };\n    }\n    getWidth() {\n        return this.radius() * 2;\n    }\n    getHeight() {\n        return this.radius() * 2;\n    }\n    setWidth(width) {\n        this.radius(width / 2);\n    }\n    setHeight(height) {\n        this.radius(height / 2);\n    }\n}\nRegularPolygon.prototype.className = 'RegularPolygon';\nRegularPolygon.prototype._centroid = true;\nRegularPolygon.prototype._attrsAffectingSize = ['radius'];\n_registerNode(RegularPolygon);\nFactory.addGetterSetter(RegularPolygon, 'radius', 0, getNumberValidator());\nFactory.addGetterSetter(RegularPolygon, 'sides', 0, getNumberValidator());\n"]},"metadata":{},"sourceType":"module"}