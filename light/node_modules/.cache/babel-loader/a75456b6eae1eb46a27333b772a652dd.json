{"ast":null,"code":"var _jsxFileName = \"/Users/pbivrell/light/light/src/components/LightDetect.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst baseURL = process.env.REACT_APP_URL + \"/network\";\nconst timeout = 3 * 1000;\nexport default function LightDetect(_ref) {\n  _s();\n\n  let {\n    next\n  } = _ref;\n  const [loading, setLoading] = useState(false);\n  const [failed, setFailed] = useState(false);\n  const [retry, setRetry] = useState(false);\n  useEffect(() => {\n    onLoad();\n  }, [retry]);\n\n  async function onLoad() {\n    setLoading(true);\n    axios.get(baseURL, {\n      timeout: timeout\n    }).then(response => {\n      setLoading(false);\n    }).catch(resp => {\n      setLoading(false);\n      console.log(resp);\n      setFailed(true);\n    });\n  }\n\n  function clickRetry() {\n    setRetry(!retry);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [loading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Searching for lights \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true) : !failed ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Failed to find new lights\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: clickRetry,\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Found new lights!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: next,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => {\n        next(-1);\n      },\n      children: \"Back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 6\n  }, this);\n}\n\n_s(LightDetect, \"6ORL5LrSSzE7w+hAQTbbE1uSB8o=\");\n\n_c = LightDetect;\n\nvar _c;\n\n$RefreshReg$(_c, \"LightDetect\");","map":{"version":3,"sources":["/Users/pbivrell/light/light/src/components/LightDetect.js"],"names":["React","useState","useEffect","Form","Button","Spinner","axios","baseURL","process","env","REACT_APP_URL","timeout","LightDetect","next","loading","setLoading","failed","setFailed","retry","setRetry","onLoad","get","then","response","catch","resp","console","log","clickRetry"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,aAAZ,GAA4B,UAA5C;AACA,MAAMC,OAAO,GAAG,IAAI,IAApB;AAEA,eAAe,SAASC,WAAT,OAA6B;AAAA;;AAAA,MAAR;AAACC,IAAAA;AAAD,GAAQ;AAC3C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACe,MAAD,EAASC,SAAT,IAAsBhB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACiB,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,KAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACbkB,IAAAA,MAAM;AACR,GAFQ,EAEN,CAACF,KAAD,CAFM,CAAT;;AAIA,iBAAeE,MAAf,GAAwB;AACvBL,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAT,IAAAA,KAAK,CAACe,GAAN,CAAUd,OAAV,EAAmB;AAAEI,MAAAA,OAAO,EAAEA;AAAX,KAAnB,EAAwCW,IAAxC,CAA8CC,QAAD,IAAc;AAC1DR,MAAAA,UAAU,CAAC,KAAD,CAAV;AACI,KAFL,EAEOS,KAFP,CAEcC,IAAD,IAAU;AACtBV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAR,MAAAA,SAAS,CAAC,IAAD,CAAT;AACA,KAND;AAOA;;AAED,WAASW,UAAT,GAAsB;AACrBT,IAAAA,QAAQ,CAAC,CAACD,KAAF,CAAR;AACA;;AAED,sBACI;AAAA,eACAJ,OAAO,gBACR;AAAA,8BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEC,QAAC,OAAD;AAAS,QAAA,SAAS,EAAC;AAAnB;AAAA;AAAA;AAAA;AAAA,cAFD,eAIC;AAAA;AAAA;AAAA;AAAA,cAJD;AAAA,oBADQ,GAOL,CAACE,MAAD,gBACH;AAAA,8BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEC,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEY,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA,oBADG,gBAMH;AAAA,8BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEC,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEf,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFD;AAAA,oBAdC,eAoBF,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,MAAM;AAACA,QAAAA,IAAI,CAAC,CAAC,CAAF,CAAJ;AAAS,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YApBE;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBA;;GAhDuBD,W;;KAAAA,W","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport axios from \"axios\";\nconst baseURL = process.env.REACT_APP_URL + \"/network\" ;\nconst timeout = 3 * 1000;\n\nexport default function LightDetect({next}) {\n\tconst [loading, setLoading] = useState(false);\n\tconst [failed, setFailed] = useState(false);\n\tconst [retry, setRetry] = useState(false);\n\n\tuseEffect(() => {\n  \t\tonLoad();\n\t}, [retry]);\n\n\tasync function onLoad() {\n\t\tsetLoading(true);\n\t\taxios.get(baseURL, { timeout: timeout}).then((response) => {\n\t\t\tsetLoading(false);\n    \t\t}).catch((resp) => {\n\t\t\tsetLoading(false);\n\t\t\tconsole.log(resp);\n\t\t\tsetFailed(true);\n\t\t});\n\t}\n\n\tfunction clickRetry() {\n\t\tsetRetry(!retry);\n\t}\n\n\treturn (\n    \t<div>\n\t\t\t{ loading ? (\n\t\t\t\t<>\n\t\t\t\t\t<p> Searching for lights </p>\n\t\t\t\t\t<Spinner animation=\"border\">\n\t\t\t\t\t</Spinner>\n\t\t\t\t\t<br/>\n\t\t\t\t</>\n\t\t\t) : !failed ? (\n\t\t\t\t<>\n\t\t\t\t\t<p>Failed to find new lights</p>\n\t\t\t\t\t<Button onClick={clickRetry}>Retry</Button> \n\t\t\t\t</>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<p>Found new lights!</p>\n\t\t\t\t\t<Button onClick={next}>Next</Button>\t\n\t\t\t    \t</> \n\t\t\t) \n\t\t\t}\n\t\t\t<Button onClick={() => {next(-1)}}>Back</Button>\n    \t</div>\n  \t);\n}\n"]},"metadata":{},"sourceType":"module"}