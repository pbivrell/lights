{"ast":null,"code":"var _jsxFileName = \"/Users/pbivrell/light/light/src/components/Picker2.js\",\n    _s = $RefreshSig$();\n\nimport './Picker2.css';\nimport React, { useState } from \"react\";\nimport { HuePicker, AlphaPicker } from 'react-color';\nimport blub from '../res/Bulb.png';\nimport offblub from '../res/OffBulb.png';\nimport disconnectedBulb from '../res/DisconnectedBulb.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Picker2(_ref) {\n  _s();\n\n  let {\n    initalState,\n    propgateColor\n  } = _ref;\n  const [state, setState] = useState(initalState);\n  const [color, setColor] = useState({\n    hsl: {\n      a: 1\n    },\n    rgb: {},\n    hex: \"\"\n  });\n\n  function toggleLight() {\n    if (state == 2) {\n      return;\n    } else if (state == 1) {\n      setState(0);\n    } else {\n      setState(1);\n    }\n  }\n\n  function onColorChange(hue, c) {\n    console.log(c);\n    let hsl = c.hsl;\n\n    if (!hue) {\n      hsl.a = color.hsl.a;\n    }\n\n    setColor({\n      hsl: hsl,\n      rgb: c.rgb,\n      hex: `rgba(${c.rgb.r},${c.rgb.g},${c.rgb.b},${hsl.a}`\n    });\n  }\n\n  function generateBinary(color, pixels) {\n    let data = new Uint8Array((2 + pixels) * 8);\n    let bytes = getInt64Bytes(pixels);\n    let count = bytes[bytes.length - 2] << 8 | bytes[bytes.length - 1];\n    data[0] = 0x3;\n    data[1] = bytes[bytes.length - 1];\n    data[2] = bytes[bytes.length - 2];\n\n    for (let i = 0; i < pixels; i++) {\n      let bytes = getInt64Bytes(i);\n      data[(i + 1) * 8] = 0x1;\n      data[(i + 1) * 8 + 1] = color.r;\n      data[(i + 1) * 8 + 2] = color.g;\n      data[(i + 1) * 8 + 3] = color.b;\n      data[(i + 1) * 8 + 4] = bytes[bytes.length - 1];\n      data[(i + 1) * 8 + 5] = bytes[bytes.length - 2];\n    }\n\n    data[8 + pixels * 8] = 0x2;\n    data[8 + pixels * 8 + 1] = 200;\n    data[8 + pixels * 8 + 2] = 0;\n    data[8 + pixels * 8 + 3] = 0;\n    data[8 + pixels * 8 + 4] = 0;\n    console.log(data);\n    return data;\n  }\n\n  function getInt64Bytes(x) {\n    let y = Math.floor(x / 2 ** 32);\n    return [y, y << 8, y << 16, y << 24, x, x << 8, x << 16, x << 24].map(z => z >>> 24);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Picker\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Button\",\n      style: {\n        background: color.hex\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"ButtonImage\",\n        src: logo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(HuePicker, {\n      className: \"ButtonImage\",\n      color: color.hsl,\n      onChangeComplete: c => onColorChange(false, c)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(AlphaPicker, {\n      className: \"ButtonImage\",\n      color: color.hsl,\n      onChangeComplete: c => onColorChange(true, c)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 2\n  }, this);\n}\n\n_s(Picker2, \"zlzhNMm9KiZoPcEMjQNiuEilry4=\");\n\n_c = Picker2;\nexport default Picker2;\n\nvar _c;\n\n$RefreshReg$(_c, \"Picker2\");","map":{"version":3,"sources":["/Users/pbivrell/light/light/src/components/Picker2.js"],"names":["React","useState","HuePicker","AlphaPicker","blub","offblub","disconnectedBulb","Picker2","initalState","propgateColor","state","setState","color","setColor","hsl","a","rgb","hex","toggleLight","onColorChange","hue","c","console","log","r","g","b","generateBinary","pixels","data","Uint8Array","bytes","getInt64Bytes","count","length","i","x","y","Math","floor","map","z","background","logo"],"mappings":"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","sourcesContent":["import './Picker2.css';\nimport React, { useState } from \"react\";\nimport { HuePicker, AlphaPicker } from 'react-color'\nimport blub from '../res/Bulb.png';\nimport offblub from '../res/OffBulb.png';\nimport disconnectedBulb from '../res/DisconnectedBulb.png';\n\n\nfunction Picker2({initalState, propgateColor}) {\n\n\tconst [state, setState] = useState(initalState);\n\n  \tconst [color, setColor] = useState({ hsl: {a: 1}, rgb: {}, hex: \"\"});\n\n\tfunction toggleLight() {\n\t\tif (state == 2) {\n\t\t\treturn;\n\t\t}else if(state == 1) {\n\t\t\tsetState(0);\n\t\t}else {\n\t\t\tsetState(1);\n\t\t}\n\t}\n\n\tfunction onColorChange(hue, c) {\n\n\t\tconsole.log(c);\n\n\t\tlet hsl = c.hsl;\n\n\t\tif(!hue) {\n\t\t\thsl.a = color.hsl.a;\n\t\t}\n\t\tsetColor({hsl: hsl, rgb: c.rgb, hex: `rgba(${c.rgb.r},${c.rgb.g},${c.rgb.b},${hsl.a}`});\n\t}\n\t\n\t\n\tfunction generateBinary(color, pixels) {\n\t\t\n\t\tlet data = new Uint8Array((2 + pixels) * 8);\n\t\tlet bytes = getInt64Bytes(pixels);\n\n\t\tlet count = (bytes[bytes.length-2] << 8) | bytes[bytes.length-1];\n\t\t\n\t\tdata[0] = 0x3;\n\t\tdata[1] = bytes[bytes.length-1];\n\t\tdata[2] = bytes[bytes.length-2];\n\n\t\tfor (let i = 0; i < pixels; i++) {\n\t\t\tlet bytes = getInt64Bytes(i);\n\t\t \tdata[(i + 1) * 8] = 0x1;\n\t\t\tdata[(i + 1) * 8 + 1] = color.r;\n\t\t\tdata[(i + 1) * 8 + 2] = color.g;\n\t\t\tdata[(i + 1) * 8 + 3] = color.b;\n\t\t\tdata[(i + 1) * 8 + 4] = bytes[bytes.length-1];\n\t\t\tdata[(i + 1) * 8 + 5] = bytes[bytes.length-2];\n\t\t}\n\n\t\tdata[8 + (pixels * 8)] = 0x2;\n\t\tdata[8 + (pixels * 8) + 1] = 200;\n\t\tdata[8 + (pixels * 8) + 2] = 0;\n\t\tdata[8 + (pixels * 8) + 3] = 0;\n\t\tdata[8 + (pixels * 8) + 4] = 0;\n\n\n\t\tconsole.log(data);\n\t\treturn data;\n\n\t}\n\n\tfunction getInt64Bytes(x) {\n  \t\tlet y= Math.floor(x/2**32);\n  \t\treturn [y,(y<<8),(y<<16),(y<<24), x,(x<<8),(x<<16),(x<<24)].map(z=> z>>>24)\n\t}\n\n\treturn (\n\t<div className=\"Picker\">\n\t\t<div className=\"Button\" style={{background: color.hex}}>\n\t\t\t<img className=\"ButtonImage\" src={logo}></img>\n\t\t</div>\n\t\t<HuePicker className=\"ButtonImage\" color={color.hsl} onChangeComplete={(c) => onColorChange(false, c)}/>\n\t\t<br/>\n                <AlphaPicker className=\"ButtonImage\" color={color.hsl} onChangeComplete={(c) => onColorChange(true, c)}/>\n\t</div>\n  \t);\n}\n\n\nexport default Picker2;\n"]},"metadata":{},"sourceType":"module"}