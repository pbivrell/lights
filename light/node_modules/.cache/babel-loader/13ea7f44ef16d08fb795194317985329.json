{"ast":null,"code":"import _classCallCheck from \"/Users/pbivrell/light/light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/pbivrell/light/light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/pbivrell/light/light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/pbivrell/light/light/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Util } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator, getStringValidator, getNumberOrAutoValidator, getBooleanValidator } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport function stringToArray(string) {\n  return Array.from(string);\n}\nvar AUTO = 'auto',\n    CENTER = 'center',\n    JUSTIFY = 'justify',\n    CHANGE_KONVA = 'Change.konva',\n    CONTEXT_2D = '2d',\n    DASH = '-',\n    LEFT = 'left',\n    TEXT = 'text',\n    TEXT_UPPER = 'Text',\n    TOP = 'top',\n    BOTTOM = 'bottom',\n    MIDDLE = 'middle',\n    NORMAL = 'normal',\n    PX_SPACE = 'px ',\n    SPACE = ' ',\n    RIGHT = 'right',\n    WORD = 'word',\n    CHAR = 'char',\n    NONE = 'none',\n    ELLIPSIS = 'â€¦',\n    ATTR_CHANGE_LIST = ['fontFamily', 'fontSize', 'fontStyle', 'fontVariant', 'padding', 'align', 'verticalAlign', 'lineHeight', 'text', 'width', 'height', 'wrap', 'ellipsis', 'letterSpacing'],\n    attrChangeListLen = ATTR_CHANGE_LIST.length;\n\nfunction normalizeFontFamily(fontFamily) {\n  return fontFamily.split(',').map(function (family) {\n    family = family.trim();\n    var hasSpace = family.indexOf(' ') >= 0;\n    var hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n\n    if (hasSpace && !hasQuotes) {\n      family = \"\\\"\".concat(family, \"\\\"\");\n    }\n\n    return family;\n  }).join(', ');\n}\n\nvar dummyContext;\n\nfunction getDummyContext() {\n  if (dummyContext) {\n    return dummyContext;\n  }\n\n  dummyContext = Util.createCanvasElement().getContext(CONTEXT_2D);\n  return dummyContext;\n}\n\nfunction _fillFunc(context) {\n  context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\n\nfunction _strokeFunc(context) {\n  context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\n\nfunction checkDefaultFill(config) {\n  config = config || {};\n\n  if (!config.fillLinearGradientColorStops && !config.fillRadialGradientColorStops && !config.fillPatternImage) {\n    config.fill = config.fill || 'black';\n  }\n\n  return config;\n}\n\nexport var Text = /*#__PURE__*/function (_Shape) {\n  _inherits(Text, _Shape);\n\n  var _super = _createSuper(Text);\n\n  function Text(config) {\n    var _this;\n\n    _classCallCheck(this, Text);\n\n    _this = _super.call(this, checkDefaultFill(config));\n    _this._partialTextX = 0;\n    _this._partialTextY = 0;\n\n    for (var n = 0; n < attrChangeListLen; n++) {\n      _this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, _this._setTextData);\n    }\n\n    _this._setTextData();\n\n    return _this;\n  }\n\n  _createClass(Text, [{\n    key: \"_sceneFunc\",\n    value: function _sceneFunc(context) {\n      var textArr = this.textArr,\n          textArrLen = textArr.length;\n\n      if (!this.text()) {\n        return;\n      }\n\n      var padding = this.padding(),\n          fontSize = this.fontSize(),\n          lineHeightPx = this.lineHeight() * fontSize,\n          verticalAlign = this.verticalAlign(),\n          alignY = 0,\n          align = this.align(),\n          totalWidth = this.getWidth(),\n          letterSpacing = this.letterSpacing(),\n          fill = this.fill(),\n          textDecoration = this.textDecoration(),\n          shouldUnderline = textDecoration.indexOf('underline') !== -1,\n          shouldLineThrough = textDecoration.indexOf('line-through') !== -1,\n          n;\n      var translateY = 0;\n      var translateY = lineHeightPx / 2;\n      var lineTranslateX = 0;\n      var lineTranslateY = 0;\n      context.setAttr('font', this._getContextFont());\n      context.setAttr('textBaseline', MIDDLE);\n      context.setAttr('textAlign', LEFT);\n\n      if (verticalAlign === MIDDLE) {\n        alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n      } else if (verticalAlign === BOTTOM) {\n        alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n      }\n\n      context.translate(padding, alignY + padding);\n\n      for (n = 0; n < textArrLen; n++) {\n        var lineTranslateX = 0;\n        var lineTranslateY = 0;\n        var obj = textArr[n],\n            text = obj.text,\n            width = obj.width,\n            lastLine = n !== textArrLen - 1,\n            spacesNumber,\n            oneWord,\n            lineWidth;\n        context.save();\n\n        if (align === RIGHT) {\n          lineTranslateX += totalWidth - width - padding * 2;\n        } else if (align === CENTER) {\n          lineTranslateX += (totalWidth - width - padding * 2) / 2;\n        }\n\n        if (shouldUnderline) {\n          context.save();\n          context.beginPath();\n          context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));\n          spacesNumber = text.split(' ').length - 1;\n          oneWord = spacesNumber === 0;\n          lineWidth = align === JUSTIFY && lastLine && !oneWord ? totalWidth - padding * 2 : width;\n          context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));\n          context.lineWidth = fontSize / 15;\n          context.strokeStyle = fill;\n          context.stroke();\n          context.restore();\n        }\n\n        if (shouldLineThrough) {\n          context.save();\n          context.beginPath();\n          context.moveTo(lineTranslateX, translateY + lineTranslateY);\n          spacesNumber = text.split(' ').length - 1;\n          oneWord = spacesNumber === 0;\n          lineWidth = align === JUSTIFY && lastLine && !oneWord ? totalWidth - padding * 2 : width;\n          context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);\n          context.lineWidth = fontSize / 15;\n          context.strokeStyle = fill;\n          context.stroke();\n          context.restore();\n        }\n\n        if (letterSpacing !== 0 || align === JUSTIFY) {\n          spacesNumber = text.split(' ').length - 1;\n          var array = stringToArray(text);\n\n          for (var li = 0; li < array.length; li++) {\n            var letter = array[li];\n\n            if (letter === ' ' && n !== textArrLen - 1 && align === JUSTIFY) {\n              lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n            }\n\n            this._partialTextX = lineTranslateX;\n            this._partialTextY = translateY + lineTranslateY;\n            this._partialText = letter;\n            context.fillStrokeShape(this);\n            lineTranslateX += this.measureSize(letter).width + letterSpacing;\n          }\n        } else {\n          this._partialTextX = lineTranslateX;\n          this._partialTextY = translateY + lineTranslateY;\n          this._partialText = text;\n          context.fillStrokeShape(this);\n        }\n\n        context.restore();\n\n        if (textArrLen > 1) {\n          translateY += lineHeightPx;\n        }\n      }\n    }\n  }, {\n    key: \"_hitFunc\",\n    value: function _hitFunc(context) {\n      var width = this.getWidth(),\n          height = this.getHeight();\n      context.beginPath();\n      context.rect(0, 0, width, height);\n      context.closePath();\n      context.fillStrokeShape(this);\n    }\n  }, {\n    key: \"setText\",\n    value: function setText(text) {\n      var str = Util._isString(text) ? text : text === null || text === undefined ? '' : text + '';\n\n      this._setAttr(TEXT, str);\n\n      return this;\n    }\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n      return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n    }\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n      return isAuto ? this.fontSize() * this.textArr.length * this.lineHeight() + this.padding() * 2 : this.attrs.height;\n    }\n  }, {\n    key: \"getTextWidth\",\n    value: function getTextWidth() {\n      return this.textWidth;\n    }\n  }, {\n    key: \"getTextHeight\",\n    value: function getTextHeight() {\n      Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n      return this.textHeight;\n    }\n  }, {\n    key: \"measureSize\",\n    value: function measureSize(text) {\n      var _context = getDummyContext(),\n          fontSize = this.fontSize(),\n          metrics;\n\n      _context.save();\n\n      _context.font = this._getContextFont();\n      metrics = _context.measureText(text);\n\n      _context.restore();\n\n      return {\n        width: metrics.width,\n        height: fontSize\n      };\n    }\n  }, {\n    key: \"_getContextFont\",\n    value: function _getContextFont() {\n      return this.fontStyle() + SPACE + this.fontVariant() + SPACE + (this.fontSize() + PX_SPACE) + normalizeFontFamily(this.fontFamily());\n    }\n  }, {\n    key: \"_addTextLine\",\n    value: function _addTextLine(line) {\n      if (this.align() === JUSTIFY) {\n        line = line.trim();\n      }\n\n      var width = this._getTextWidth(line);\n\n      return this.textArr.push({\n        text: line,\n        width: width\n      });\n    }\n  }, {\n    key: \"_getTextWidth\",\n    value: function _getTextWidth(text) {\n      var letterSpacing = this.letterSpacing();\n      var length = text.length;\n      return getDummyContext().measureText(text).width + (length ? letterSpacing * (length - 1) : 0);\n    }\n  }, {\n    key: \"_setTextData\",\n    value: function _setTextData() {\n      var lines = this.text().split('\\n'),\n          fontSize = +this.fontSize(),\n          textWidth = 0,\n          lineHeightPx = this.lineHeight() * fontSize,\n          width = this.attrs.width,\n          height = this.attrs.height,\n          fixedWidth = width !== AUTO && width !== undefined,\n          fixedHeight = height !== AUTO && height !== undefined,\n          padding = this.padding(),\n          maxWidth = width - padding * 2,\n          maxHeightPx = height - padding * 2,\n          currentHeightPx = 0,\n          wrap = this.wrap(),\n          shouldWrap = wrap !== NONE,\n          wrapAtWord = wrap !== CHAR && shouldWrap,\n          shouldAddEllipsis = this.ellipsis();\n      this.textArr = [];\n      getDummyContext().font = this._getContextFont();\n      var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\n\n      for (var i = 0, max = lines.length; i < max; ++i) {\n        var line = lines[i];\n\n        var lineWidth = this._getTextWidth(line);\n\n        if (fixedWidth && lineWidth > maxWidth) {\n          while (line.length > 0) {\n            var low = 0,\n                high = line.length,\n                match = '',\n                matchWidth = 0;\n\n            while (low < high) {\n              var mid = low + high >>> 1,\n                  substr = line.slice(0, mid + 1),\n                  substrWidth = this._getTextWidth(substr) + additionalWidth;\n\n              if (substrWidth <= maxWidth) {\n                low = mid + 1;\n                match = substr;\n                matchWidth = substrWidth;\n              } else {\n                high = mid;\n              }\n            }\n\n            if (match) {\n              if (wrapAtWord) {\n                var wrapIndex;\n                var nextChar = line[match.length];\n                var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n\n                if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                  wrapIndex = match.length;\n                } else {\n                  wrapIndex = Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) + 1;\n                }\n\n                if (wrapIndex > 0) {\n                  low = wrapIndex;\n                  match = match.slice(0, low);\n                  matchWidth = this._getTextWidth(match);\n                }\n              }\n\n              match = match.trimRight();\n\n              this._addTextLine(match);\n\n              textWidth = Math.max(textWidth, matchWidth);\n              currentHeightPx += lineHeightPx;\n\n              if (!shouldWrap || fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n                var lastLine = this.textArr[this.textArr.length - 1];\n\n                if (lastLine) {\n                  if (shouldAddEllipsis) {\n                    var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n\n                    if (!haveSpace) {\n                      lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n                    }\n\n                    this.textArr.splice(this.textArr.length - 1, 1);\n\n                    this._addTextLine(lastLine.text + ELLIPSIS);\n                  }\n                }\n\n                break;\n              }\n\n              line = line.slice(low);\n              line = line.trimLeft();\n\n              if (line.length > 0) {\n                lineWidth = this._getTextWidth(line);\n\n                if (lineWidth <= maxWidth) {\n                  this._addTextLine(line);\n\n                  currentHeightPx += lineHeightPx;\n                  textWidth = Math.max(textWidth, lineWidth);\n                  break;\n                }\n              }\n            } else {\n              break;\n            }\n          }\n        } else {\n          this._addTextLine(line);\n\n          currentHeightPx += lineHeightPx;\n          textWidth = Math.max(textWidth, lineWidth);\n        }\n\n        if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n          break;\n        }\n      }\n\n      this.textHeight = fontSize;\n      this.textWidth = textWidth;\n    }\n  }, {\n    key: \"getStrokeScaleEnabled\",\n    value: function getStrokeScaleEnabled() {\n      return true;\n    }\n  }]);\n\n  return Text;\n}(Shape);\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = ['text', 'fontSize', 'padding', 'wrap', 'lineHeight', 'letterSpacing'];\n\n_registerNode(Text);\n\nFactory.overWriteSetter(Text, 'width', getNumberOrAutoValidator());\nFactory.overWriteSetter(Text, 'height', getNumberOrAutoValidator());\nFactory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory.addGetterSetter(Text, 'fontSize', 12, getNumberValidator());\nFactory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory.addGetterSetter(Text, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'align', LEFT);\nFactory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory.addGetterSetter(Text, 'lineHeight', 1, getNumberValidator());\nFactory.addGetterSetter(Text, 'wrap', WORD);\nFactory.addGetterSetter(Text, 'ellipsis', false, getBooleanValidator());\nFactory.addGetterSetter(Text, 'letterSpacing', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'text', '', getStringValidator());\nFactory.addGetterSetter(Text, 'textDecoration', '');","map":{"version":3,"sources":["/Users/pbivrell/light/light/node_modules/konva/lib/shapes/Text.js"],"names":["Util","Factory","Shape","getNumberValidator","getStringValidator","getNumberOrAutoValidator","getBooleanValidator","_registerNode","stringToArray","string","Array","from","AUTO","CENTER","JUSTIFY","CHANGE_KONVA","CONTEXT_2D","DASH","LEFT","TEXT","TEXT_UPPER","TOP","BOTTOM","MIDDLE","NORMAL","PX_SPACE","SPACE","RIGHT","WORD","CHAR","NONE","ELLIPSIS","ATTR_CHANGE_LIST","attrChangeListLen","length","normalizeFontFamily","fontFamily","split","map","family","trim","hasSpace","indexOf","hasQuotes","join","dummyContext","getDummyContext","createCanvasElement","getContext","_fillFunc","context","fillText","_partialText","_partialTextX","_partialTextY","_strokeFunc","strokeText","checkDefaultFill","config","fillLinearGradientColorStops","fillRadialGradientColorStops","fillPatternImage","fill","Text","n","on","_setTextData","textArr","textArrLen","text","padding","fontSize","lineHeightPx","lineHeight","verticalAlign","alignY","align","totalWidth","getWidth","letterSpacing","textDecoration","shouldUnderline","shouldLineThrough","translateY","lineTranslateX","lineTranslateY","setAttr","_getContextFont","getHeight","translate","obj","width","lastLine","spacesNumber","oneWord","lineWidth","save","beginPath","moveTo","Math","round","lineTo","strokeStyle","stroke","restore","array","li","letter","fillStrokeShape","measureSize","height","rect","closePath","str","_isString","undefined","_setAttr","isAuto","attrs","getTextWidth","textWidth","warn","textHeight","_context","metrics","font","measureText","fontStyle","fontVariant","line","_getTextWidth","push","lines","fixedWidth","fixedHeight","maxWidth","maxHeightPx","currentHeightPx","wrap","shouldWrap","wrapAtWord","shouldAddEllipsis","ellipsis","additionalWidth","i","max","low","high","match","matchWidth","mid","substr","slice","substrWidth","wrapIndex","nextChar","nextIsSpaceOrDash","lastIndexOf","trimRight","_addTextLine","haveSpace","splice","trimLeft","prototype","className","_attrsAffectingSize","overWriteSetter","addGetterSetter"],"mappings":";;;;AAAA,SAASA,IAAT,QAAqB,YAArB;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,EAAiDC,wBAAjD,EAA2EC,mBAA3E,QAAuG,kBAAvG;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,OAAO,SAASC,aAAT,CAAuBC,MAAvB,EAA+B;AAClC,SAAOC,KAAK,CAACC,IAAN,CAAWF,MAAX,CAAP;AACH;AACD,IAAIG,IAAI,GAAG,MAAX;AAAA,IAAmBC,MAAM,GAAG,QAA5B;AAAA,IAAsCC,OAAO,GAAG,SAAhD;AAAA,IAA2DC,YAAY,GAAG,cAA1E;AAAA,IAA0FC,UAAU,GAAG,IAAvG;AAAA,IAA6GC,IAAI,GAAG,GAApH;AAAA,IAAyHC,IAAI,GAAG,MAAhI;AAAA,IAAwIC,IAAI,GAAG,MAA/I;AAAA,IAAuJC,UAAU,GAAG,MAApK;AAAA,IAA4KC,GAAG,GAAG,KAAlL;AAAA,IAAyLC,MAAM,GAAG,QAAlM;AAAA,IAA4MC,MAAM,GAAG,QAArN;AAAA,IAA+NC,MAAM,GAAG,QAAxO;AAAA,IAAkPC,QAAQ,GAAG,KAA7P;AAAA,IAAoQC,KAAK,GAAG,GAA5Q;AAAA,IAAiRC,KAAK,GAAG,OAAzR;AAAA,IAAkSC,IAAI,GAAG,MAAzS;AAAA,IAAiTC,IAAI,GAAG,MAAxT;AAAA,IAAgUC,IAAI,GAAG,MAAvU;AAAA,IAA+UC,QAAQ,GAAG,GAA1V;AAAA,IAA+VC,gBAAgB,GAAG,CAC9W,YAD8W,EAE9W,UAF8W,EAG9W,WAH8W,EAI9W,aAJ8W,EAK9W,SAL8W,EAM9W,OAN8W,EAO9W,eAP8W,EAQ9W,YAR8W,EAS9W,MAT8W,EAU9W,OAV8W,EAW9W,QAX8W,EAY9W,MAZ8W,EAa9W,UAb8W,EAc9W,eAd8W,CAAlX;AAAA,IAeGC,iBAAiB,GAAGD,gBAAgB,CAACE,MAfxC;;AAgBA,SAASC,mBAAT,CAA6BC,UAA7B,EAAyC;AACrC,SAAOA,UAAU,CACZC,KADE,CACI,GADJ,EAEFC,GAFE,CAEE,UAACC,MAAD,EAAY;AACjBA,IAAAA,MAAM,GAAGA,MAAM,CAACC,IAAP,EAAT;AACA,QAAMC,QAAQ,GAAGF,MAAM,CAACG,OAAP,CAAe,GAAf,KAAuB,CAAxC;AACA,QAAMC,SAAS,GAAGJ,MAAM,CAACG,OAAP,CAAe,GAAf,KAAuB,CAAvB,IAA4BH,MAAM,CAACG,OAAP,CAAe,GAAf,KAAuB,CAArE;;AACA,QAAID,QAAQ,IAAI,CAACE,SAAjB,EAA4B;AACxBJ,MAAAA,MAAM,eAAOA,MAAP,OAAN;AACH;;AACD,WAAOA,MAAP;AACH,GAVM,EAWFK,IAXE,CAWG,IAXH,CAAP;AAYH;;AACD,IAAIC,YAAJ;;AACA,SAASC,eAAT,GAA2B;AACvB,MAAID,YAAJ,EAAkB;AACd,WAAOA,YAAP;AACH;;AACDA,EAAAA,YAAY,GAAG7C,IAAI,CAAC+C,mBAAL,GAA2BC,UAA3B,CAAsChC,UAAtC,CAAf;AACA,SAAO6B,YAAP;AACH;;AACD,SAASI,SAAT,CAAmBC,OAAnB,EAA4B;AACxBA,EAAAA,OAAO,CAACC,QAAR,CAAiB,KAAKC,YAAtB,EAAoC,KAAKC,aAAzC,EAAwD,KAAKC,aAA7D;AACH;;AACD,SAASC,WAAT,CAAqBL,OAArB,EAA8B;AAC1BA,EAAAA,OAAO,CAACM,UAAR,CAAmB,KAAKJ,YAAxB,EAAsC,KAAKC,aAA3C,EAA0D,KAAKC,aAA/D;AACH;;AACD,SAASG,gBAAT,CAA0BC,MAA1B,EAAkC;AAC9BA,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;;AACA,MAAI,CAACA,MAAM,CAACC,4BAAR,IACA,CAACD,MAAM,CAACE,4BADR,IAEA,CAACF,MAAM,CAACG,gBAFZ,EAE8B;AAC1BH,IAAAA,MAAM,CAACI,IAAP,GAAcJ,MAAM,CAACI,IAAP,IAAe,OAA7B;AACH;;AACD,SAAOJ,MAAP;AACH;;AACD,WAAaK,IAAb;AAAA;;AAAA;;AACI,gBAAYL,MAAZ,EAAoB;AAAA;;AAAA;;AAChB,8BAAMD,gBAAgB,CAACC,MAAD,CAAtB;AACA,UAAKL,aAAL,GAAqB,CAArB;AACA,UAAKC,aAAL,GAAqB,CAArB;;AACA,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG/B,iBAApB,EAAuC+B,CAAC,EAAxC,EAA4C;AACxC,YAAKC,EAAL,CAAQjC,gBAAgB,CAACgC,CAAD,CAAhB,GAAsBjD,YAA9B,EAA4C,MAAKmD,YAAjD;AACH;;AACD,UAAKA,YAAL;;AAPgB;AAQnB;;AATL;AAAA;AAAA,WAUI,oBAAWhB,OAAX,EAAoB;AAChB,UAAIiB,OAAO,GAAG,KAAKA,OAAnB;AAAA,UAA4BC,UAAU,GAAGD,OAAO,CAACjC,MAAjD;;AACA,UAAI,CAAC,KAAKmC,IAAL,EAAL,EAAkB;AACd;AACH;;AACD,UAAIC,OAAO,GAAG,KAAKA,OAAL,EAAd;AAAA,UAA8BC,QAAQ,GAAG,KAAKA,QAAL,EAAzC;AAAA,UAA0DC,YAAY,GAAG,KAAKC,UAAL,KAAoBF,QAA7F;AAAA,UAAuGG,aAAa,GAAG,KAAKA,aAAL,EAAvH;AAAA,UAA6IC,MAAM,GAAG,CAAtJ;AAAA,UAAyJC,KAAK,GAAG,KAAKA,KAAL,EAAjK;AAAA,UAA+KC,UAAU,GAAG,KAAKC,QAAL,EAA5L;AAAA,UAA6MC,aAAa,GAAG,KAAKA,aAAL,EAA7N;AAAA,UAAmPjB,IAAI,GAAG,KAAKA,IAAL,EAA1P;AAAA,UAAuQkB,cAAc,GAAG,KAAKA,cAAL,EAAxR;AAAA,UAA+SC,eAAe,GAAGD,cAAc,CAACtC,OAAf,CAAuB,WAAvB,MAAwC,CAAC,CAA1W;AAAA,UAA6WwC,iBAAiB,GAAGF,cAAc,CAACtC,OAAf,CAAuB,cAAvB,MAA2C,CAAC,CAA7a;AAAA,UAAgbsB,CAAhb;AACA,UAAImB,UAAU,GAAG,CAAjB;AACA,UAAIA,UAAU,GAAGX,YAAY,GAAG,CAAhC;AACA,UAAIY,cAAc,GAAG,CAArB;AACA,UAAIC,cAAc,GAAG,CAArB;AACAnC,MAAAA,OAAO,CAACoC,OAAR,CAAgB,MAAhB,EAAwB,KAAKC,eAAL,EAAxB;AACArC,MAAAA,OAAO,CAACoC,OAAR,CAAgB,cAAhB,EAAgC/D,MAAhC;AACA2B,MAAAA,OAAO,CAACoC,OAAR,CAAgB,WAAhB,EAA6BpE,IAA7B;;AACA,UAAIwD,aAAa,KAAKnD,MAAtB,EAA8B;AAC1BoD,QAAAA,MAAM,GAAG,CAAC,KAAKa,SAAL,KAAmBpB,UAAU,GAAGI,YAAhC,GAA+CF,OAAO,GAAG,CAA1D,IAA+D,CAAxE;AACH,OAFD,MAGK,IAAII,aAAa,KAAKpD,MAAtB,EAA8B;AAC/BqD,QAAAA,MAAM,GAAG,KAAKa,SAAL,KAAmBpB,UAAU,GAAGI,YAAhC,GAA+CF,OAAO,GAAG,CAAlE;AACH;;AACDpB,MAAAA,OAAO,CAACuC,SAAR,CAAkBnB,OAAlB,EAA2BK,MAAM,GAAGL,OAApC;;AACA,WAAKN,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGI,UAAhB,EAA4BJ,CAAC,EAA7B,EAAiC;AAC7B,YAAIoB,cAAc,GAAG,CAArB;AACA,YAAIC,cAAc,GAAG,CAArB;AACA,YAAIK,GAAG,GAAGvB,OAAO,CAACH,CAAD,CAAjB;AAAA,YAAsBK,IAAI,GAAGqB,GAAG,CAACrB,IAAjC;AAAA,YAAuCsB,KAAK,GAAGD,GAAG,CAACC,KAAnD;AAAA,YAA0DC,QAAQ,GAAG5B,CAAC,KAAKI,UAAU,GAAG,CAAxF;AAAA,YAA2FyB,YAA3F;AAAA,YAAyGC,OAAzG;AAAA,YAAkHC,SAAlH;AACA7C,QAAAA,OAAO,CAAC8C,IAAR;;AACA,YAAIpB,KAAK,KAAKjD,KAAd,EAAqB;AACjByD,UAAAA,cAAc,IAAIP,UAAU,GAAGc,KAAb,GAAqBrB,OAAO,GAAG,CAAjD;AACH,SAFD,MAGK,IAAIM,KAAK,KAAK/D,MAAd,EAAsB;AACvBuE,UAAAA,cAAc,IAAI,CAACP,UAAU,GAAGc,KAAb,GAAqBrB,OAAO,GAAG,CAAhC,IAAqC,CAAvD;AACH;;AACD,YAAIW,eAAJ,EAAqB;AACjB/B,UAAAA,OAAO,CAAC8C,IAAR;AACA9C,UAAAA,OAAO,CAAC+C,SAAR;AACA/C,UAAAA,OAAO,CAACgD,MAAR,CAAed,cAAf,EAA+BD,UAAU,GAAGE,cAAb,GAA8Bc,IAAI,CAACC,KAAL,CAAW7B,QAAQ,GAAG,CAAtB,CAA7D;AACAsB,UAAAA,YAAY,GAAGxB,IAAI,CAAChC,KAAL,CAAW,GAAX,EAAgBH,MAAhB,GAAyB,CAAxC;AACA4D,UAAAA,OAAO,GAAGD,YAAY,KAAK,CAA3B;AACAE,UAAAA,SAAS,GACLnB,KAAK,KAAK9D,OAAV,IAAqB8E,QAArB,IAAiC,CAACE,OAAlC,GACMjB,UAAU,GAAGP,OAAO,GAAG,CAD7B,GAEMqB,KAHV;AAIAzC,UAAAA,OAAO,CAACmD,MAAR,CAAejB,cAAc,GAAGe,IAAI,CAACC,KAAL,CAAWL,SAAX,CAAhC,EAAuDZ,UAAU,GAAGE,cAAb,GAA8Bc,IAAI,CAACC,KAAL,CAAW7B,QAAQ,GAAG,CAAtB,CAArF;AACArB,UAAAA,OAAO,CAAC6C,SAAR,GAAoBxB,QAAQ,GAAG,EAA/B;AACArB,UAAAA,OAAO,CAACoD,WAAR,GAAsBxC,IAAtB;AACAZ,UAAAA,OAAO,CAACqD,MAAR;AACArD,UAAAA,OAAO,CAACsD,OAAR;AACH;;AACD,YAAItB,iBAAJ,EAAuB;AACnBhC,UAAAA,OAAO,CAAC8C,IAAR;AACA9C,UAAAA,OAAO,CAAC+C,SAAR;AACA/C,UAAAA,OAAO,CAACgD,MAAR,CAAed,cAAf,EAA+BD,UAAU,GAAGE,cAA5C;AACAQ,UAAAA,YAAY,GAAGxB,IAAI,CAAChC,KAAL,CAAW,GAAX,EAAgBH,MAAhB,GAAyB,CAAxC;AACA4D,UAAAA,OAAO,GAAGD,YAAY,KAAK,CAA3B;AACAE,UAAAA,SAAS,GACLnB,KAAK,KAAK9D,OAAV,IAAqB8E,QAArB,IAAiC,CAACE,OAAlC,GACMjB,UAAU,GAAGP,OAAO,GAAG,CAD7B,GAEMqB,KAHV;AAIAzC,UAAAA,OAAO,CAACmD,MAAR,CAAejB,cAAc,GAAGe,IAAI,CAACC,KAAL,CAAWL,SAAX,CAAhC,EAAuDZ,UAAU,GAAGE,cAApE;AACAnC,UAAAA,OAAO,CAAC6C,SAAR,GAAoBxB,QAAQ,GAAG,EAA/B;AACArB,UAAAA,OAAO,CAACoD,WAAR,GAAsBxC,IAAtB;AACAZ,UAAAA,OAAO,CAACqD,MAAR;AACArD,UAAAA,OAAO,CAACsD,OAAR;AACH;;AACD,YAAIzB,aAAa,KAAK,CAAlB,IAAuBH,KAAK,KAAK9D,OAArC,EAA8C;AAC1C+E,UAAAA,YAAY,GAAGxB,IAAI,CAAChC,KAAL,CAAW,GAAX,EAAgBH,MAAhB,GAAyB,CAAxC;AACA,cAAIuE,KAAK,GAAGjG,aAAa,CAAC6D,IAAD,CAAzB;;AACA,eAAK,IAAIqC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGD,KAAK,CAACvE,MAA5B,EAAoCwE,EAAE,EAAtC,EAA0C;AACtC,gBAAIC,MAAM,GAAGF,KAAK,CAACC,EAAD,CAAlB;;AACA,gBAAIC,MAAM,KAAK,GAAX,IAAkB3C,CAAC,KAAKI,UAAU,GAAG,CAArC,IAA0CQ,KAAK,KAAK9D,OAAxD,EAAiE;AAC7DsE,cAAAA,cAAc,IAAI,CAACP,UAAU,GAAGP,OAAO,GAAG,CAAvB,GAA2BqB,KAA5B,IAAqCE,YAAvD;AACH;;AACD,iBAAKxC,aAAL,GAAqB+B,cAArB;AACA,iBAAK9B,aAAL,GAAqB6B,UAAU,GAAGE,cAAlC;AACA,iBAAKjC,YAAL,GAAoBuD,MAApB;AACAzD,YAAAA,OAAO,CAAC0D,eAAR,CAAwB,IAAxB;AACAxB,YAAAA,cAAc,IAAI,KAAKyB,WAAL,CAAiBF,MAAjB,EAAyBhB,KAAzB,GAAiCZ,aAAnD;AACH;AACJ,SAdD,MAeK;AACD,eAAK1B,aAAL,GAAqB+B,cAArB;AACA,eAAK9B,aAAL,GAAqB6B,UAAU,GAAGE,cAAlC;AACA,eAAKjC,YAAL,GAAoBiB,IAApB;AACAnB,UAAAA,OAAO,CAAC0D,eAAR,CAAwB,IAAxB;AACH;;AACD1D,QAAAA,OAAO,CAACsD,OAAR;;AACA,YAAIpC,UAAU,GAAG,CAAjB,EAAoB;AAChBe,UAAAA,UAAU,IAAIX,YAAd;AACH;AACJ;AACJ;AAnGL;AAAA;AAAA,WAoGI,kBAAStB,OAAT,EAAkB;AACd,UAAIyC,KAAK,GAAG,KAAKb,QAAL,EAAZ;AAAA,UAA6BgC,MAAM,GAAG,KAAKtB,SAAL,EAAtC;AACAtC,MAAAA,OAAO,CAAC+C,SAAR;AACA/C,MAAAA,OAAO,CAAC6D,IAAR,CAAa,CAAb,EAAgB,CAAhB,EAAmBpB,KAAnB,EAA0BmB,MAA1B;AACA5D,MAAAA,OAAO,CAAC8D,SAAR;AACA9D,MAAAA,OAAO,CAAC0D,eAAR,CAAwB,IAAxB;AACH;AA1GL;AAAA;AAAA,WA2GI,iBAAQvC,IAAR,EAAc;AACV,UAAI4C,GAAG,GAAGjH,IAAI,CAACkH,SAAL,CAAe7C,IAAf,IACJA,IADI,GAEJA,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK8C,SAA1B,GACI,EADJ,GAEI9C,IAAI,GAAG,EAJjB;;AAKA,WAAK+C,QAAL,CAAcjG,IAAd,EAAoB8F,GAApB;;AACA,aAAO,IAAP;AACH;AAnHL;AAAA;AAAA,WAoHI,oBAAW;AACP,UAAII,MAAM,GAAG,KAAKC,KAAL,CAAW3B,KAAX,KAAqB/E,IAArB,IAA6B,KAAK0G,KAAL,CAAW3B,KAAX,KAAqBwB,SAA/D;AACA,aAAOE,MAAM,GAAG,KAAKE,YAAL,KAAsB,KAAKjD,OAAL,KAAiB,CAA1C,GAA8C,KAAKgD,KAAL,CAAW3B,KAAtE;AACH;AAvHL;AAAA;AAAA,WAwHI,qBAAY;AACR,UAAI0B,MAAM,GAAG,KAAKC,KAAL,CAAWR,MAAX,KAAsBlG,IAAtB,IAA8B,KAAK0G,KAAL,CAAWR,MAAX,KAAsBK,SAAjE;AACA,aAAOE,MAAM,GACP,KAAK9C,QAAL,KAAkB,KAAKJ,OAAL,CAAajC,MAA/B,GAAwC,KAAKuC,UAAL,EAAxC,GACE,KAAKH,OAAL,KAAiB,CAFZ,GAGP,KAAKgD,KAAL,CAAWR,MAHjB;AAIH;AA9HL;AAAA;AAAA,WA+HI,wBAAe;AACX,aAAO,KAAKU,SAAZ;AACH;AAjIL;AAAA;AAAA,WAkII,yBAAgB;AACZxH,MAAAA,IAAI,CAACyH,IAAL,CAAU,2HAAV;AACA,aAAO,KAAKC,UAAZ;AACH;AArIL;AAAA;AAAA,WAsII,qBAAYrD,IAAZ,EAAkB;AACd,UAAIsD,QAAQ,GAAG7E,eAAe,EAA9B;AAAA,UAAkCyB,QAAQ,GAAG,KAAKA,QAAL,EAA7C;AAAA,UAA8DqD,OAA9D;;AACAD,MAAAA,QAAQ,CAAC3B,IAAT;;AACA2B,MAAAA,QAAQ,CAACE,IAAT,GAAgB,KAAKtC,eAAL,EAAhB;AACAqC,MAAAA,OAAO,GAAGD,QAAQ,CAACG,WAAT,CAAqBzD,IAArB,CAAV;;AACAsD,MAAAA,QAAQ,CAACnB,OAAT;;AACA,aAAO;AACHb,QAAAA,KAAK,EAAEiC,OAAO,CAACjC,KADZ;AAEHmB,QAAAA,MAAM,EAAEvC;AAFL,OAAP;AAIH;AAhJL;AAAA;AAAA,WAiJI,2BAAkB;AACd,aAAQ,KAAKwD,SAAL,KACJrG,KADI,GAEJ,KAAKsG,WAAL,EAFI,GAGJtG,KAHI,IAIH,KAAK6C,QAAL,KAAkB9C,QAJf,IAKJU,mBAAmB,CAAC,KAAKC,UAAL,EAAD,CALvB;AAMH;AAxJL;AAAA;AAAA,WAyJI,sBAAa6F,IAAb,EAAmB;AACf,UAAI,KAAKrD,KAAL,OAAiB9D,OAArB,EAA8B;AAC1BmH,QAAAA,IAAI,GAAGA,IAAI,CAACzF,IAAL,EAAP;AACH;;AACD,UAAImD,KAAK,GAAG,KAAKuC,aAAL,CAAmBD,IAAnB,CAAZ;;AACA,aAAO,KAAK9D,OAAL,CAAagE,IAAb,CAAkB;AAAE9D,QAAAA,IAAI,EAAE4D,IAAR;AAActC,QAAAA,KAAK,EAAEA;AAArB,OAAlB,CAAP;AACH;AA/JL;AAAA;AAAA,WAgKI,uBAActB,IAAd,EAAoB;AAChB,UAAIU,aAAa,GAAG,KAAKA,aAAL,EAApB;AACA,UAAI7C,MAAM,GAAGmC,IAAI,CAACnC,MAAlB;AACA,aAAQY,eAAe,GAAGgF,WAAlB,CAA8BzD,IAA9B,EAAoCsB,KAApC,IACHzD,MAAM,GAAG6C,aAAa,IAAI7C,MAAM,GAAG,CAAb,CAAhB,GAAkC,CADrC,CAAR;AAEH;AArKL;AAAA;AAAA,WAsKI,wBAAe;AACX,UAAIkG,KAAK,GAAG,KAAK/D,IAAL,GAAYhC,KAAZ,CAAkB,IAAlB,CAAZ;AAAA,UAAqCkC,QAAQ,GAAG,CAAC,KAAKA,QAAL,EAAjD;AAAA,UAAkEiD,SAAS,GAAG,CAA9E;AAAA,UAAiFhD,YAAY,GAAG,KAAKC,UAAL,KAAoBF,QAApH;AAAA,UAA8HoB,KAAK,GAAG,KAAK2B,KAAL,CAAW3B,KAAjJ;AAAA,UAAwJmB,MAAM,GAAG,KAAKQ,KAAL,CAAWR,MAA5K;AAAA,UAAoLuB,UAAU,GAAG1C,KAAK,KAAK/E,IAAV,IAAkB+E,KAAK,KAAKwB,SAA7N;AAAA,UAAwOmB,WAAW,GAAGxB,MAAM,KAAKlG,IAAX,IAAmBkG,MAAM,KAAKK,SAApR;AAAA,UAA+R7C,OAAO,GAAG,KAAKA,OAAL,EAAzS;AAAA,UAAyTiE,QAAQ,GAAG5C,KAAK,GAAGrB,OAAO,GAAG,CAAtV;AAAA,UAAyVkE,WAAW,GAAG1B,MAAM,GAAGxC,OAAO,GAAG,CAA1X;AAAA,UAA6XmE,eAAe,GAAG,CAA/Y;AAAA,UAAkZC,IAAI,GAAG,KAAKA,IAAL,EAAzZ;AAAA,UAAsaC,UAAU,GAAGD,IAAI,KAAK5G,IAA5b;AAAA,UAAkc8G,UAAU,GAAGF,IAAI,KAAK7G,IAAT,IAAiB8G,UAAhe;AAAA,UAA4eE,iBAAiB,GAAG,KAAKC,QAAL,EAAhgB;AACA,WAAK3E,OAAL,GAAe,EAAf;AACArB,MAAAA,eAAe,GAAG+E,IAAlB,GAAyB,KAAKtC,eAAL,EAAzB;AACA,UAAIwD,eAAe,GAAGF,iBAAiB,GAAG,KAAKX,aAAL,CAAmBnG,QAAnB,CAAH,GAAkC,CAAzE;;AACA,WAAK,IAAIiH,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGb,KAAK,CAAClG,MAA5B,EAAoC8G,CAAC,GAAGC,GAAxC,EAA6C,EAAED,CAA/C,EAAkD;AAC9C,YAAIf,IAAI,GAAGG,KAAK,CAACY,CAAD,CAAhB;;AACA,YAAIjD,SAAS,GAAG,KAAKmC,aAAL,CAAmBD,IAAnB,CAAhB;;AACA,YAAII,UAAU,IAAItC,SAAS,GAAGwC,QAA9B,EAAwC;AACpC,iBAAON,IAAI,CAAC/F,MAAL,GAAc,CAArB,EAAwB;AACpB,gBAAIgH,GAAG,GAAG,CAAV;AAAA,gBAAaC,IAAI,GAAGlB,IAAI,CAAC/F,MAAzB;AAAA,gBAAiCkH,KAAK,GAAG,EAAzC;AAAA,gBAA6CC,UAAU,GAAG,CAA1D;;AACA,mBAAOH,GAAG,GAAGC,IAAb,EAAmB;AACf,kBAAIG,GAAG,GAAIJ,GAAG,GAAGC,IAAP,KAAiB,CAA3B;AAAA,kBAA8BI,MAAM,GAAGtB,IAAI,CAACuB,KAAL,CAAW,CAAX,EAAcF,GAAG,GAAG,CAApB,CAAvC;AAAA,kBAA+DG,WAAW,GAAG,KAAKvB,aAAL,CAAmBqB,MAAnB,IAA6BR,eAA1G;;AACA,kBAAIU,WAAW,IAAIlB,QAAnB,EAA6B;AACzBW,gBAAAA,GAAG,GAAGI,GAAG,GAAG,CAAZ;AACAF,gBAAAA,KAAK,GAAGG,MAAR;AACAF,gBAAAA,UAAU,GAAGI,WAAb;AACH,eAJD,MAKK;AACDN,gBAAAA,IAAI,GAAGG,GAAP;AACH;AACJ;;AACD,gBAAIF,KAAJ,EAAW;AACP,kBAAIR,UAAJ,EAAgB;AACZ,oBAAIc,SAAJ;AACA,oBAAIC,QAAQ,GAAG1B,IAAI,CAACmB,KAAK,CAAClH,MAAP,CAAnB;AACA,oBAAI0H,iBAAiB,GAAGD,QAAQ,KAAKjI,KAAb,IAAsBiI,QAAQ,KAAK1I,IAA3D;;AACA,oBAAI2I,iBAAiB,IAAIP,UAAU,IAAId,QAAvC,EAAiD;AAC7CmB,kBAAAA,SAAS,GAAGN,KAAK,CAAClH,MAAlB;AACH,iBAFD,MAGK;AACDwH,kBAAAA,SAAS,GACLvD,IAAI,CAAC8C,GAAL,CAASG,KAAK,CAACS,WAAN,CAAkBnI,KAAlB,CAAT,EAAmC0H,KAAK,CAACS,WAAN,CAAkB5I,IAAlB,CAAnC,IACI,CAFR;AAGH;;AACD,oBAAIyI,SAAS,GAAG,CAAhB,EAAmB;AACfR,kBAAAA,GAAG,GAAGQ,SAAN;AACAN,kBAAAA,KAAK,GAAGA,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAeN,GAAf,CAAR;AACAG,kBAAAA,UAAU,GAAG,KAAKnB,aAAL,CAAmBkB,KAAnB,CAAb;AACH;AACJ;;AACDA,cAAAA,KAAK,GAAGA,KAAK,CAACU,SAAN,EAAR;;AACA,mBAAKC,YAAL,CAAkBX,KAAlB;;AACA5B,cAAAA,SAAS,GAAGrB,IAAI,CAAC8C,GAAL,CAASzB,SAAT,EAAoB6B,UAApB,CAAZ;AACAZ,cAAAA,eAAe,IAAIjE,YAAnB;;AACA,kBAAI,CAACmE,UAAD,IACCL,WAAW,IAAIG,eAAe,GAAGjE,YAAlB,GAAiCgE,WADrD,EACmE;AAC/D,oBAAI5C,QAAQ,GAAG,KAAKzB,OAAL,CAAa,KAAKA,OAAL,CAAajC,MAAb,GAAsB,CAAnC,CAAf;;AACA,oBAAI0D,QAAJ,EAAc;AACV,sBAAIiD,iBAAJ,EAAuB;AACnB,wBAAImB,SAAS,GAAG,KAAK9B,aAAL,CAAmBtC,QAAQ,CAACvB,IAAT,GAAgBtC,QAAnC,IAA+CwG,QAA/D;;AACA,wBAAI,CAACyB,SAAL,EAAgB;AACZpE,sBAAAA,QAAQ,CAACvB,IAAT,GAAgBuB,QAAQ,CAACvB,IAAT,CAAcmF,KAAd,CAAoB,CAApB,EAAuB5D,QAAQ,CAACvB,IAAT,CAAcnC,MAAd,GAAuB,CAA9C,CAAhB;AACH;;AACD,yBAAKiC,OAAL,CAAa8F,MAAb,CAAoB,KAAK9F,OAAL,CAAajC,MAAb,GAAsB,CAA1C,EAA6C,CAA7C;;AACA,yBAAK6H,YAAL,CAAkBnE,QAAQ,CAACvB,IAAT,GAAgBtC,QAAlC;AACH;AACJ;;AACD;AACH;;AACDkG,cAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAL,CAAWN,GAAX,CAAP;AACAjB,cAAAA,IAAI,GAAGA,IAAI,CAACiC,QAAL,EAAP;;AACA,kBAAIjC,IAAI,CAAC/F,MAAL,GAAc,CAAlB,EAAqB;AACjB6D,gBAAAA,SAAS,GAAG,KAAKmC,aAAL,CAAmBD,IAAnB,CAAZ;;AACA,oBAAIlC,SAAS,IAAIwC,QAAjB,EAA2B;AACvB,uBAAKwB,YAAL,CAAkB9B,IAAlB;;AACAQ,kBAAAA,eAAe,IAAIjE,YAAnB;AACAgD,kBAAAA,SAAS,GAAGrB,IAAI,CAAC8C,GAAL,CAASzB,SAAT,EAAoBzB,SAApB,CAAZ;AACA;AACH;AACJ;AACJ,aAjDD,MAkDK;AACD;AACH;AACJ;AACJ,SApED,MAqEK;AACD,eAAKgE,YAAL,CAAkB9B,IAAlB;;AACAQ,UAAAA,eAAe,IAAIjE,YAAnB;AACAgD,UAAAA,SAAS,GAAGrB,IAAI,CAAC8C,GAAL,CAASzB,SAAT,EAAoBzB,SAApB,CAAZ;AACH;;AACD,YAAIuC,WAAW,IAAIG,eAAe,GAAGjE,YAAlB,GAAiCgE,WAApD,EAAiE;AAC7D;AACH;AACJ;;AACD,WAAKd,UAAL,GAAkBnD,QAAlB;AACA,WAAKiD,SAAL,GAAiBA,SAAjB;AACH;AA9PL;AAAA;AAAA,WA+PI,iCAAwB;AACpB,aAAO,IAAP;AACH;AAjQL;;AAAA;AAAA,EAA0BtH,KAA1B;AAmQA6D,IAAI,CAACoG,SAAL,CAAelH,SAAf,GAA2BA,SAA3B;AACAc,IAAI,CAACoG,SAAL,CAAe5G,WAAf,GAA6BA,WAA7B;AACAQ,IAAI,CAACoG,SAAL,CAAeC,SAAf,GAA2BhJ,UAA3B;AACA2C,IAAI,CAACoG,SAAL,CAAeE,mBAAf,GAAqC,CACjC,MADiC,EAEjC,UAFiC,EAGjC,SAHiC,EAIjC,MAJiC,EAKjC,YALiC,EAMjC,eANiC,CAArC;;AAQA9J,aAAa,CAACwD,IAAD,CAAb;;AACA9D,OAAO,CAACqK,eAAR,CAAwBvG,IAAxB,EAA8B,OAA9B,EAAuC1D,wBAAwB,EAA/D;AACAJ,OAAO,CAACqK,eAAR,CAAwBvG,IAAxB,EAA8B,QAA9B,EAAwC1D,wBAAwB,EAAhE;AACAJ,OAAO,CAACsK,eAAR,CAAwBxG,IAAxB,EAA8B,YAA9B,EAA4C,OAA5C;AACA9D,OAAO,CAACsK,eAAR,CAAwBxG,IAAxB,EAA8B,UAA9B,EAA0C,EAA1C,EAA8C5D,kBAAkB,EAAhE;AACAF,OAAO,CAACsK,eAAR,CAAwBxG,IAAxB,EAA8B,WAA9B,EAA2CvC,MAA3C;AACAvB,OAAO,CAACsK,eAAR,CAAwBxG,IAAxB,EAA8B,aAA9B,EAA6CvC,MAA7C;AACAvB,OAAO,CAACsK,eAAR,CAAwBxG,IAAxB,EAA8B,SAA9B,EAAyC,CAAzC,EAA4C5D,kBAAkB,EAA9D;AACAF,OAAO,CAACsK,eAAR,CAAwBxG,IAAxB,EAA8B,OAA9B,EAAuC7C,IAAvC;AACAjB,OAAO,CAACsK,eAAR,CAAwBxG,IAAxB,EAA8B,eAA9B,EAA+C1C,GAA/C;AACApB,OAAO,CAACsK,eAAR,CAAwBxG,IAAxB,EAA8B,YAA9B,EAA4C,CAA5C,EAA+C5D,kBAAkB,EAAjE;AACAF,OAAO,CAACsK,eAAR,CAAwBxG,IAAxB,EAA8B,MAA9B,EAAsCnC,IAAtC;AACA3B,OAAO,CAACsK,eAAR,CAAwBxG,IAAxB,EAA8B,UAA9B,EAA0C,KAA1C,EAAiDzD,mBAAmB,EAApE;AACAL,OAAO,CAACsK,eAAR,CAAwBxG,IAAxB,EAA8B,eAA9B,EAA+C,CAA/C,EAAkD5D,kBAAkB,EAApE;AACAF,OAAO,CAACsK,eAAR,CAAwBxG,IAAxB,EAA8B,MAA9B,EAAsC,EAAtC,EAA0C3D,kBAAkB,EAA5D;AACAH,OAAO,CAACsK,eAAR,CAAwBxG,IAAxB,EAA8B,gBAA9B,EAAgD,EAAhD","sourcesContent":["import { Util } from '../Util.js';\nimport { Factory } from '../Factory.js';\nimport { Shape } from '../Shape.js';\nimport { getNumberValidator, getStringValidator, getNumberOrAutoValidator, getBooleanValidator, } from '../Validators.js';\nimport { _registerNode } from '../Global.js';\nexport function stringToArray(string) {\n    return Array.from(string);\n}\nvar AUTO = 'auto', CENTER = 'center', JUSTIFY = 'justify', CHANGE_KONVA = 'Change.konva', CONTEXT_2D = '2d', DASH = '-', LEFT = 'left', TEXT = 'text', TEXT_UPPER = 'Text', TOP = 'top', BOTTOM = 'bottom', MIDDLE = 'middle', NORMAL = 'normal', PX_SPACE = 'px ', SPACE = ' ', RIGHT = 'right', WORD = 'word', CHAR = 'char', NONE = 'none', ELLIPSIS = 'â€¦', ATTR_CHANGE_LIST = [\n    'fontFamily',\n    'fontSize',\n    'fontStyle',\n    'fontVariant',\n    'padding',\n    'align',\n    'verticalAlign',\n    'lineHeight',\n    'text',\n    'width',\n    'height',\n    'wrap',\n    'ellipsis',\n    'letterSpacing',\n], attrChangeListLen = ATTR_CHANGE_LIST.length;\nfunction normalizeFontFamily(fontFamily) {\n    return fontFamily\n        .split(',')\n        .map((family) => {\n        family = family.trim();\n        const hasSpace = family.indexOf(' ') >= 0;\n        const hasQuotes = family.indexOf('\"') >= 0 || family.indexOf(\"'\") >= 0;\n        if (hasSpace && !hasQuotes) {\n            family = `\"${family}\"`;\n        }\n        return family;\n    })\n        .join(', ');\n}\nvar dummyContext;\nfunction getDummyContext() {\n    if (dummyContext) {\n        return dummyContext;\n    }\n    dummyContext = Util.createCanvasElement().getContext(CONTEXT_2D);\n    return dummyContext;\n}\nfunction _fillFunc(context) {\n    context.fillText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction _strokeFunc(context) {\n    context.strokeText(this._partialText, this._partialTextX, this._partialTextY);\n}\nfunction checkDefaultFill(config) {\n    config = config || {};\n    if (!config.fillLinearGradientColorStops &&\n        !config.fillRadialGradientColorStops &&\n        !config.fillPatternImage) {\n        config.fill = config.fill || 'black';\n    }\n    return config;\n}\nexport class Text extends Shape {\n    constructor(config) {\n        super(checkDefaultFill(config));\n        this._partialTextX = 0;\n        this._partialTextY = 0;\n        for (var n = 0; n < attrChangeListLen; n++) {\n            this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);\n        }\n        this._setTextData();\n    }\n    _sceneFunc(context) {\n        var textArr = this.textArr, textArrLen = textArr.length;\n        if (!this.text()) {\n            return;\n        }\n        var padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, verticalAlign = this.verticalAlign(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf('underline') !== -1, shouldLineThrough = textDecoration.indexOf('line-through') !== -1, n;\n        var translateY = 0;\n        var translateY = lineHeightPx / 2;\n        var lineTranslateX = 0;\n        var lineTranslateY = 0;\n        context.setAttr('font', this._getContextFont());\n        context.setAttr('textBaseline', MIDDLE);\n        context.setAttr('textAlign', LEFT);\n        if (verticalAlign === MIDDLE) {\n            alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;\n        }\n        else if (verticalAlign === BOTTOM) {\n            alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;\n        }\n        context.translate(padding, alignY + padding);\n        for (n = 0; n < textArrLen; n++) {\n            var lineTranslateX = 0;\n            var lineTranslateY = 0;\n            var obj = textArr[n], text = obj.text, width = obj.width, lastLine = n !== textArrLen - 1, spacesNumber, oneWord, lineWidth;\n            context.save();\n            if (align === RIGHT) {\n                lineTranslateX += totalWidth - width - padding * 2;\n            }\n            else if (align === CENTER) {\n                lineTranslateX += (totalWidth - width - padding * 2) / 2;\n            }\n            if (shouldUnderline) {\n                context.save();\n                context.beginPath();\n                context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));\n                spacesNumber = text.split(' ').length - 1;\n                oneWord = spacesNumber === 0;\n                lineWidth =\n                    align === JUSTIFY && lastLine && !oneWord\n                        ? totalWidth - padding * 2\n                        : width;\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));\n                context.lineWidth = fontSize / 15;\n                context.strokeStyle = fill;\n                context.stroke();\n                context.restore();\n            }\n            if (shouldLineThrough) {\n                context.save();\n                context.beginPath();\n                context.moveTo(lineTranslateX, translateY + lineTranslateY);\n                spacesNumber = text.split(' ').length - 1;\n                oneWord = spacesNumber === 0;\n                lineWidth =\n                    align === JUSTIFY && lastLine && !oneWord\n                        ? totalWidth - padding * 2\n                        : width;\n                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);\n                context.lineWidth = fontSize / 15;\n                context.strokeStyle = fill;\n                context.stroke();\n                context.restore();\n            }\n            if (letterSpacing !== 0 || align === JUSTIFY) {\n                spacesNumber = text.split(' ').length - 1;\n                var array = stringToArray(text);\n                for (var li = 0; li < array.length; li++) {\n                    var letter = array[li];\n                    if (letter === ' ' && n !== textArrLen - 1 && align === JUSTIFY) {\n                        lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;\n                    }\n                    this._partialTextX = lineTranslateX;\n                    this._partialTextY = translateY + lineTranslateY;\n                    this._partialText = letter;\n                    context.fillStrokeShape(this);\n                    lineTranslateX += this.measureSize(letter).width + letterSpacing;\n                }\n            }\n            else {\n                this._partialTextX = lineTranslateX;\n                this._partialTextY = translateY + lineTranslateY;\n                this._partialText = text;\n                context.fillStrokeShape(this);\n            }\n            context.restore();\n            if (textArrLen > 1) {\n                translateY += lineHeightPx;\n            }\n        }\n    }\n    _hitFunc(context) {\n        var width = this.getWidth(), height = this.getHeight();\n        context.beginPath();\n        context.rect(0, 0, width, height);\n        context.closePath();\n        context.fillStrokeShape(this);\n    }\n    setText(text) {\n        var str = Util._isString(text)\n            ? text\n            : text === null || text === undefined\n                ? ''\n                : text + '';\n        this._setAttr(TEXT, str);\n        return this;\n    }\n    getWidth() {\n        var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;\n        return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;\n    }\n    getHeight() {\n        var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;\n        return isAuto\n            ? this.fontSize() * this.textArr.length * this.lineHeight() +\n                this.padding() * 2\n            : this.attrs.height;\n    }\n    getTextWidth() {\n        return this.textWidth;\n    }\n    getTextHeight() {\n        Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');\n        return this.textHeight;\n    }\n    measureSize(text) {\n        var _context = getDummyContext(), fontSize = this.fontSize(), metrics;\n        _context.save();\n        _context.font = this._getContextFont();\n        metrics = _context.measureText(text);\n        _context.restore();\n        return {\n            width: metrics.width,\n            height: fontSize,\n        };\n    }\n    _getContextFont() {\n        return (this.fontStyle() +\n            SPACE +\n            this.fontVariant() +\n            SPACE +\n            (this.fontSize() + PX_SPACE) +\n            normalizeFontFamily(this.fontFamily()));\n    }\n    _addTextLine(line) {\n        if (this.align() === JUSTIFY) {\n            line = line.trim();\n        }\n        var width = this._getTextWidth(line);\n        return this.textArr.push({ text: line, width: width });\n    }\n    _getTextWidth(text) {\n        var letterSpacing = this.letterSpacing();\n        var length = text.length;\n        return (getDummyContext().measureText(text).width +\n            (length ? letterSpacing * (length - 1) : 0));\n    }\n    _setTextData() {\n        var lines = this.text().split('\\n'), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width = this.attrs.width, height = this.attrs.height, fixedWidth = width !== AUTO && width !== undefined, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxWidth = width - padding * 2, maxHeightPx = height - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis();\n        this.textArr = [];\n        getDummyContext().font = this._getContextFont();\n        var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;\n        for (var i = 0, max = lines.length; i < max; ++i) {\n            var line = lines[i];\n            var lineWidth = this._getTextWidth(line);\n            if (fixedWidth && lineWidth > maxWidth) {\n                while (line.length > 0) {\n                    var low = 0, high = line.length, match = '', matchWidth = 0;\n                    while (low < high) {\n                        var mid = (low + high) >>> 1, substr = line.slice(0, mid + 1), substrWidth = this._getTextWidth(substr) + additionalWidth;\n                        if (substrWidth <= maxWidth) {\n                            low = mid + 1;\n                            match = substr;\n                            matchWidth = substrWidth;\n                        }\n                        else {\n                            high = mid;\n                        }\n                    }\n                    if (match) {\n                        if (wrapAtWord) {\n                            var wrapIndex;\n                            var nextChar = line[match.length];\n                            var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;\n                            if (nextIsSpaceOrDash && matchWidth <= maxWidth) {\n                                wrapIndex = match.length;\n                            }\n                            else {\n                                wrapIndex =\n                                    Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) +\n                                        1;\n                            }\n                            if (wrapIndex > 0) {\n                                low = wrapIndex;\n                                match = match.slice(0, low);\n                                matchWidth = this._getTextWidth(match);\n                            }\n                        }\n                        match = match.trimRight();\n                        this._addTextLine(match);\n                        textWidth = Math.max(textWidth, matchWidth);\n                        currentHeightPx += lineHeightPx;\n                        if (!shouldWrap ||\n                            (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx)) {\n                            var lastLine = this.textArr[this.textArr.length - 1];\n                            if (lastLine) {\n                                if (shouldAddEllipsis) {\n                                    var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;\n                                    if (!haveSpace) {\n                                        lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);\n                                    }\n                                    this.textArr.splice(this.textArr.length - 1, 1);\n                                    this._addTextLine(lastLine.text + ELLIPSIS);\n                                }\n                            }\n                            break;\n                        }\n                        line = line.slice(low);\n                        line = line.trimLeft();\n                        if (line.length > 0) {\n                            lineWidth = this._getTextWidth(line);\n                            if (lineWidth <= maxWidth) {\n                                this._addTextLine(line);\n                                currentHeightPx += lineHeightPx;\n                                textWidth = Math.max(textWidth, lineWidth);\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        break;\n                    }\n                }\n            }\n            else {\n                this._addTextLine(line);\n                currentHeightPx += lineHeightPx;\n                textWidth = Math.max(textWidth, lineWidth);\n            }\n            if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {\n                break;\n            }\n        }\n        this.textHeight = fontSize;\n        this.textWidth = textWidth;\n    }\n    getStrokeScaleEnabled() {\n        return true;\n    }\n}\nText.prototype._fillFunc = _fillFunc;\nText.prototype._strokeFunc = _strokeFunc;\nText.prototype.className = TEXT_UPPER;\nText.prototype._attrsAffectingSize = [\n    'text',\n    'fontSize',\n    'padding',\n    'wrap',\n    'lineHeight',\n    'letterSpacing',\n];\n_registerNode(Text);\nFactory.overWriteSetter(Text, 'width', getNumberOrAutoValidator());\nFactory.overWriteSetter(Text, 'height', getNumberOrAutoValidator());\nFactory.addGetterSetter(Text, 'fontFamily', 'Arial');\nFactory.addGetterSetter(Text, 'fontSize', 12, getNumberValidator());\nFactory.addGetterSetter(Text, 'fontStyle', NORMAL);\nFactory.addGetterSetter(Text, 'fontVariant', NORMAL);\nFactory.addGetterSetter(Text, 'padding', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'align', LEFT);\nFactory.addGetterSetter(Text, 'verticalAlign', TOP);\nFactory.addGetterSetter(Text, 'lineHeight', 1, getNumberValidator());\nFactory.addGetterSetter(Text, 'wrap', WORD);\nFactory.addGetterSetter(Text, 'ellipsis', false, getBooleanValidator());\nFactory.addGetterSetter(Text, 'letterSpacing', 0, getNumberValidator());\nFactory.addGetterSetter(Text, 'text', '', getStringValidator());\nFactory.addGetterSetter(Text, 'textDecoration', '');\n"]},"metadata":{},"sourceType":"module"}