{"ast":null,"code":"var _jsxFileName = \"/Users/pbivrell/light/light/src/components/Picker.js\",\n    _s = $RefreshSig$();\n\nimport '../App.css';\nimport Button from \"react-bootstrap/Button\";\nimport React, { useState } from \"react\";\nimport LightsDetect from \"../components/LightDetect\";\nimport LightsIP from \"../components/LightIP\";\nimport { RgbColorPicker } from \"react-colorful\";\nimport axios from \"axios\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Picker(_ref) {\n  _s();\n\n  let {\n    lights\n  } = _ref;\n  const [color, setColor] = useState({\n    r: 200,\n    g: 150,\n    b: 35\n  }); //const [ip, setIP] = useState({ ip: \"192.168.86.162\", pixels: 50 });\n\n  var last = Date.now();\n\n  function onColorChange(color) {\n    let now = Date.now();\n    console.log(color);\n\n    if (now - last < 100) {\n      console.log(\"ignoring time\");\n      return;\n    }\n\n    last = now;\n    setColor(color);\n\n    if (!lights) {\n      return;\n    }\n\n    console.log(lights);\n    lights.lights.forEach(light => {\n      let data = generateBinary(color, light.pixels);\n      let blob = new Blob([data], {\n        type: \"application/octet-stream\"\n      });\n      let bodyFormData = new FormData();\n      bodyFormData.append(\"file\", blob, \"dummy.bin\");\n      axios({\n        method: \"post\",\n        url: `http://${light.ip}/upload`,\n        data: bodyFormData,\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      }).then(function (response) {\n        //handle success\n        console.log(response);\n      }).catch(function (response) {\n        //handle error\n        console.log(response);\n      });\n    }); //axios.get(`http://${ip}/color?r=${color.r}&g=${color.g}&b=${color.b}`).catch((resp) => {\n    //\tconsole.log(\"TODO\")\n    //});\n  }\n\n  function generateBinary(color, pixels) {\n    let data = new Uint8Array((2 + pixels) * 8);\n    let bytes = getInt64Bytes(pixels);\n    let count = bytes[bytes.length - 2] << 8 | bytes[bytes.length - 1];\n    data[0] = 0x3;\n    data[1] = bytes[bytes.length - 1];\n    data[2] = bytes[bytes.length - 2];\n\n    for (let i = 0; i < pixels; i++) {\n      let bytes = getInt64Bytes(i);\n      data[(i + 1) * 8] = 0x1;\n      data[(i + 1) * 8 + 1] = color.r;\n      data[(i + 1) * 8 + 2] = color.g;\n      data[(i + 1) * 8 + 3] = color.b;\n      data[(i + 1) * 8 + 4] = bytes[bytes.length - 1];\n      data[(i + 1) * 8 + 5] = bytes[bytes.length - 2];\n    }\n\n    data[8 + pixels * 8] = 0x2;\n    data[8 + pixels * 8 + 1] = 200;\n    data[8 + pixels * 8 + 2] = 0;\n    data[8 + pixels * 8 + 3] = 0;\n    data[8 + pixels * 8 + 4] = 0;\n    console.log(data);\n    return data;\n  }\n\n  function getInt64Bytes(x) {\n    let y = Math.floor(x / 2 ** 32);\n    return [y, y << 8, y << 16, y << 24, x, x << 8, x << 16, x << 24].map(z => z >>> 24);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(RgbColorPicker, {\n      color: color,\n      onChange: onColorChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [color.r, \", \", color.g, \", \", color.b]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 2\n  }, this);\n}\n\n_s(Picker, \"FxaNFvROiarhMIXoOiK6/Pjvc1E=\");\n\n_c = Picker;\nexport default Picker;\n\nvar _c;\n\n$RefreshReg$(_c, \"Picker\");","map":{"version":3,"sources":["/Users/pbivrell/light/light/src/components/Picker.js"],"names":["Button","React","useState","LightsDetect","LightsIP","RgbColorPicker","axios","Spinner","Picker","lights","color","setColor","r","g","b","last","Date","now","onColorChange","console","log","forEach","light","data","generateBinary","pixels","blob","Blob","type","bodyFormData","FormData","append","method","url","ip","headers","then","response","catch","Uint8Array","bytes","getInt64Bytes","count","length","i","x","y","Math","floor","map","z"],"mappings":"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","sourcesContent":["import '../App.css';\nimport Button from \"react-bootstrap/Button\";\nimport React, { useState } from \"react\";\nimport LightsDetect from \"../components/LightDetect\";\nimport LightsIP from \"../components/LightIP\";\nimport { RgbColorPicker } from \"react-colorful\";\nimport axios from \"axios\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nfunction Picker({lights}) {\n\n  \tconst [color, setColor] = useState({ r: 200, g: 150, b: 35 });\n\t//const [ip, setIP] = useState({ ip: \"192.168.86.162\", pixels: 50 });\n\n\tvar last = Date.now();\n\tfunction onColorChange(color) {\n\n\t\tlet now = Date.now();\n\t\tconsole.log(color);\n\t\tif (now - last < 100) {\n\t\t\tconsole.log(\"ignoring time\");\n\t\t\treturn;\n\t\t}\n\t\tlast = now;\n\t\tsetColor(color);\n\t\t\n\t\tif (!lights) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.log(lights);\n\t\t\n\t\tlights.lights.forEach((light) => {\n\t\t\tlet data = generateBinary(color, light.pixels);\n                \tlet blob = new Blob([data], {type: \"application/octet-stream\"});\n\t\t\tlet bodyFormData = new FormData();\n                \tbodyFormData.append(\"file\", blob, \"dummy.bin\");\n\n                \taxios({\n                \t\tmethod: \"post\",\n                \t\turl: `http://${light.ip}/upload`,\n                \t\tdata: bodyFormData,\n                \t\theaders: { \"Content-Type\": \"multipart/form-data\" },\n                \t})\n                \t.then(function (response) {\n                \t\t//handle success\n                \t\tconsole.log(response);\n                \t})\n                \t.catch(function (response) {\n                \t\t//handle error\n                \t\tconsole.log(response);\n                \t});\n\t\t});\n\n\t\t//axios.get(`http://${ip}/color?r=${color.r}&g=${color.g}&b=${color.b}`).catch((resp) => {\n\t\t//\tconsole.log(\"TODO\")\n                //});\n\t}\n\t\n\t\n\tfunction generateBinary(color, pixels) {\n\t\t\n\t\tlet data = new Uint8Array((2 + pixels) * 8);\n\t\tlet bytes = getInt64Bytes(pixels);\n\n\t\tlet count = (bytes[bytes.length-2] << 8) | bytes[bytes.length-1];\n\t\t\n\t\tdata[0] = 0x3;\n\t\tdata[1] = bytes[bytes.length-1];\n\t\tdata[2] = bytes[bytes.length-2];\n\n\t\tfor (let i = 0; i < pixels; i++) {\n\t\t\tlet bytes = getInt64Bytes(i);\n\t\t \tdata[(i + 1) * 8] = 0x1;\n\t\t\tdata[(i + 1) * 8 + 1] = color.r;\n\t\t\tdata[(i + 1) * 8 + 2] = color.g;\n\t\t\tdata[(i + 1) * 8 + 3] = color.b;\n\t\t\tdata[(i + 1) * 8 + 4] = bytes[bytes.length-1];\n\t\t\tdata[(i + 1) * 8 + 5] = bytes[bytes.length-2];\n\t\t}\n\n\t\tdata[8 + (pixels * 8)] = 0x2;\n\t\tdata[8 + (pixels * 8) + 1] = 200;\n\t\tdata[8 + (pixels * 8) + 2] = 0;\n\t\tdata[8 + (pixels * 8) + 3] = 0;\n\t\tdata[8 + (pixels * 8) + 4] = 0;\n\n\n\t\tconsole.log(data);\n\t\treturn data;\n\n\t}\n\n\tfunction getInt64Bytes(x) {\n  \t\tlet y= Math.floor(x/2**32);\n  \t\treturn [y,(y<<8),(y<<16),(y<<24), x,(x<<8),(x<<16),(x<<24)].map(z=> z>>>24)\n\t}\n\n\treturn (\n\t<div>\n            <RgbColorPicker color={color} onChange={onColorChange} />\n            <p>{ color.r}, {color.g}, {color.b}</p>\n\t</div>\n  \t);\n}\n\n\nexport default Picker;\n"]},"metadata":{},"sourceType":"module"}